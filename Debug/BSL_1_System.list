
BSL_1_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ea8  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080060a0  080060a0  000160a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060c0  080060c0  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  080060c0  080060c0  000160c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060c8  080060c8  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060c8  080060c8  000160c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060cc  080060cc  000160cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080060d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0007cac4  20000030  080060fc  00020030  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2007caf4  080060fc  0002caf4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b3d  00000000  00000000  0002005a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002319  00000000  00000000  00030b97  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001090  00000000  00000000  00032eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f78  00000000  00000000  00033f40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a138  00000000  00000000  00034eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c7f0  00000000  00000000  0005eff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010ab39  00000000  00000000  0006b7e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00176319  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004644  00000000  00000000  00176394  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000030 	.word	0x20000030
 8000214:	00000000 	.word	0x00000000
 8000218:	08006088 	.word	0x08006088

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000034 	.word	0x20000034
 8000234:	08006088 	.word	0x08006088

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	601a      	str	r2, [r3, #0]
}
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	f023 0210 	bic.w	r2, r3, #16
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	431a      	orrs	r2, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	605a      	str	r2, [r3, #4]
}
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr

0800057e <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 800057e:	b480      	push	{r7}
 8000580:	b083      	sub	sp, #12
 8000582:	af00      	add	r7, sp, #0
 8000584:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	f043 0208 	orr.w	r2, r3, #8
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	605a      	str	r2, [r3, #4]
}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 800059e:	b480      	push	{r7}
 80005a0:	b083      	sub	sp, #12
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	689b      	ldr	r3, [r3, #8]
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d101      	bne.n	80005b6 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80005b2:	2301      	movs	r3, #1
 80005b4:	e000      	b.n	80005b8 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80005b6:	2300      	movs	r3, #0
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	683a      	ldr	r2, [r7, #0]
 80005d2:	619a      	str	r2, [r3, #24]
}
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	041a      	lsls	r2, r3, #16
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	619a      	str	r2, [r3, #24]
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
	...

08000600 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800060a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800060c:	4907      	ldr	r1, [pc, #28]	; (800062c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4313      	orrs	r3, r2
 8000612:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4013      	ands	r3, r2
 800061c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800061e:	68fb      	ldr	r3, [r7, #12]
}
 8000620:	bf00      	nop
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	40023800 	.word	0x40023800

08000630 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000638:	4b08      	ldr	r3, [pc, #32]	; (800065c <LL_APB2_GRP1_EnableClock+0x2c>)
 800063a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800063c:	4907      	ldr	r1, [pc, #28]	; (800065c <LL_APB2_GRP1_EnableClock+0x2c>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4313      	orrs	r3, r2
 8000642:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000644:	4b05      	ldr	r3, [pc, #20]	; (800065c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000646:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4013      	ands	r3, r2
 800064c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800064e:	68fb      	ldr	r3, [r7, #12]
}
 8000650:	bf00      	nop
 8000652:	3714      	adds	r7, #20
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	40023800 	.word	0x40023800

08000660 <adcRead1000>:
{
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
}

void adcRead1000(){
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
	uint32_t i;
	for(i = 0; i<samplesize; i++){
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	e049      	b.n	8000700 <adcRead1000+0xa0>
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_7);
 800066c:	2180      	movs	r1, #128	; 0x80
 800066e:	4828      	ldr	r0, [pc, #160]	; (8000710 <adcRead1000+0xb0>)
 8000670:	f7ff ffa8 	bl	80005c4 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	4826      	ldr	r0, [pc, #152]	; (8000710 <adcRead1000+0xb0>)
 8000678:	f7ff ffb2 	bl	80005e0 <LL_GPIO_ResetOutputPin>
		while (LL_SPI_IsActiveFlag_RXNE(SPI1))
 800067c:	e001      	b.n	8000682 <adcRead1000+0x22>
		{
			(void)(uint16_t)(READ_REG(SPI1->DR)); // flush any FIFO content
 800067e:	4b25      	ldr	r3, [pc, #148]	; (8000714 <adcRead1000+0xb4>)
 8000680:	68db      	ldr	r3, [r3, #12]
		while (LL_SPI_IsActiveFlag_RXNE(SPI1))
 8000682:	4824      	ldr	r0, [pc, #144]	; (8000714 <adcRead1000+0xb4>)
 8000684:	f7ff ff8b 	bl	800059e <LL_SPI_IsActiveFlag_RXNE>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d1f7      	bne.n	800067e <adcRead1000+0x1e>
		}
		__IO uint16_t *spidr = ((__IO uint16_t *)&SPI1->DR);
 800068e:	4b22      	ldr	r3, [pc, #136]	; (8000718 <adcRead1000+0xb8>)
 8000690:	60bb      	str	r3, [r7, #8]
		*spidr = 0xFFFF;
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000698:	801a      	strh	r2, [r3, #0]
		uint16_t first = (uint16_t)(READ_REG(SPI1->DR));
 800069a:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <adcRead1000+0xb4>)
 800069c:	68db      	ldr	r3, [r3, #12]
 800069e:	80fb      	strh	r3, [r7, #6]
		*spidr = 0xFFFF;
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006a6:	801a      	strh	r2, [r3, #0]
		uint16_t second = (uint16_t)(READ_REG(SPI1->DR));
 80006a8:	4b1a      	ldr	r3, [pc, #104]	; (8000714 <adcRead1000+0xb4>)
 80006aa:	68db      	ldr	r3, [r3, #12]
 80006ac:	80bb      	strh	r3, [r7, #4]
		uint32_t first2 = first;
 80006ae:	88fb      	ldrh	r3, [r7, #6]
 80006b0:	603b      	str	r3, [r7, #0]
		read_data = ((first2<<12)+(second));
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	031a      	lsls	r2, r3, #12
 80006b6:	88bb      	ldrh	r3, [r7, #4]
 80006b8:	4413      	add	r3, r2
 80006ba:	4a18      	ldr	r2, [pc, #96]	; (800071c <adcRead1000+0xbc>)
 80006bc:	6013      	str	r3, [r2, #0]
		the_stuff[2][i] = read_data;
 80006be:	4b17      	ldr	r3, [pc, #92]	; (800071c <adcRead1000+0xbc>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	b2d9      	uxtb	r1, r3
 80006c4:	4a16      	ldr	r2, [pc, #88]	; (8000720 <adcRead1000+0xc0>)
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	441a      	add	r2, r3
 80006ca:	4b16      	ldr	r3, [pc, #88]	; (8000724 <adcRead1000+0xc4>)
 80006cc:	4413      	add	r3, r2
 80006ce:	460a      	mov	r2, r1
 80006d0:	701a      	strb	r2, [r3, #0]
		the_stuff[1][i] = (read_data >> 8);
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <adcRead1000+0xbc>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	0a1b      	lsrs	r3, r3, #8
 80006d8:	b2d9      	uxtb	r1, r3
 80006da:	4a11      	ldr	r2, [pc, #68]	; (8000720 <adcRead1000+0xc0>)
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	441a      	add	r2, r3
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <adcRead1000+0xc8>)
 80006e2:	4413      	add	r3, r2
 80006e4:	460a      	mov	r2, r1
 80006e6:	701a      	strb	r2, [r3, #0]
		the_stuff[0][i] = (read_data >> 16);
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <adcRead1000+0xbc>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	0c1b      	lsrs	r3, r3, #16
 80006ee:	b2d9      	uxtb	r1, r3
 80006f0:	4a0b      	ldr	r2, [pc, #44]	; (8000720 <adcRead1000+0xc0>)
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	4413      	add	r3, r2
 80006f6:	460a      	mov	r2, r1
 80006f8:	701a      	strb	r2, [r3, #0]
	for(i = 0; i<samplesize; i++){
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	3301      	adds	r3, #1
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	4a0a      	ldr	r2, [pc, #40]	; (800072c <adcRead1000+0xcc>)
 8000704:	4293      	cmp	r3, r2
 8000706:	d9b1      	bls.n	800066c <adcRead1000+0xc>
		//delay_10ns(sampleRateDivider);
	}
}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40020000 	.word	0x40020000
 8000714:	40013000 	.word	0x40013000
 8000718:	4001300c 	.word	0x4001300c
 800071c:	2007ca6c 	.word	0x2007ca6c
 8000720:	2000023c 	.word	0x2000023c
 8000724:	00053020 	.word	0x00053020
 8000728:	00029810 	.word	0x00029810
 800072c:	0002980f 	.word	0x0002980f

08000730 <transmit1000>:

void transmit1000(){
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
	uint32_t i;
	uint32_t j;
	for(i  = 0; i <samplesize; i++){
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	e019      	b.n	8000770 <transmit1000+0x40>
		for(j = 0; j<3; j++){
 800073c:	2300      	movs	r3, #0
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	e010      	b.n	8000764 <transmit1000+0x34>
			HAL_UART_Transmit(&huart3, (uint8_t*)&the_stuff[j][i], sizeof(the_stuff[j][i]), 0xFFFF);
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	4a0e      	ldr	r2, [pc, #56]	; (8000780 <transmit1000+0x50>)
 8000746:	fb02 f203 	mul.w	r2, r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4413      	add	r3, r2
 800074e:	4a0d      	ldr	r2, [pc, #52]	; (8000784 <transmit1000+0x54>)
 8000750:	1899      	adds	r1, r3, r2
 8000752:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000756:	2201      	movs	r2, #1
 8000758:	480b      	ldr	r0, [pc, #44]	; (8000788 <transmit1000+0x58>)
 800075a:	f004 fb09 	bl	8004d70 <HAL_UART_Transmit>
		for(j = 0; j<3; j++){
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	3301      	adds	r3, #1
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	2b02      	cmp	r3, #2
 8000768:	d9eb      	bls.n	8000742 <transmit1000+0x12>
	for(i  = 0; i <samplesize; i++){
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	3301      	adds	r3, #1
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4a06      	ldr	r2, [pc, #24]	; (800078c <transmit1000+0x5c>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d9e1      	bls.n	800073c <transmit1000+0xc>
		}
	}
}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	00029810 	.word	0x00029810
 8000784:	2000023c 	.word	0x2000023c
 8000788:	20000154 	.word	0x20000154
 800078c:	0002980f 	.word	0x0002980f

08000790 <AD9833_tx2>:
void AD9833_tx2(SPI_HandleTypeDef *hspi, uint16_t dt, uint8_t DDS_Num) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	460b      	mov	r3, r1
 800079a:	807b      	strh	r3, [r7, #2]
 800079c:	4613      	mov	r3, r2
 800079e:	707b      	strb	r3, [r7, #1]
	uint16_t data[1] = { 0 };
 80007a0:	2300      	movs	r3, #0
 80007a2:	81bb      	strh	r3, [r7, #12]
	data[0] = dt;
 80007a4:	887b      	ldrh	r3, [r7, #2]
 80007a6:	81bb      	strh	r3, [r7, #12]
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_15);
 80007a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ac:	4809      	ldr	r0, [pc, #36]	; (80007d4 <AD9833_tx2+0x44>)
 80007ae:	f7ff ff17 	bl	80005e0 <LL_GPIO_ResetOutputPin>
	HAL_SPI_Transmit(hspi, (uint8_t * )&data[0], 1, HAL_MAX_DELAY);
 80007b2:	f107 010c 	add.w	r1, r7, #12
 80007b6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ba:	2201      	movs	r2, #1
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f003 f92f 	bl	8003a20 <HAL_SPI_Transmit>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_15);
 80007c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007c6:	4803      	ldr	r0, [pc, #12]	; (80007d4 <AD9833_tx2+0x44>)
 80007c8:	f7ff fefc 	bl	80005c4 <LL_GPIO_SetOutputPin>

}
 80007cc:	bf00      	nop
 80007ce:	3710      	adds	r7, #16
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40020400 	.word	0x40020400

080007d8 <AD9833_Init2>:

void AD9833_Init2(SPI_HandleTypeDef *hspi, uint8_t DDS_Num) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	460b      	mov	r3, r1
 80007e2:	70fb      	strb	r3, [r7, #3]
	uint16_t data;
	data = 0x21 << 8;
 80007e4:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 80007e8:	81fb      	strh	r3, [r7, #14]
	AD9833_tx2(hspi, data, DDS_Num);
 80007ea:	78fa      	ldrb	r2, [r7, #3]
 80007ec:	89fb      	ldrh	r3, [r7, #14]
 80007ee:	4619      	mov	r1, r3
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff ffcd 	bl	8000790 <AD9833_tx2>
}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <AD9833_freq_calc2>:
uint64_t AD9833_freq_calc2(uint64_t freq, uint64_t clk) {
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800080a:	e9c7 2300 	strd	r2, r3, [r7]
	static uint64_t ret;
	static uint64_t retf;

	retf = (freq * (2 << 27)) / clk;
 800080e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000812:	f04f 0000 	mov.w	r0, #0
 8000816:	f04f 0100 	mov.w	r1, #0
 800081a:	0721      	lsls	r1, r4, #28
 800081c:	ea41 1113 	orr.w	r1, r1, r3, lsr #4
 8000820:	0718      	lsls	r0, r3, #28
 8000822:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000826:	f7ff fd07 	bl	8000238 <__aeabi_uldivmod>
 800082a:	4603      	mov	r3, r0
 800082c:	460c      	mov	r4, r1
 800082e:	4a08      	ldr	r2, [pc, #32]	; (8000850 <AD9833_freq_calc2+0x50>)
 8000830:	e9c2 3400 	strd	r3, r4, [r2]
	ret = retf;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <AD9833_freq_calc2+0x50>)
 8000836:	e9d3 3400 	ldrd	r3, r4, [r3]
 800083a:	4a06      	ldr	r2, [pc, #24]	; (8000854 <AD9833_freq_calc2+0x54>)
 800083c:	e9c2 3400 	strd	r3, r4, [r2]
	return ret;
 8000840:	4b04      	ldr	r3, [pc, #16]	; (8000854 <AD9833_freq_calc2+0x54>)
 8000842:	e9d3 3400 	ldrd	r3, r4, [r3]
}
 8000846:	4618      	mov	r0, r3
 8000848:	4621      	mov	r1, r4
 800084a:	3714      	adds	r7, #20
 800084c:	46bd      	mov	sp, r7
 800084e:	bd90      	pop	{r4, r7, pc}
 8000850:	20000050 	.word	0x20000050
 8000854:	20000058 	.word	0x20000058

08000858 <AD9833_set2>:
void AD9833_set2(SPI_HandleTypeDef *hspi, uint32_t freq, uint16_t phase,
		uint8_t reset, uint8_t DDS_Num) {
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b087      	sub	sp, #28
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	4611      	mov	r1, r2
 8000864:	461a      	mov	r2, r3
 8000866:	460b      	mov	r3, r1
 8000868:	80fb      	strh	r3, [r7, #6]
 800086a:	4613      	mov	r3, r2
 800086c:	717b      	strb	r3, [r7, #5]
	static uint16_t fqlsb;
	static uint16_t fqmsb;

	static uint64_t FreqReg;
	static uint16_t PhReg;
	const uint64_t fmclk = 25000000;
 800086e:	a464      	add	r4, pc, #400	; (adr r4, 8000a00 <AD9833_set2+0x1a8>)
 8000870:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000874:	e9c7 3404 	strd	r3, r4, [r7, #16]

	if (reset)
 8000878:	797b      	ldrb	r3, [r7, #5]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d005      	beq.n	800088a <AD9833_set2+0x32>
		AD9833_Init2(hspi, DDS_Num);
 800087e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000882:	4619      	mov	r1, r3
 8000884:	68f8      	ldr	r0, [r7, #12]
 8000886:	f7ff ffa7 	bl	80007d8 <AD9833_Init2>

	FreqReg = AD9833_freq_calc2(freq, fmclk);
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	4618      	mov	r0, r3
 800088e:	f04f 0100 	mov.w	r1, #0
 8000892:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000896:	f7ff ffb3 	bl	8000800 <AD9833_freq_calc2>
 800089a:	4603      	mov	r3, r0
 800089c:	460c      	mov	r4, r1
 800089e:	4a4e      	ldr	r2, [pc, #312]	; (80009d8 <AD9833_set2+0x180>)
 80008a0:	e9c2 3400 	strd	r3, r4, [r2]
	fqlsb = FreqReg & ftmask;
 80008a4:	4b4c      	ldr	r3, [pc, #304]	; (80009d8 <AD9833_set2+0x180>)
 80008a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	4b4b      	ldr	r3, [pc, #300]	; (80009dc <AD9833_set2+0x184>)
 80008ae:	881b      	ldrh	r3, [r3, #0]
 80008b0:	4013      	ands	r3, r2
 80008b2:	b29a      	uxth	r2, r3
 80008b4:	4b4a      	ldr	r3, [pc, #296]	; (80009e0 <AD9833_set2+0x188>)
 80008b6:	801a      	strh	r2, [r3, #0]
	fqmsb = (FreqReg >> 14) & ftmask;
 80008b8:	4b47      	ldr	r3, [pc, #284]	; (80009d8 <AD9833_set2+0x180>)
 80008ba:	e9d3 1200 	ldrd	r1, r2, [r3]
 80008be:	f04f 0300 	mov.w	r3, #0
 80008c2:	f04f 0400 	mov.w	r4, #0
 80008c6:	0b8b      	lsrs	r3, r1, #14
 80008c8:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 80008cc:	0b94      	lsrs	r4, r2, #14
 80008ce:	b29a      	uxth	r2, r3
 80008d0:	4b42      	ldr	r3, [pc, #264]	; (80009dc <AD9833_set2+0x184>)
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	4013      	ands	r3, r2
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	4b42      	ldr	r3, [pc, #264]	; (80009e4 <AD9833_set2+0x18c>)
 80008da:	801a      	strh	r2, [r3, #0]

	fqlsb = fq1maskand & fqlsb;
 80008dc:	4b42      	ldr	r3, [pc, #264]	; (80009e8 <AD9833_set2+0x190>)
 80008de:	881a      	ldrh	r2, [r3, #0]
 80008e0:	4b3f      	ldr	r3, [pc, #252]	; (80009e0 <AD9833_set2+0x188>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	4013      	ands	r3, r2
 80008e6:	b29a      	uxth	r2, r3
 80008e8:	4b3d      	ldr	r3, [pc, #244]	; (80009e0 <AD9833_set2+0x188>)
 80008ea:	801a      	strh	r2, [r3, #0]
	fqlsb = fq1maskor | fqlsb;
 80008ec:	4b3f      	ldr	r3, [pc, #252]	; (80009ec <AD9833_set2+0x194>)
 80008ee:	881a      	ldrh	r2, [r3, #0]
 80008f0:	4b3b      	ldr	r3, [pc, #236]	; (80009e0 <AD9833_set2+0x188>)
 80008f2:	881b      	ldrh	r3, [r3, #0]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	b29a      	uxth	r2, r3
 80008f8:	4b39      	ldr	r3, [pc, #228]	; (80009e0 <AD9833_set2+0x188>)
 80008fa:	801a      	strh	r2, [r3, #0]
	fqmsb = fq1maskand & fqmsb;
 80008fc:	4b3a      	ldr	r3, [pc, #232]	; (80009e8 <AD9833_set2+0x190>)
 80008fe:	881a      	ldrh	r2, [r3, #0]
 8000900:	4b38      	ldr	r3, [pc, #224]	; (80009e4 <AD9833_set2+0x18c>)
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	4013      	ands	r3, r2
 8000906:	b29a      	uxth	r2, r3
 8000908:	4b36      	ldr	r3, [pc, #216]	; (80009e4 <AD9833_set2+0x18c>)
 800090a:	801a      	strh	r2, [r3, #0]
	fqmsb = fq1maskor | fqmsb;
 800090c:	4b37      	ldr	r3, [pc, #220]	; (80009ec <AD9833_set2+0x194>)
 800090e:	881a      	ldrh	r2, [r3, #0]
 8000910:	4b34      	ldr	r3, [pc, #208]	; (80009e4 <AD9833_set2+0x18c>)
 8000912:	881b      	ldrh	r3, [r3, #0]
 8000914:	4313      	orrs	r3, r2
 8000916:	b29a      	uxth	r2, r3
 8000918:	4b32      	ldr	r3, [pc, #200]	; (80009e4 <AD9833_set2+0x18c>)
 800091a:	801a      	strh	r2, [r3, #0]

	PhReg = (phase * 2 * M_PI) / 4096;
 800091c:	88fb      	ldrh	r3, [r7, #6]
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	ee07 3a90 	vmov	s15, r3
 8000924:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000928:	ed9f 6b27 	vldr	d6, [pc, #156]	; 80009c8 <AD9833_set2+0x170>
 800092c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000930:	ed9f 5b27 	vldr	d5, [pc, #156]	; 80009d0 <AD9833_set2+0x178>
 8000934:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000938:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800093c:	ee17 3a90 	vmov	r3, s15
 8000940:	b29a      	uxth	r2, r3
 8000942:	4b2b      	ldr	r3, [pc, #172]	; (80009f0 <AD9833_set2+0x198>)
 8000944:	801a      	strh	r2, [r3, #0]
	PhReg &= twmask;
 8000946:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <AD9833_set2+0x198>)
 8000948:	881a      	ldrh	r2, [r3, #0]
 800094a:	4b2a      	ldr	r3, [pc, #168]	; (80009f4 <AD9833_set2+0x19c>)
 800094c:	881b      	ldrh	r3, [r3, #0]
 800094e:	4013      	ands	r3, r2
 8000950:	b29a      	uxth	r2, r3
 8000952:	4b27      	ldr	r3, [pc, #156]	; (80009f0 <AD9833_set2+0x198>)
 8000954:	801a      	strh	r2, [r3, #0]

	PhReg &= ph1maskand;
 8000956:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <AD9833_set2+0x198>)
 8000958:	881a      	ldrh	r2, [r3, #0]
 800095a:	4b27      	ldr	r3, [pc, #156]	; (80009f8 <AD9833_set2+0x1a0>)
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	4013      	ands	r3, r2
 8000960:	b29a      	uxth	r2, r3
 8000962:	4b23      	ldr	r3, [pc, #140]	; (80009f0 <AD9833_set2+0x198>)
 8000964:	801a      	strh	r2, [r3, #0]
	PhReg |= ph1markor;
 8000966:	4b22      	ldr	r3, [pc, #136]	; (80009f0 <AD9833_set2+0x198>)
 8000968:	881a      	ldrh	r2, [r3, #0]
 800096a:	4b24      	ldr	r3, [pc, #144]	; (80009fc <AD9833_set2+0x1a4>)
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	4313      	orrs	r3, r2
 8000970:	b29a      	uxth	r2, r3
 8000972:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <AD9833_set2+0x198>)
 8000974:	801a      	strh	r2, [r3, #0]

	AD9833_tx2(hspi, fqlsb, DDS_Num);
 8000976:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <AD9833_set2+0x188>)
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800097e:	4619      	mov	r1, r3
 8000980:	68f8      	ldr	r0, [r7, #12]
 8000982:	f7ff ff05 	bl	8000790 <AD9833_tx2>
	AD9833_tx2(hspi, fqmsb, DDS_Num);
 8000986:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <AD9833_set2+0x18c>)
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800098e:	4619      	mov	r1, r3
 8000990:	68f8      	ldr	r0, [r7, #12]
 8000992:	f7ff fefd 	bl	8000790 <AD9833_tx2>
	AD9833_tx2(hspi, PhReg, DDS_Num);
 8000996:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <AD9833_set2+0x198>)
 8000998:	881b      	ldrh	r3, [r3, #0]
 800099a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800099e:	4619      	mov	r1, r3
 80009a0:	68f8      	ldr	r0, [r7, #12]
 80009a2:	f7ff fef5 	bl	8000790 <AD9833_tx2>
	if (reset)
 80009a6:	797b      	ldrb	r3, [r7, #5]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d007      	beq.n	80009bc <AD9833_set2+0x164>
		AD9833_tx2(hspi, 0x2000, DDS_Num);
 80009ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80009b0:	461a      	mov	r2, r3
 80009b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009b6:	68f8      	ldr	r0, [r7, #12]
 80009b8:	f7ff feea 	bl	8000790 <AD9833_tx2>
}
 80009bc:	bf00      	nop
 80009be:	371c      	adds	r7, #28
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd90      	pop	{r4, r7, pc}
 80009c4:	f3af 8000 	nop.w
 80009c8:	54442d18 	.word	0x54442d18
 80009cc:	400921fb 	.word	0x400921fb
 80009d0:	00000000 	.word	0x00000000
 80009d4:	40b00000 	.word	0x40b00000
 80009d8:	20000060 	.word	0x20000060
 80009dc:	20000006 	.word	0x20000006
 80009e0:	20000068 	.word	0x20000068
 80009e4:	2000006a 	.word	0x2000006a
 80009e8:	20000008 	.word	0x20000008
 80009ec:	2000000a 	.word	0x2000000a
 80009f0:	2000006c 	.word	0x2000006c
 80009f4:	2000000c 	.word	0x2000000c
 80009f8:	2000000e 	.word	0x2000000e
 80009fc:	20000010 	.word	0x20000010
 8000a00:	017d7840 	.word	0x017d7840
 8000a04:	00000000 	.word	0x00000000

08000a08 <AD9833_tx>:
// NUMBER 1 DDS:
void AD9833_tx(SPI_HandleTypeDef *hspi, uint16_t dt, uint8_t DDS_Num) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	460b      	mov	r3, r1
 8000a12:	807b      	strh	r3, [r7, #2]
 8000a14:	4613      	mov	r3, r2
 8000a16:	707b      	strb	r3, [r7, #1]
	uint16_t data[1] = { 0 };
 8000a18:	2300      	movs	r3, #0
 8000a1a:	81bb      	strh	r3, [r7, #12]
	data[0] = dt;
 8000a1c:	887b      	ldrh	r3, [r7, #2]
 8000a1e:	81bb      	strh	r3, [r7, #12]
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12);
 8000a20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a24:	4809      	ldr	r0, [pc, #36]	; (8000a4c <AD9833_tx+0x44>)
 8000a26:	f7ff fddb 	bl	80005e0 <LL_GPIO_ResetOutputPin>
	HAL_SPI_Transmit(hspi, (uint8_t * )&data[0], 1, HAL_MAX_DELAY);
 8000a2a:	f107 010c 	add.w	r1, r7, #12
 8000a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a32:	2201      	movs	r2, #1
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f002 fff3 	bl	8003a20 <HAL_SPI_Transmit>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_12);
 8000a3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a3e:	4803      	ldr	r0, [pc, #12]	; (8000a4c <AD9833_tx+0x44>)
 8000a40:	f7ff fdc0 	bl	80005c4 <LL_GPIO_SetOutputPin>
}
 8000a44:	bf00      	nop
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40020400 	.word	0x40020400

08000a50 <AD9833_Init>:

void AD9833_Init(SPI_HandleTypeDef *hspi, uint8_t DDS_Num) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	460b      	mov	r3, r1
 8000a5a:	70fb      	strb	r3, [r7, #3]
	uint16_t data;
	data = 0x21 << 8;
 8000a5c:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8000a60:	81fb      	strh	r3, [r7, #14]
	AD9833_tx(hspi, data, DDS_Num);
 8000a62:	78fa      	ldrb	r2, [r7, #3]
 8000a64:	89fb      	ldrh	r3, [r7, #14]
 8000a66:	4619      	mov	r1, r3
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff ffcd 	bl	8000a08 <AD9833_tx>
}
 8000a6e:	bf00      	nop
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <AD9833_freq_calc>:
uint64_t AD9833_freq_calc(uint64_t freq, uint64_t clk) {
 8000a78:	b590      	push	{r4, r7, lr}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000a82:	e9c7 2300 	strd	r2, r3, [r7]
	static uint64_t ret;
	static uint64_t retf;

	retf = (freq * (2 << 27)) / clk;
 8000a86:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000a8a:	f04f 0000 	mov.w	r0, #0
 8000a8e:	f04f 0100 	mov.w	r1, #0
 8000a92:	0721      	lsls	r1, r4, #28
 8000a94:	ea41 1113 	orr.w	r1, r1, r3, lsr #4
 8000a98:	0718      	lsls	r0, r3, #28
 8000a9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000a9e:	f7ff fbcb 	bl	8000238 <__aeabi_uldivmod>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	460c      	mov	r4, r1
 8000aa6:	4a08      	ldr	r2, [pc, #32]	; (8000ac8 <AD9833_freq_calc+0x50>)
 8000aa8:	e9c2 3400 	strd	r3, r4, [r2]
	ret = retf;
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <AD9833_freq_calc+0x50>)
 8000aae:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000ab2:	4a06      	ldr	r2, [pc, #24]	; (8000acc <AD9833_freq_calc+0x54>)
 8000ab4:	e9c2 3400 	strd	r3, r4, [r2]
	return ret;
 8000ab8:	4b04      	ldr	r3, [pc, #16]	; (8000acc <AD9833_freq_calc+0x54>)
 8000aba:	e9d3 3400 	ldrd	r3, r4, [r3]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	4621      	mov	r1, r4
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd90      	pop	{r4, r7, pc}
 8000ac8:	20000070 	.word	0x20000070
 8000acc:	20000078 	.word	0x20000078

08000ad0 <AD9833_set>:
void AD9833_set(SPI_HandleTypeDef *hspi, uint32_t freq, uint16_t phase,
		uint8_t reset, uint8_t DDS_Num) {
 8000ad0:	b590      	push	{r4, r7, lr}
 8000ad2:	b087      	sub	sp, #28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	4611      	mov	r1, r2
 8000adc:	461a      	mov	r2, r3
 8000ade:	460b      	mov	r3, r1
 8000ae0:	80fb      	strh	r3, [r7, #6]
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	717b      	strb	r3, [r7, #5]
	static uint16_t fqlsb;
	static uint16_t fqmsb;

	static uint64_t FreqReg;
	static uint16_t PhReg;
	const uint64_t fmclk = 25000000;
 8000ae6:	a464      	add	r4, pc, #400	; (adr r4, 8000c78 <AD9833_set+0x1a8>)
 8000ae8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000aec:	e9c7 3404 	strd	r3, r4, [r7, #16]

	if (reset)
 8000af0:	797b      	ldrb	r3, [r7, #5]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d005      	beq.n	8000b02 <AD9833_set+0x32>
		AD9833_Init(hspi, DDS_Num);
 8000af6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000afa:	4619      	mov	r1, r3
 8000afc:	68f8      	ldr	r0, [r7, #12]
 8000afe:	f7ff ffa7 	bl	8000a50 <AD9833_Init>

	FreqReg = AD9833_freq_calc(freq, fmclk);
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f04f 0100 	mov.w	r1, #0
 8000b0a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000b0e:	f7ff ffb3 	bl	8000a78 <AD9833_freq_calc>
 8000b12:	4603      	mov	r3, r0
 8000b14:	460c      	mov	r4, r1
 8000b16:	4a4e      	ldr	r2, [pc, #312]	; (8000c50 <AD9833_set+0x180>)
 8000b18:	e9c2 3400 	strd	r3, r4, [r2]
	fqlsb = FreqReg & ftmask;
 8000b1c:	4b4c      	ldr	r3, [pc, #304]	; (8000c50 <AD9833_set+0x180>)
 8000b1e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	4b4b      	ldr	r3, [pc, #300]	; (8000c54 <AD9833_set+0x184>)
 8000b26:	881b      	ldrh	r3, [r3, #0]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	4b4a      	ldr	r3, [pc, #296]	; (8000c58 <AD9833_set+0x188>)
 8000b2e:	801a      	strh	r2, [r3, #0]
	fqmsb = (FreqReg >> 14) & ftmask;
 8000b30:	4b47      	ldr	r3, [pc, #284]	; (8000c50 <AD9833_set+0x180>)
 8000b32:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000b36:	f04f 0300 	mov.w	r3, #0
 8000b3a:	f04f 0400 	mov.w	r4, #0
 8000b3e:	0b8b      	lsrs	r3, r1, #14
 8000b40:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8000b44:	0b94      	lsrs	r4, r2, #14
 8000b46:	b29a      	uxth	r2, r3
 8000b48:	4b42      	ldr	r3, [pc, #264]	; (8000c54 <AD9833_set+0x184>)
 8000b4a:	881b      	ldrh	r3, [r3, #0]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	4b42      	ldr	r3, [pc, #264]	; (8000c5c <AD9833_set+0x18c>)
 8000b52:	801a      	strh	r2, [r3, #0]

	fqlsb = fq1maskand & fqlsb;
 8000b54:	4b42      	ldr	r3, [pc, #264]	; (8000c60 <AD9833_set+0x190>)
 8000b56:	881a      	ldrh	r2, [r3, #0]
 8000b58:	4b3f      	ldr	r3, [pc, #252]	; (8000c58 <AD9833_set+0x188>)
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	b29a      	uxth	r2, r3
 8000b60:	4b3d      	ldr	r3, [pc, #244]	; (8000c58 <AD9833_set+0x188>)
 8000b62:	801a      	strh	r2, [r3, #0]
	fqlsb = fq1maskor | fqlsb;
 8000b64:	4b3f      	ldr	r3, [pc, #252]	; (8000c64 <AD9833_set+0x194>)
 8000b66:	881a      	ldrh	r2, [r3, #0]
 8000b68:	4b3b      	ldr	r3, [pc, #236]	; (8000c58 <AD9833_set+0x188>)
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	4b39      	ldr	r3, [pc, #228]	; (8000c58 <AD9833_set+0x188>)
 8000b72:	801a      	strh	r2, [r3, #0]
	fqmsb = fq1maskand & fqmsb;
 8000b74:	4b3a      	ldr	r3, [pc, #232]	; (8000c60 <AD9833_set+0x190>)
 8000b76:	881a      	ldrh	r2, [r3, #0]
 8000b78:	4b38      	ldr	r3, [pc, #224]	; (8000c5c <AD9833_set+0x18c>)
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	b29a      	uxth	r2, r3
 8000b80:	4b36      	ldr	r3, [pc, #216]	; (8000c5c <AD9833_set+0x18c>)
 8000b82:	801a      	strh	r2, [r3, #0]
	fqmsb = fq1maskor | fqmsb;
 8000b84:	4b37      	ldr	r3, [pc, #220]	; (8000c64 <AD9833_set+0x194>)
 8000b86:	881a      	ldrh	r2, [r3, #0]
 8000b88:	4b34      	ldr	r3, [pc, #208]	; (8000c5c <AD9833_set+0x18c>)
 8000b8a:	881b      	ldrh	r3, [r3, #0]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	b29a      	uxth	r2, r3
 8000b90:	4b32      	ldr	r3, [pc, #200]	; (8000c5c <AD9833_set+0x18c>)
 8000b92:	801a      	strh	r2, [r3, #0]

	PhReg = (phase * 2 * M_PI) / 4096;
 8000b94:	88fb      	ldrh	r3, [r7, #6]
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	ee07 3a90 	vmov	s15, r3
 8000b9c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ba0:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8000c40 <AD9833_set+0x170>
 8000ba4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ba8:	ed9f 5b27 	vldr	d5, [pc, #156]	; 8000c48 <AD9833_set+0x178>
 8000bac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000bb0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000bb4:	ee17 3a90 	vmov	r3, s15
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	4b2b      	ldr	r3, [pc, #172]	; (8000c68 <AD9833_set+0x198>)
 8000bbc:	801a      	strh	r2, [r3, #0]
	PhReg &= twmask;
 8000bbe:	4b2a      	ldr	r3, [pc, #168]	; (8000c68 <AD9833_set+0x198>)
 8000bc0:	881a      	ldrh	r2, [r3, #0]
 8000bc2:	4b2a      	ldr	r3, [pc, #168]	; (8000c6c <AD9833_set+0x19c>)
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	4b27      	ldr	r3, [pc, #156]	; (8000c68 <AD9833_set+0x198>)
 8000bcc:	801a      	strh	r2, [r3, #0]

	PhReg &= ph1maskand;
 8000bce:	4b26      	ldr	r3, [pc, #152]	; (8000c68 <AD9833_set+0x198>)
 8000bd0:	881a      	ldrh	r2, [r3, #0]
 8000bd2:	4b27      	ldr	r3, [pc, #156]	; (8000c70 <AD9833_set+0x1a0>)
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	4b23      	ldr	r3, [pc, #140]	; (8000c68 <AD9833_set+0x198>)
 8000bdc:	801a      	strh	r2, [r3, #0]
	PhReg |= ph1markor;
 8000bde:	4b22      	ldr	r3, [pc, #136]	; (8000c68 <AD9833_set+0x198>)
 8000be0:	881a      	ldrh	r2, [r3, #0]
 8000be2:	4b24      	ldr	r3, [pc, #144]	; (8000c74 <AD9833_set+0x1a4>)
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	b29a      	uxth	r2, r3
 8000bea:	4b1f      	ldr	r3, [pc, #124]	; (8000c68 <AD9833_set+0x198>)
 8000bec:	801a      	strh	r2, [r3, #0]

	AD9833_tx(hspi, fqlsb, DDS_Num);
 8000bee:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <AD9833_set+0x188>)
 8000bf0:	881b      	ldrh	r3, [r3, #0]
 8000bf2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	68f8      	ldr	r0, [r7, #12]
 8000bfa:	f7ff ff05 	bl	8000a08 <AD9833_tx>
	AD9833_tx(hspi, fqmsb, DDS_Num);
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <AD9833_set+0x18c>)
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000c06:	4619      	mov	r1, r3
 8000c08:	68f8      	ldr	r0, [r7, #12]
 8000c0a:	f7ff fefd 	bl	8000a08 <AD9833_tx>
	AD9833_tx(hspi, PhReg, DDS_Num);
 8000c0e:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <AD9833_set+0x198>)
 8000c10:	881b      	ldrh	r3, [r3, #0]
 8000c12:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000c16:	4619      	mov	r1, r3
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f7ff fef5 	bl	8000a08 <AD9833_tx>
	if (reset)
 8000c1e:	797b      	ldrb	r3, [r7, #5]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d007      	beq.n	8000c34 <AD9833_set+0x164>
		AD9833_tx(hspi, 0x2000, DDS_Num);
 8000c24:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000c28:	461a      	mov	r2, r3
 8000c2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c2e:	68f8      	ldr	r0, [r7, #12]
 8000c30:	f7ff feea 	bl	8000a08 <AD9833_tx>
}
 8000c34:	bf00      	nop
 8000c36:	371c      	adds	r7, #28
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd90      	pop	{r4, r7, pc}
 8000c3c:	f3af 8000 	nop.w
 8000c40:	54442d18 	.word	0x54442d18
 8000c44:	400921fb 	.word	0x400921fb
 8000c48:	00000000 	.word	0x00000000
 8000c4c:	40b00000 	.word	0x40b00000
 8000c50:	20000080 	.word	0x20000080
 8000c54:	20000012 	.word	0x20000012
 8000c58:	20000088 	.word	0x20000088
 8000c5c:	2000008a 	.word	0x2000008a
 8000c60:	20000014 	.word	0x20000014
 8000c64:	20000016 	.word	0x20000016
 8000c68:	2000008c 	.word	0x2000008c
 8000c6c:	20000018 	.word	0x20000018
 8000c70:	2000001a 	.word	0x2000001a
 8000c74:	2000001c 	.word	0x2000001c
 8000c78:	017d7840 	.word	0x017d7840
 8000c7c:	00000000 	.word	0x00000000

08000c80 <HAL_UART_RxCpltCallback>:
uint8_t c[2] = {0xFF,0};
uint8_t d_to_dds[2] = {'1',0};
uint8_t needtoadj = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
		FreqFlag2 = 0;
		needtoadj = 1;
		HAL_UART_Receive_DMA(&huart3, myRxData, 2); // just kidding
		return;
	}*/
	if((myRxData[0] == 'a' )&& (myRxData[1] == 'a')){
 8000c88:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <HAL_UART_RxCpltCallback+0x74>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b61      	cmp	r3, #97	; 0x61
 8000c8e:	d10b      	bne.n	8000ca8 <HAL_UART_RxCpltCallback+0x28>
 8000c90:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <HAL_UART_RxCpltCallback+0x74>)
 8000c92:	785b      	ldrb	r3, [r3, #1]
 8000c94:	2b61      	cmp	r3, #97	; 0x61
 8000c96:	d107      	bne.n	8000ca8 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Transmit(&huart3, (uint8_t * )&a[0], sizeof(a[0]), 0xFFFF);
 8000c98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	4916      	ldr	r1, [pc, #88]	; (8000cf8 <HAL_UART_RxCpltCallback+0x78>)
 8000ca0:	4816      	ldr	r0, [pc, #88]	; (8000cfc <HAL_UART_RxCpltCallback+0x7c>)
 8000ca2:	f004 f865 	bl	8004d70 <HAL_UART_Transmit>
 8000ca6:	e01b      	b.n	8000ce0 <HAL_UART_RxCpltCallback+0x60>
    }else if((myRxData[0] == 'b' )&& (myRxData[1] == 'b')){
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <HAL_UART_RxCpltCallback+0x74>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b62      	cmp	r3, #98	; 0x62
 8000cae:	d10d      	bne.n	8000ccc <HAL_UART_RxCpltCallback+0x4c>
 8000cb0:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <HAL_UART_RxCpltCallback+0x74>)
 8000cb2:	785b      	ldrb	r3, [r3, #1]
 8000cb4:	2b62      	cmp	r3, #98	; 0x62
 8000cb6:	d109      	bne.n	8000ccc <HAL_UART_RxCpltCallback+0x4c>
    	adcRead1000();
 8000cb8:	f7ff fcd2 	bl	8000660 <adcRead1000>
    	HAL_UART_Transmit(&huart3, (uint8_t * )&b[0], sizeof(b[0]), 0xFFFF);
 8000cbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	490f      	ldr	r1, [pc, #60]	; (8000d00 <HAL_UART_RxCpltCallback+0x80>)
 8000cc4:	480d      	ldr	r0, [pc, #52]	; (8000cfc <HAL_UART_RxCpltCallback+0x7c>)
 8000cc6:	f004 f853 	bl	8004d70 <HAL_UART_Transmit>
 8000cca:	e009      	b.n	8000ce0 <HAL_UART_RxCpltCallback+0x60>
    }else if((myRxData[0] == 'c' )&& (myRxData[1] == 'c')){
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <HAL_UART_RxCpltCallback+0x74>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b63      	cmp	r3, #99	; 0x63
 8000cd2:	d105      	bne.n	8000ce0 <HAL_UART_RxCpltCallback+0x60>
 8000cd4:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <HAL_UART_RxCpltCallback+0x74>)
 8000cd6:	785b      	ldrb	r3, [r3, #1]
 8000cd8:	2b63      	cmp	r3, #99	; 0x63
 8000cda:	d101      	bne.n	8000ce0 <HAL_UART_RxCpltCallback+0x60>
    	transmit1000();
 8000cdc:	f7ff fd28 	bl	8000730 <transmit1000>
	}/*else if((myRxData[0] == 'l' )&& (myRxData[1] == 'l')){
		FreqFlag = 1;
	}else if(myRxData[0] == '1'){
		d_to_dds[1] = myRxData[1];
	}*/
	HAL_UART_Receive_DMA(&huart3, myRxData, 2);
 8000ce0:	2202      	movs	r2, #2
 8000ce2:	4904      	ldr	r1, [pc, #16]	; (8000cf4 <HAL_UART_RxCpltCallback+0x74>)
 8000ce4:	4805      	ldr	r0, [pc, #20]	; (8000cfc <HAL_UART_RxCpltCallback+0x7c>)
 8000ce6:	f004 f8d5 	bl	8004e94 <HAL_UART_Receive_DMA>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200001d4 	.word	0x200001d4
 8000cf8:	20000000 	.word	0x20000000
 8000cfc:	20000154 	.word	0x20000154
 8000d00:	20000004 	.word	0x20000004

08000d04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0a:	f000 fe08 	bl	800191e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d0e:	f000 f85b 	bl	8000dc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d12:	f000 fb23 	bl	800135c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d16:	f000 fb03 	bl	8001320 <MX_DMA_Init>
  MX_SPI1_Init();
 8000d1a:	f000 f8e5 	bl	8000ee8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000d1e:	f000 f961 	bl	8000fe4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000d22:	f000 f9db 	bl	80010dc <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000d26:	f000 facb 	bl	80012c0 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000d2a:	f000 fa7b 	bl	8001224 <MX_TIM2_Init>
  MX_SPI3_Init();
 8000d2e:	f000 f997 	bl	8001060 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  //AD9833_set(&hspi2, 5000, 0, 1, 1);
  HAL_Delay(1000);
 8000d32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d36:	f000 fe4f 	bl	80019d8 <HAL_Delay>
  //AD9833_set(&hspi2, 50, 0,1, 2);
  HAL_Delay(100);
 8000d3a:	2064      	movs	r0, #100	; 0x64
 8000d3c:	f000 fe4c 	bl	80019d8 <HAL_Delay>
  LL_SPI_Enable(SPI1);
 8000d40:	481b      	ldr	r0, [pc, #108]	; (8000db0 <main+0xac>)
 8000d42:	f7ff fbf9 	bl	8000538 <LL_SPI_Enable>
  HAL_UART_Receive_DMA(&huart3, myRxData, 2);
 8000d46:	2202      	movs	r2, #2
 8000d48:	491a      	ldr	r1, [pc, #104]	; (8000db4 <main+0xb0>)
 8000d4a:	481b      	ldr	r0, [pc, #108]	; (8000db8 <main+0xb4>)
 8000d4c:	f004 f8a2 	bl	8004e94 <HAL_UART_Receive_DMA>
  HAL_Delay(500);
 8000d50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d54:	f000 fe40 	bl	80019d8 <HAL_Delay>
  AD9833_set(&hspi2, 5000, 0, 1, 1);
 8000d58:	2301      	movs	r3, #1
 8000d5a:	9300      	str	r3, [sp, #0]
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f241 3188 	movw	r1, #5000	; 0x1388
 8000d64:	4815      	ldr	r0, [pc, #84]	; (8000dbc <main+0xb8>)
 8000d66:	f7ff feb3 	bl	8000ad0 <AD9833_set>
  AD9833_set2(&hspi3, 50, 0, 1, 1);
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	2301      	movs	r3, #1
 8000d70:	2200      	movs	r2, #0
 8000d72:	2132      	movs	r1, #50	; 0x32
 8000d74:	4812      	ldr	r0, [pc, #72]	; (8000dc0 <main+0xbc>)
 8000d76:	f7ff fd6f 	bl	8000858 <AD9833_set2>
  AD9833_set(&hspi2, 5000, 0, 1, 1);
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	2301      	movs	r3, #1
 8000d80:	2200      	movs	r2, #0
 8000d82:	f241 3188 	movw	r1, #5000	; 0x1388
 8000d86:	480d      	ldr	r0, [pc, #52]	; (8000dbc <main+0xb8>)
 8000d88:	f7ff fea2 	bl	8000ad0 <AD9833_set>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <main+0xc0>)
 8000d90:	f7ff fc18 	bl	80005c4 <LL_GPIO_SetOutputPin>
	  HAL_Delay(500);
 8000d94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d98:	f000 fe1e 	bl	80019d8 <HAL_Delay>
	  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	4809      	ldr	r0, [pc, #36]	; (8000dc4 <main+0xc0>)
 8000da0:	f7ff fc1e 	bl	80005e0 <LL_GPIO_ResetOutputPin>
	  HAL_Delay(500);
 8000da4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000da8:	f000 fe16 	bl	80019d8 <HAL_Delay>
	  LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8000dac:	e7ee      	b.n	8000d8c <main+0x88>
 8000dae:	bf00      	nop
 8000db0:	40013000 	.word	0x40013000
 8000db4:	200001d4 	.word	0x200001d4
 8000db8:	20000154 	.word	0x20000154
 8000dbc:	20000090 	.word	0x20000090
 8000dc0:	200001d8 	.word	0x200001d8
 8000dc4:	40020000 	.word	0x40020000

08000dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b0b8      	sub	sp, #224	; 0xe0
 8000dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dce:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000dd2:	2234      	movs	r2, #52	; 0x34
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f005 f94e 	bl	8006078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ddc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dec:	f107 0308 	add.w	r3, r7, #8
 8000df0:	2290      	movs	r2, #144	; 0x90
 8000df2:	2100      	movs	r1, #0
 8000df4:	4618      	mov	r0, r3
 8000df6:	f005 f93f 	bl	8006078 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfa:	4b39      	ldr	r3, [pc, #228]	; (8000ee0 <SystemClock_Config+0x118>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	4a38      	ldr	r2, [pc, #224]	; (8000ee0 <SystemClock_Config+0x118>)
 8000e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e04:	6413      	str	r3, [r2, #64]	; 0x40
 8000e06:	4b36      	ldr	r3, [pc, #216]	; (8000ee0 <SystemClock_Config+0x118>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e12:	4b34      	ldr	r3, [pc, #208]	; (8000ee4 <SystemClock_Config+0x11c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a33      	ldr	r2, [pc, #204]	; (8000ee4 <SystemClock_Config+0x11c>)
 8000e18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e1c:	6013      	str	r3, [r2, #0]
 8000e1e:	4b31      	ldr	r3, [pc, #196]	; (8000ee4 <SystemClock_Config+0x11c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e26:	603b      	str	r3, [r7, #0]
 8000e28:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e46:	2304      	movs	r3, #4
 8000e48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000e4c:	23d8      	movs	r3, #216	; 0xd8
 8000e4e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e52:	2302      	movs	r3, #2
 8000e54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8000e58:	230c      	movs	r3, #12
 8000e5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e5e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e62:	4618      	mov	r0, r3
 8000e64:	f001 fc7e 	bl	8002764 <HAL_RCC_OscConfig>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000e6e:	f000 fb57 	bl	8001520 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e72:	f001 fc27 	bl	80026c4 <HAL_PWREx_EnableOverDrive>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000e7c:	f000 fb50 	bl	8001520 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e80:	230f      	movs	r3, #15
 8000e82:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e86:	2302      	movs	r3, #2
 8000e88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e92:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000ea2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000ea6:	2107      	movs	r1, #7
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f001 ff09 	bl	8002cc0 <HAL_RCC_ClockConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000eb4:	f000 fb34 	bl	8001520 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000eb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ebc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f002 f8f2 	bl	80030b0 <HAL_RCCEx_PeriphCLKConfig>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 8000ed2:	f000 fb25 	bl	8001520 <Error_Handler>
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	37e0      	adds	r7, #224	; 0xe0
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40007000 	.word	0x40007000

08000ee8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b090      	sub	sp, #64	; 0x40
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000eee:	f107 0318 	add.w	r3, r7, #24
 8000ef2:	2228      	movs	r2, #40	; 0x28
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f005 f8be 	bl	8006078 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	463b      	mov	r3, r7
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
 8000f08:	611a      	str	r2, [r3, #16]
 8000f0a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8000f0c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000f10:	f7ff fb8e 	bl	8000630 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f7ff fb73 	bl	8000600 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000f1a:	2008      	movs	r0, #8
 8000f1c:	f7ff fb70 	bl	8000600 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration  
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PD7   ------> SPI1_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000f20:	2320      	movs	r3, #32
 8000f22:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f24:	2302      	movs	r3, #2
 8000f26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f30:	2300      	movs	r3, #0
 8000f32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000f34:	2305      	movs	r3, #5
 8000f36:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f38:	463b      	mov	r3, r7
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4826      	ldr	r0, [pc, #152]	; (8000fd8 <MX_SPI1_Init+0xf0>)
 8000f3e:	f004 ff8c 	bl	8005e5a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000f42:	2340      	movs	r3, #64	; 0x40
 8000f44:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f46:	2302      	movs	r3, #2
 8000f48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000f56:	2305      	movs	r3, #5
 8000f58:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	481e      	ldr	r0, [pc, #120]	; (8000fd8 <MX_SPI1_Init+0xf0>)
 8000f60:	f004 ff7b 	bl	8005e5a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000f64:	2380      	movs	r3, #128	; 0x80
 8000f66:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f74:	2300      	movs	r3, #0
 8000f76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000f78:	2305      	movs	r3, #5
 8000f7a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4816      	ldr	r0, [pc, #88]	; (8000fdc <MX_SPI1_Init+0xf4>)
 8000f82:	f004 ff6a 	bl	8005e5a <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000f8a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000f8e:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_12BIT;
 8000f90:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8000f94:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000f9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8000fb0:	2307      	movs	r3, #7
 8000fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8000fb4:	f107 0318 	add.w	r3, r7, #24
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4809      	ldr	r0, [pc, #36]	; (8000fe0 <MX_SPI1_Init+0xf8>)
 8000fbc:	f004 ffe4 	bl	8005f88 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <MX_SPI1_Init+0xf8>)
 8000fc4:	f7ff fac8 	bl	8000558 <LL_SPI_SetStandard>
  LL_SPI_EnableNSSPulseMgt(SPI1);
 8000fc8:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_SPI1_Init+0xf8>)
 8000fca:	f7ff fad8 	bl	800057e <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	3740      	adds	r7, #64	; 0x40
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40020000 	.word	0x40020000
 8000fdc:	40020c00 	.word	0x40020c00
 8000fe0:	40013000 	.word	0x40013000

08000fe4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <MX_SPI2_Init+0x74>)
 8000fea:	4a1c      	ldr	r2, [pc, #112]	; (800105c <MX_SPI2_Init+0x78>)
 8000fec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000fee:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <MX_SPI2_Init+0x74>)
 8000ff0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ff4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <MX_SPI2_Init+0x74>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <MX_SPI2_Init+0x74>)
 8000ffe:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001002:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001004:	4b14      	ldr	r3, [pc, #80]	; (8001058 <MX_SPI2_Init+0x74>)
 8001006:	2202      	movs	r2, #2
 8001008:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800100a:	4b13      	ldr	r3, [pc, #76]	; (8001058 <MX_SPI2_Init+0x74>)
 800100c:	2200      	movs	r2, #0
 800100e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <MX_SPI2_Init+0x74>)
 8001012:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001016:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <MX_SPI2_Init+0x74>)
 800101a:	2238      	movs	r2, #56	; 0x38
 800101c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <MX_SPI2_Init+0x74>)
 8001020:	2200      	movs	r2, #0
 8001022:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <MX_SPI2_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800102a:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <MX_SPI2_Init+0x74>)
 800102c:	2200      	movs	r2, #0
 800102e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <MX_SPI2_Init+0x74>)
 8001032:	2207      	movs	r2, #7
 8001034:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001036:	4b08      	ldr	r3, [pc, #32]	; (8001058 <MX_SPI2_Init+0x74>)
 8001038:	2200      	movs	r2, #0
 800103a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <MX_SPI2_Init+0x74>)
 800103e:	2208      	movs	r2, #8
 8001040:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_SPI2_Init+0x74>)
 8001044:	f002 fc5a 	bl	80038fc <HAL_SPI_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800104e:	f000 fa67 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000090 	.word	0x20000090
 800105c:	40003800 	.word	0x40003800

08001060 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <MX_SPI3_Init+0x74>)
 8001066:	4a1c      	ldr	r2, [pc, #112]	; (80010d8 <MX_SPI3_Init+0x78>)
 8001068:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800106a:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <MX_SPI3_Init+0x74>)
 800106c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001070:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <MX_SPI3_Init+0x74>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <MX_SPI3_Init+0x74>)
 800107a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800107e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001080:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <MX_SPI3_Init+0x74>)
 8001082:	2202      	movs	r2, #2
 8001084:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001086:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <MX_SPI3_Init+0x74>)
 8001088:	2200      	movs	r2, #0
 800108a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800108c:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_SPI3_Init+0x74>)
 800108e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001092:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <MX_SPI3_Init+0x74>)
 8001096:	2238      	movs	r2, #56	; 0x38
 8001098:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <MX_SPI3_Init+0x74>)
 800109c:	2200      	movs	r2, #0
 800109e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_SPI3_Init+0x74>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <MX_SPI3_Init+0x74>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80010ac:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_SPI3_Init+0x74>)
 80010ae:	2207      	movs	r2, #7
 80010b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010b2:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <MX_SPI3_Init+0x74>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <MX_SPI3_Init+0x74>)
 80010ba:	2208      	movs	r2, #8
 80010bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_SPI3_Init+0x74>)
 80010c0:	f002 fc1c 	bl	80038fc <HAL_SPI_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80010ca:	f000 fa29 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200001d8 	.word	0x200001d8
 80010d8:	40003c00 	.word	0x40003c00

080010dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b09a      	sub	sp, #104	; 0x68
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
 800110c:	615a      	str	r2, [r3, #20]
 800110e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	222c      	movs	r2, #44	; 0x2c
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f004 ffae 	bl	8006078 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800111c:	4b3f      	ldr	r3, [pc, #252]	; (800121c <MX_TIM1_Init+0x140>)
 800111e:	4a40      	ldr	r2, [pc, #256]	; (8001220 <MX_TIM1_Init+0x144>)
 8001120:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001122:	4b3e      	ldr	r3, [pc, #248]	; (800121c <MX_TIM1_Init+0x140>)
 8001124:	2200      	movs	r2, #0
 8001126:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001128:	4b3c      	ldr	r3, [pc, #240]	; (800121c <MX_TIM1_Init+0x140>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800112e:	4b3b      	ldr	r3, [pc, #236]	; (800121c <MX_TIM1_Init+0x140>)
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001134:	4b39      	ldr	r3, [pc, #228]	; (800121c <MX_TIM1_Init+0x140>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800113a:	4b38      	ldr	r3, [pc, #224]	; (800121c <MX_TIM1_Init+0x140>)
 800113c:	2200      	movs	r2, #0
 800113e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001140:	4b36      	ldr	r3, [pc, #216]	; (800121c <MX_TIM1_Init+0x140>)
 8001142:	2200      	movs	r2, #0
 8001144:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001146:	4835      	ldr	r0, [pc, #212]	; (800121c <MX_TIM1_Init+0x140>)
 8001148:	f002 feed 	bl	8003f26 <HAL_TIM_Base_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001152:	f000 f9e5 	bl	8001520 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001156:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800115a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800115c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001160:	4619      	mov	r1, r3
 8001162:	482e      	ldr	r0, [pc, #184]	; (800121c <MX_TIM1_Init+0x140>)
 8001164:	f003 f858 	bl	8004218 <HAL_TIM_ConfigClockSource>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800116e:	f000 f9d7 	bl	8001520 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001172:	482a      	ldr	r0, [pc, #168]	; (800121c <MX_TIM1_Init+0x140>)
 8001174:	f002 ff02 	bl	8003f7c <HAL_TIM_PWM_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800117e:	f000 f9cf 	bl	8001520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001182:	2300      	movs	r3, #0
 8001184:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001186:	2300      	movs	r3, #0
 8001188:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118a:	2300      	movs	r3, #0
 800118c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800118e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001192:	4619      	mov	r1, r3
 8001194:	4821      	ldr	r0, [pc, #132]	; (800121c <MX_TIM1_Init+0x140>)
 8001196:	f003 fc91 	bl	8004abc <HAL_TIMEx_MasterConfigSynchronization>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80011a0:	f000 f9be 	bl	8001520 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011a4:	2360      	movs	r3, #96	; 0x60
 80011a6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80011ac:	2302      	movs	r3, #2
 80011ae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80011b0:	2304      	movs	r3, #4
 80011b2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011b4:	2300      	movs	r3, #0
 80011b6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 80011b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011bc:	2210      	movs	r2, #16
 80011be:	4619      	mov	r1, r3
 80011c0:	4816      	ldr	r0, [pc, #88]	; (800121c <MX_TIM1_Init+0x140>)
 80011c2:	f002 ff11 	bl	8003fe8 <HAL_TIM_PWM_ConfigChannel>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80011cc:	f000 f9a8 	bl	8001520 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80011ee:	2300      	movs	r3, #0
 80011f0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80011f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001200:	1d3b      	adds	r3, r7, #4
 8001202:	4619      	mov	r1, r3
 8001204:	4805      	ldr	r0, [pc, #20]	; (800121c <MX_TIM1_Init+0x140>)
 8001206:	f003 fce7 	bl	8004bd8 <HAL_TIMEx_ConfigBreakDeadTime>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001210:	f000 f986 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001214:	bf00      	nop
 8001216:	3768      	adds	r7, #104	; 0x68
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	2007ca70 	.word	0x2007ca70
 8001220:	40010000 	.word	0x40010000

08001224 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b088      	sub	sp, #32
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122a:	f107 0310 	add.w	r3, r7, #16
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001242:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <MX_TIM2_Init+0x98>)
 8001244:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001248:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800124a:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <MX_TIM2_Init+0x98>)
 800124c:	2200      	movs	r2, #0
 800124e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001250:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <MX_TIM2_Init+0x98>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF-1;
 8001256:	4b19      	ldr	r3, [pc, #100]	; (80012bc <MX_TIM2_Init+0x98>)
 8001258:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800125c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125e:	4b17      	ldr	r3, [pc, #92]	; (80012bc <MX_TIM2_Init+0x98>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001264:	4b15      	ldr	r3, [pc, #84]	; (80012bc <MX_TIM2_Init+0x98>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800126a:	4814      	ldr	r0, [pc, #80]	; (80012bc <MX_TIM2_Init+0x98>)
 800126c:	f002 fe5b 	bl	8003f26 <HAL_TIM_Base_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001276:	f000 f953 	bl	8001520 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800127a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	4619      	mov	r1, r3
 8001286:	480d      	ldr	r0, [pc, #52]	; (80012bc <MX_TIM2_Init+0x98>)
 8001288:	f002 ffc6 	bl	8004218 <HAL_TIM_ConfigClockSource>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001292:	f000 f945 	bl	8001520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	4619      	mov	r1, r3
 80012a2:	4806      	ldr	r0, [pc, #24]	; (80012bc <MX_TIM2_Init+0x98>)
 80012a4:	f003 fc0a 	bl	8004abc <HAL_TIMEx_MasterConfigSynchronization>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012ae:	f000 f937 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	3720      	adds	r7, #32
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	2007cab0 	.word	0x2007cab0

080012c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <MX_USART3_UART_Init+0x58>)
 80012c6:	4a15      	ldr	r2, [pc, #84]	; (800131c <MX_USART3_UART_Init+0x5c>)
 80012c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <MX_USART3_UART_Init+0x58>)
 80012cc:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80012d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_USART3_UART_Init+0x58>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <MX_USART3_UART_Init+0x58>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <MX_USART3_UART_Init+0x58>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <MX_USART3_UART_Init+0x58>)
 80012e6:	220c      	movs	r2, #12
 80012e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <MX_USART3_UART_Init+0x58>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <MX_USART3_UART_Init+0x58>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <MX_USART3_UART_Init+0x58>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MX_USART3_UART_Init+0x58>)
 80012fe:	2200      	movs	r2, #0
 8001300:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_USART3_UART_Init+0x58>)
 8001304:	f003 fce6 	bl	8004cd4 <HAL_UART_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800130e:	f000 f907 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000154 	.word	0x20000154
 800131c:	40004800 	.word	0x40004800

08001320 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_DMA_Init+0x38>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a0b      	ldr	r2, [pc, #44]	; (8001358 <MX_DMA_Init+0x38>)
 800132c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_DMA_Init+0x38>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800133e:	2200      	movs	r2, #0
 8001340:	2100      	movs	r1, #0
 8001342:	200c      	movs	r0, #12
 8001344:	f000 fc45 	bl	8001bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001348:	200c      	movs	r0, #12
 800134a:	f000 fc5e 	bl	8001c0a <HAL_NVIC_EnableIRQ>

}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800

0800135c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001362:	463b      	mov	r3, r7
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
 8001370:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001372:	2080      	movs	r0, #128	; 0x80
 8001374:	f7ff f944 	bl	8000600 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001378:	2004      	movs	r0, #4
 800137a:	f7ff f941 	bl	8000600 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800137e:	2001      	movs	r0, #1
 8001380:	f7ff f93e 	bl	8000600 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001384:	2002      	movs	r0, #2
 8001386:	f7ff f93b 	bl	8000600 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800138a:	2008      	movs	r0, #8
 800138c:	f7ff f938 	bl	8000600 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8001390:	2101      	movs	r1, #1
 8001392:	4860      	ldr	r0, [pc, #384]	; (8001514 <MX_GPIO_Init+0x1b8>)
 8001394:	f7ff f924 	bl	80005e0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 8001398:	2180      	movs	r1, #128	; 0x80
 800139a:	485e      	ldr	r0, [pc, #376]	; (8001514 <MX_GPIO_Init+0x1b8>)
 800139c:	f7ff f920 	bl	80005e0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 80013a0:	2102      	movs	r1, #2
 80013a2:	485d      	ldr	r0, [pc, #372]	; (8001518 <MX_GPIO_Init+0x1bc>)
 80013a4:	f7ff f91c 	bl	80005e0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12);
 80013a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ac:	485a      	ldr	r0, [pc, #360]	; (8001518 <MX_GPIO_Init+0x1bc>)
 80013ae:	f7ff f917 	bl	80005e0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_15);
 80013b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013b6:	4858      	ldr	r0, [pc, #352]	; (8001518 <MX_GPIO_Init+0x1bc>)
 80013b8:	f7ff f912 	bl	80005e0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_10);
 80013bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013c0:	4856      	ldr	r0, [pc, #344]	; (800151c <MX_GPIO_Init+0x1c0>)
 80013c2:	f7ff f90d 	bl	80005e0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_7);
 80013c6:	2180      	movs	r1, #128	; 0x80
 80013c8:	4853      	ldr	r0, [pc, #332]	; (8001518 <MX_GPIO_Init+0x1bc>)
 80013ca:	f7ff f909 	bl	80005e0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_0);
 80013ce:	2101      	movs	r1, #1
 80013d0:	4851      	ldr	r0, [pc, #324]	; (8001518 <MX_GPIO_Init+0x1bc>)
 80013d2:	f7ff f8f7 	bl	80005c4 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_11);
 80013d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013da:	4850      	ldr	r0, [pc, #320]	; (800151c <MX_GPIO_Init+0x1c0>)
 80013dc:	f7ff f8f2 	bl	80005c4 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80013e0:	2301      	movs	r3, #1
 80013e2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80013e4:	2301      	movs	r3, #1
 80013e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80013e8:	2303      	movs	r3, #3
 80013ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013f0:	2300      	movs	r3, #0
 80013f2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f4:	463b      	mov	r3, r7
 80013f6:	4619      	mov	r1, r3
 80013f8:	4846      	ldr	r0, [pc, #280]	; (8001514 <MX_GPIO_Init+0x1b8>)
 80013fa:	f004 fd2e 	bl	8005e5a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80013fe:	2310      	movs	r3, #16
 8001400:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	463b      	mov	r3, r7
 800140c:	4619      	mov	r1, r3
 800140e:	4841      	ldr	r0, [pc, #260]	; (8001514 <MX_GPIO_Init+0x1b8>)
 8001410:	f004 fd23 	bl	8005e5a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001418:	2301      	movs	r3, #1
 800141a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	2303      	movs	r3, #3
 800141e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001424:	2300      	movs	r3, #0
 8001426:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001428:	463b      	mov	r3, r7
 800142a:	4619      	mov	r1, r3
 800142c:	4839      	ldr	r0, [pc, #228]	; (8001514 <MX_GPIO_Init+0x1b8>)
 800142e:	f004 fd14 	bl	8005e5a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8001432:	2301      	movs	r3, #1
 8001434:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001436:	2301      	movs	r3, #1
 8001438:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800143a:	2303      	movs	r3, #3
 800143c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001446:	463b      	mov	r3, r7
 8001448:	4619      	mov	r1, r3
 800144a:	4833      	ldr	r0, [pc, #204]	; (8001518 <MX_GPIO_Init+0x1bc>)
 800144c:	f004 fd05 	bl	8005e5a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001450:	2302      	movs	r3, #2
 8001452:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001454:	2301      	movs	r3, #1
 8001456:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001458:	2303      	movs	r3, #3
 800145a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001460:	2300      	movs	r3, #0
 8001462:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001464:	463b      	mov	r3, r7
 8001466:	4619      	mov	r1, r3
 8001468:	482b      	ldr	r0, [pc, #172]	; (8001518 <MX_GPIO_Init+0x1bc>)
 800146a:	f004 fcf6 	bl	8005e5a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 800146e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001472:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001474:	2301      	movs	r3, #1
 8001476:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001478:	2303      	movs	r3, #3
 800147a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001480:	2300      	movs	r3, #0
 8001482:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001484:	463b      	mov	r3, r7
 8001486:	4619      	mov	r1, r3
 8001488:	4823      	ldr	r0, [pc, #140]	; (8001518 <MX_GPIO_Init+0x1bc>)
 800148a:	f004 fce6 	bl	8005e5a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800148e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001492:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001494:	2301      	movs	r3, #1
 8001496:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001498:	2303      	movs	r3, #3
 800149a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014a0:	2300      	movs	r3, #0
 80014a2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a4:	463b      	mov	r3, r7
 80014a6:	4619      	mov	r1, r3
 80014a8:	481b      	ldr	r0, [pc, #108]	; (8001518 <MX_GPIO_Init+0x1bc>)
 80014aa:	f004 fcd6 	bl	8005e5a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80014ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014b2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014b4:	2301      	movs	r3, #1
 80014b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014c0:	2300      	movs	r3, #0
 80014c2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c4:	463b      	mov	r3, r7
 80014c6:	4619      	mov	r1, r3
 80014c8:	4814      	ldr	r0, [pc, #80]	; (800151c <MX_GPIO_Init+0x1c0>)
 80014ca:	f004 fcc6 	bl	8005e5a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 80014ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014d2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014d4:	2301      	movs	r3, #1
 80014d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80014d8:	2303      	movs	r3, #3
 80014da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014e0:	2300      	movs	r3, #0
 80014e2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e4:	463b      	mov	r3, r7
 80014e6:	4619      	mov	r1, r3
 80014e8:	480c      	ldr	r0, [pc, #48]	; (800151c <MX_GPIO_Init+0x1c0>)
 80014ea:	f004 fcb6 	bl	8005e5a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014f2:	2301      	movs	r3, #1
 80014f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001502:	463b      	mov	r3, r7
 8001504:	4619      	mov	r1, r3
 8001506:	4804      	ldr	r0, [pc, #16]	; (8001518 <MX_GPIO_Init+0x1bc>)
 8001508:	f004 fca7 	bl	8005e5a <LL_GPIO_Init>

}
 800150c:	bf00      	nop
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40020000 	.word	0x40020000
 8001518:	40020400 	.word	0x40020400
 800151c:	40020800 	.word	0x40020800

08001520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
	...

08001530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001536:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <HAL_MspInit+0x44>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	4a0e      	ldr	r2, [pc, #56]	; (8001574 <HAL_MspInit+0x44>)
 800153c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001540:	6413      	str	r3, [r2, #64]	; 0x40
 8001542:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <HAL_MspInit+0x44>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <HAL_MspInit+0x44>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	4a08      	ldr	r2, [pc, #32]	; (8001574 <HAL_MspInit+0x44>)
 8001554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001558:	6453      	str	r3, [r2, #68]	; 0x44
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <HAL_MspInit+0x44>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	40023800 	.word	0x40023800

08001578 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08c      	sub	sp, #48	; 0x30
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 031c 	add.w	r3, r7, #28
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a44      	ldr	r2, [pc, #272]	; (80016a8 <HAL_SPI_MspInit+0x130>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d145      	bne.n	8001626 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800159a:	4b44      	ldr	r3, [pc, #272]	; (80016ac <HAL_SPI_MspInit+0x134>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	4a43      	ldr	r2, [pc, #268]	; (80016ac <HAL_SPI_MspInit+0x134>)
 80015a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a4:	6413      	str	r3, [r2, #64]	; 0x40
 80015a6:	4b41      	ldr	r3, [pc, #260]	; (80016ac <HAL_SPI_MspInit+0x134>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ae:	61bb      	str	r3, [r7, #24]
 80015b0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b2:	4b3e      	ldr	r3, [pc, #248]	; (80016ac <HAL_SPI_MspInit+0x134>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a3d      	ldr	r2, [pc, #244]	; (80016ac <HAL_SPI_MspInit+0x134>)
 80015b8:	f043 0304 	orr.w	r3, r3, #4
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b3b      	ldr	r3, [pc, #236]	; (80016ac <HAL_SPI_MspInit+0x134>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0304 	and.w	r3, r3, #4
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ca:	4b38      	ldr	r3, [pc, #224]	; (80016ac <HAL_SPI_MspInit+0x134>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a37      	ldr	r2, [pc, #220]	; (80016ac <HAL_SPI_MspInit+0x134>)
 80015d0:	f043 0302 	orr.w	r3, r3, #2
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b35      	ldr	r3, [pc, #212]	; (80016ac <HAL_SPI_MspInit+0x134>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80015e2:	2306      	movs	r3, #6
 80015e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ee:	2303      	movs	r3, #3
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015f2:	2305      	movs	r3, #5
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	4619      	mov	r1, r3
 80015fc:	482c      	ldr	r0, [pc, #176]	; (80016b0 <HAL_SPI_MspInit+0x138>)
 80015fe:	f000 feb7 	bl	8002370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001608:	2302      	movs	r3, #2
 800160a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001610:	2303      	movs	r3, #3
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001614:	2305      	movs	r3, #5
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001618:	f107 031c 	add.w	r3, r7, #28
 800161c:	4619      	mov	r1, r3
 800161e:	4825      	ldr	r0, [pc, #148]	; (80016b4 <HAL_SPI_MspInit+0x13c>)
 8001620:	f000 fea6 	bl	8002370 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001624:	e03c      	b.n	80016a0 <HAL_SPI_MspInit+0x128>
  else if(hspi->Instance==SPI3)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a23      	ldr	r2, [pc, #140]	; (80016b8 <HAL_SPI_MspInit+0x140>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d137      	bne.n	80016a0 <HAL_SPI_MspInit+0x128>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001630:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <HAL_SPI_MspInit+0x134>)
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	4a1d      	ldr	r2, [pc, #116]	; (80016ac <HAL_SPI_MspInit+0x134>)
 8001636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800163a:	6413      	str	r3, [r2, #64]	; 0x40
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <HAL_SPI_MspInit+0x134>)
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001648:	4b18      	ldr	r3, [pc, #96]	; (80016ac <HAL_SPI_MspInit+0x134>)
 800164a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164c:	4a17      	ldr	r2, [pc, #92]	; (80016ac <HAL_SPI_MspInit+0x134>)
 800164e:	f043 0302 	orr.w	r3, r3, #2
 8001652:	6313      	str	r3, [r2, #48]	; 0x30
 8001654:	4b15      	ldr	r3, [pc, #84]	; (80016ac <HAL_SPI_MspInit+0x134>)
 8001656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001660:	2304      	movs	r3, #4
 8001662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001664:	2302      	movs	r3, #2
 8001666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166c:	2303      	movs	r3, #3
 800166e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001670:	2307      	movs	r3, #7
 8001672:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001674:	f107 031c 	add.w	r3, r7, #28
 8001678:	4619      	mov	r1, r3
 800167a:	480e      	ldr	r0, [pc, #56]	; (80016b4 <HAL_SPI_MspInit+0x13c>)
 800167c:	f000 fe78 	bl	8002370 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001680:	2318      	movs	r3, #24
 8001682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168c:	2303      	movs	r3, #3
 800168e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001690:	2306      	movs	r3, #6
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001694:	f107 031c 	add.w	r3, r7, #28
 8001698:	4619      	mov	r1, r3
 800169a:	4806      	ldr	r0, [pc, #24]	; (80016b4 <HAL_SPI_MspInit+0x13c>)
 800169c:	f000 fe68 	bl	8002370 <HAL_GPIO_Init>
}
 80016a0:	bf00      	nop
 80016a2:	3730      	adds	r7, #48	; 0x30
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40003800 	.word	0x40003800
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40020800 	.word	0x40020800
 80016b4:	40020400 	.word	0x40020400
 80016b8:	40003c00 	.word	0x40003c00

080016bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a13      	ldr	r2, [pc, #76]	; (8001718 <HAL_TIM_Base_MspInit+0x5c>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d10c      	bne.n	80016e8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016ce:	4b13      	ldr	r3, [pc, #76]	; (800171c <HAL_TIM_Base_MspInit+0x60>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	4a12      	ldr	r2, [pc, #72]	; (800171c <HAL_TIM_Base_MspInit+0x60>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6453      	str	r3, [r2, #68]	; 0x44
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <HAL_TIM_Base_MspInit+0x60>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016e6:	e010      	b.n	800170a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f0:	d10b      	bne.n	800170a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016f2:	4b0a      	ldr	r3, [pc, #40]	; (800171c <HAL_TIM_Base_MspInit+0x60>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	4a09      	ldr	r2, [pc, #36]	; (800171c <HAL_TIM_Base_MspInit+0x60>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6413      	str	r3, [r2, #64]	; 0x40
 80016fe:	4b07      	ldr	r3, [pc, #28]	; (800171c <HAL_TIM_Base_MspInit+0x60>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
}
 800170a:	bf00      	nop
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	40010000 	.word	0x40010000
 800171c:	40023800 	.word	0x40023800

08001720 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08a      	sub	sp, #40	; 0x28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a32      	ldr	r2, [pc, #200]	; (8001808 <HAL_UART_MspInit+0xe8>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d15e      	bne.n	8001800 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001742:	4b32      	ldr	r3, [pc, #200]	; (800180c <HAL_UART_MspInit+0xec>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	4a31      	ldr	r2, [pc, #196]	; (800180c <HAL_UART_MspInit+0xec>)
 8001748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800174c:	6413      	str	r3, [r2, #64]	; 0x40
 800174e:	4b2f      	ldr	r3, [pc, #188]	; (800180c <HAL_UART_MspInit+0xec>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800175a:	4b2c      	ldr	r3, [pc, #176]	; (800180c <HAL_UART_MspInit+0xec>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a2b      	ldr	r2, [pc, #172]	; (800180c <HAL_UART_MspInit+0xec>)
 8001760:	f043 0308 	orr.w	r3, r3, #8
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b29      	ldr	r3, [pc, #164]	; (800180c <HAL_UART_MspInit+0xec>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001772:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001780:	2303      	movs	r3, #3
 8001782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001784:	2307      	movs	r3, #7
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	4820      	ldr	r0, [pc, #128]	; (8001810 <HAL_UART_MspInit+0xf0>)
 8001790:	f000 fdee 	bl	8002370 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001794:	4b1f      	ldr	r3, [pc, #124]	; (8001814 <HAL_UART_MspInit+0xf4>)
 8001796:	4a20      	ldr	r2, [pc, #128]	; (8001818 <HAL_UART_MspInit+0xf8>)
 8001798:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800179a:	4b1e      	ldr	r3, [pc, #120]	; (8001814 <HAL_UART_MspInit+0xf4>)
 800179c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017a0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017a2:	4b1c      	ldr	r3, [pc, #112]	; (8001814 <HAL_UART_MspInit+0xf4>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017a8:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <HAL_UART_MspInit+0xf4>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017ae:	4b19      	ldr	r3, [pc, #100]	; (8001814 <HAL_UART_MspInit+0xf4>)
 80017b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017b4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017b6:	4b17      	ldr	r3, [pc, #92]	; (8001814 <HAL_UART_MspInit+0xf4>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017bc:	4b15      	ldr	r3, [pc, #84]	; (8001814 <HAL_UART_MspInit+0xf4>)
 80017be:	2200      	movs	r2, #0
 80017c0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80017c2:	4b14      	ldr	r3, [pc, #80]	; (8001814 <HAL_UART_MspInit+0xf4>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_UART_MspInit+0xf4>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017ce:	4b11      	ldr	r3, [pc, #68]	; (8001814 <HAL_UART_MspInit+0xf4>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80017d4:	480f      	ldr	r0, [pc, #60]	; (8001814 <HAL_UART_MspInit+0xf4>)
 80017d6:	f000 fa33 	bl	8001c40 <HAL_DMA_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80017e0:	f7ff fe9e 	bl	8001520 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a0b      	ldr	r2, [pc, #44]	; (8001814 <HAL_UART_MspInit+0xf4>)
 80017e8:	66da      	str	r2, [r3, #108]	; 0x6c
 80017ea:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <HAL_UART_MspInit+0xf4>)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2100      	movs	r1, #0
 80017f4:	2027      	movs	r0, #39	; 0x27
 80017f6:	f000 f9ec 	bl	8001bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017fa:	2027      	movs	r0, #39	; 0x27
 80017fc:	f000 fa05 	bl	8001c0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001800:	bf00      	nop
 8001802:	3728      	adds	r7, #40	; 0x28
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40004800 	.word	0x40004800
 800180c:	40023800 	.word	0x40023800
 8001810:	40020c00 	.word	0x40020c00
 8001814:	200000f4 	.word	0x200000f4
 8001818:	40026028 	.word	0x40026028

0800181c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800182e:	e7fe      	b.n	800182e <HardFault_Handler+0x4>

08001830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001834:	e7fe      	b.n	8001834 <MemManage_Handler+0x4>

08001836 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800183a:	e7fe      	b.n	800183a <BusFault_Handler+0x4>

0800183c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001840:	e7fe      	b.n	8001840 <UsageFault_Handler+0x4>

08001842 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001870:	f000 f892 	bl	8001998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}

08001878 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800187c:	4802      	ldr	r0, [pc, #8]	; (8001888 <DMA1_Stream1_IRQHandler+0x10>)
 800187e:	f000 fb0f 	bl	8001ea0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200000f4 	.word	0x200000f4

0800188c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001890:	4802      	ldr	r0, [pc, #8]	; (800189c <USART3_IRQHandler+0x10>)
 8001892:	f003 fb83 	bl	8004f9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000154 	.word	0x20000154

080018a0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <SystemInit+0x28>)
 80018a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018aa:	4a07      	ldr	r2, [pc, #28]	; (80018c8 <SystemInit+0x28>)
 80018ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <SystemInit+0x28>)
 80018b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018ba:	609a      	str	r2, [r3, #8]
#endif
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001904 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018d2:	e003      	b.n	80018dc <LoopCopyDataInit>

080018d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018da:	3104      	adds	r1, #4

080018dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018dc:	480b      	ldr	r0, [pc, #44]	; (800190c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018de:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018e4:	d3f6      	bcc.n	80018d4 <CopyDataInit>
  ldr  r2, =_sbss
 80018e6:	4a0b      	ldr	r2, [pc, #44]	; (8001914 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018e8:	e002      	b.n	80018f0 <LoopFillZerobss>

080018ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018ec:	f842 3b04 	str.w	r3, [r2], #4

080018f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018f0:	4b09      	ldr	r3, [pc, #36]	; (8001918 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018f4:	d3f9      	bcc.n	80018ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018f6:	f7ff ffd3 	bl	80018a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018fa:	f004 fb99 	bl	8006030 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018fe:	f7ff fa01 	bl	8000d04 <main>
  bx  lr    
 8001902:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001904:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001908:	080060d0 	.word	0x080060d0
  ldr  r0, =_sdata
 800190c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001910:	2000002c 	.word	0x2000002c
  ldr  r2, =_sbss
 8001914:	20000030 	.word	0x20000030
  ldr  r3, = _ebss
 8001918:	2007caf4 	.word	0x2007caf4

0800191c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800191c:	e7fe      	b.n	800191c <ADC_IRQHandler>

0800191e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001922:	2003      	movs	r0, #3
 8001924:	f000 f94a 	bl	8001bbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001928:	2000      	movs	r0, #0
 800192a:	f000 f805 	bl	8001938 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800192e:	f7ff fdff 	bl	8001530 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001940:	4b12      	ldr	r3, [pc, #72]	; (800198c <HAL_InitTick+0x54>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_InitTick+0x58>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	4619      	mov	r1, r3
 800194a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001952:	fbb2 f3f3 	udiv	r3, r2, r3
 8001956:	4618      	mov	r0, r3
 8001958:	f000 f965 	bl	8001c26 <HAL_SYSTICK_Config>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e00e      	b.n	8001984 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b0f      	cmp	r3, #15
 800196a:	d80a      	bhi.n	8001982 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800196c:	2200      	movs	r2, #0
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	f04f 30ff 	mov.w	r0, #4294967295
 8001974:	f000 f92d 	bl	8001bd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001978:	4a06      	ldr	r2, [pc, #24]	; (8001994 <HAL_InitTick+0x5c>)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	e000      	b.n	8001984 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
}
 8001984:	4618      	mov	r0, r3
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000020 	.word	0x20000020
 8001990:	20000028 	.word	0x20000028
 8001994:	20000024 	.word	0x20000024

08001998 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_IncTick+0x20>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_IncTick+0x24>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4413      	add	r3, r2
 80019a8:	4a04      	ldr	r2, [pc, #16]	; (80019bc <HAL_IncTick+0x24>)
 80019aa:	6013      	str	r3, [r2, #0]
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	20000028 	.word	0x20000028
 80019bc:	2007caf0 	.word	0x2007caf0

080019c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return uwTick;
 80019c4:	4b03      	ldr	r3, [pc, #12]	; (80019d4 <HAL_GetTick+0x14>)
 80019c6:	681b      	ldr	r3, [r3, #0]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	2007caf0 	.word	0x2007caf0

080019d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e0:	f7ff ffee 	bl	80019c0 <HAL_GetTick>
 80019e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f0:	d005      	beq.n	80019fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <HAL_Delay+0x40>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4413      	add	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019fe:	bf00      	nop
 8001a00:	f7ff ffde 	bl	80019c0 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d8f7      	bhi.n	8001a00 <HAL_Delay+0x28>
  {
  }
}
 8001a10:	bf00      	nop
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000028 	.word	0x20000028

08001a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <__NVIC_SetPriorityGrouping+0x40>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <__NVIC_SetPriorityGrouping+0x44>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a4a:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <__NVIC_SetPriorityGrouping+0x40>)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	60d3      	str	r3, [r2, #12]
}
 8001a50:	bf00      	nop
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000ed00 	.word	0xe000ed00
 8001a60:	05fa0000 	.word	0x05fa0000

08001a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a68:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <__NVIC_GetPriorityGrouping+0x18>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	0a1b      	lsrs	r3, r3, #8
 8001a6e:	f003 0307 	and.w	r3, r3, #7
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	db0b      	blt.n	8001aaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	f003 021f 	and.w	r2, r3, #31
 8001a98:	4907      	ldr	r1, [pc, #28]	; (8001ab8 <__NVIC_EnableIRQ+0x38>)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	095b      	lsrs	r3, r3, #5
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8001aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	e000e100 	.word	0xe000e100

08001abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	6039      	str	r1, [r7, #0]
 8001ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	db0a      	blt.n	8001ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	490c      	ldr	r1, [pc, #48]	; (8001b08 <__NVIC_SetPriority+0x4c>)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	0112      	lsls	r2, r2, #4
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	440b      	add	r3, r1
 8001ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae4:	e00a      	b.n	8001afc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4908      	ldr	r1, [pc, #32]	; (8001b0c <__NVIC_SetPriority+0x50>)
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	3b04      	subs	r3, #4
 8001af4:	0112      	lsls	r2, r2, #4
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	440b      	add	r3, r1
 8001afa:	761a      	strb	r2, [r3, #24]
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	e000e100 	.word	0xe000e100
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b089      	sub	sp, #36	; 0x24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f1c3 0307 	rsb	r3, r3, #7
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	bf28      	it	cs
 8001b2e:	2304      	movcs	r3, #4
 8001b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	3304      	adds	r3, #4
 8001b36:	2b06      	cmp	r3, #6
 8001b38:	d902      	bls.n	8001b40 <NVIC_EncodePriority+0x30>
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	3b03      	subs	r3, #3
 8001b3e:	e000      	b.n	8001b42 <NVIC_EncodePriority+0x32>
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b44:	f04f 32ff 	mov.w	r2, #4294967295
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43da      	mvns	r2, r3
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	401a      	ands	r2, r3
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b58:	f04f 31ff 	mov.w	r1, #4294967295
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b62:	43d9      	mvns	r1, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b68:	4313      	orrs	r3, r2
         );
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3724      	adds	r7, #36	; 0x24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b88:	d301      	bcc.n	8001b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e00f      	b.n	8001bae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <SysTick_Config+0x40>)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b96:	210f      	movs	r1, #15
 8001b98:	f04f 30ff 	mov.w	r0, #4294967295
 8001b9c:	f7ff ff8e 	bl	8001abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <SysTick_Config+0x40>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ba6:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <SysTick_Config+0x40>)
 8001ba8:	2207      	movs	r2, #7
 8001baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	e000e010 	.word	0xe000e010

08001bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff ff29 	bl	8001a1c <__NVIC_SetPriorityGrouping>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b086      	sub	sp, #24
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	4603      	mov	r3, r0
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
 8001bde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001be4:	f7ff ff3e 	bl	8001a64 <__NVIC_GetPriorityGrouping>
 8001be8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	68b9      	ldr	r1, [r7, #8]
 8001bee:	6978      	ldr	r0, [r7, #20]
 8001bf0:	f7ff ff8e 	bl	8001b10 <NVIC_EncodePriority>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff5d 	bl	8001abc <__NVIC_SetPriority>
}
 8001c02:	bf00      	nop
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	4603      	mov	r3, r0
 8001c12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ff31 	bl	8001a80 <__NVIC_EnableIRQ>
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff ffa2 	bl	8001b78 <SysTick_Config>
 8001c34:	4603      	mov	r3, r0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c4c:	f7ff feb8 	bl	80019c0 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e099      	b.n	8001d90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2202      	movs	r2, #2
 8001c68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0201 	bic.w	r2, r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c7c:	e00f      	b.n	8001c9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c7e:	f7ff fe9f 	bl	80019c0 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b05      	cmp	r3, #5
 8001c8a:	d908      	bls.n	8001c9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2220      	movs	r2, #32
 8001c90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2203      	movs	r2, #3
 8001c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e078      	b.n	8001d90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1e8      	bne.n	8001c7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	4b38      	ldr	r3, [pc, #224]	; (8001d98 <HAL_DMA_Init+0x158>)
 8001cb8:	4013      	ands	r3, r2
 8001cba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ce2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	d107      	bne.n	8001d08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d00:	4313      	orrs	r3, r2
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f023 0307 	bic.w	r3, r3, #7
 8001d1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d117      	bne.n	8001d62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00e      	beq.n	8001d62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 fa99 	bl	800227c <DMA_CheckFifoParam>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d008      	beq.n	8001d62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2240      	movs	r2, #64	; 0x40
 8001d54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e016      	b.n	8001d90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 fa50 	bl	8002210 <DMA_CalcBaseAndBitshift>
 8001d70:	4603      	mov	r3, r0
 8001d72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d78:	223f      	movs	r2, #63	; 0x3f
 8001d7a:	409a      	lsls	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	e010803f 	.word	0xe010803f

08001d9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
 8001da8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001daa:	2300      	movs	r3, #0
 8001dac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d101      	bne.n	8001dc2 <HAL_DMA_Start_IT+0x26>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e048      	b.n	8001e54 <HAL_DMA_Start_IT+0xb8>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d137      	bne.n	8001e46 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2202      	movs	r2, #2
 8001dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	68b9      	ldr	r1, [r7, #8]
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 f9e2 	bl	80021b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df4:	223f      	movs	r2, #63	; 0x3f
 8001df6:	409a      	lsls	r2, r3
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0216 	orr.w	r2, r2, #22
 8001e0a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	695a      	ldr	r2, [r3, #20]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e1a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d007      	beq.n	8001e34 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0208 	orr.w	r2, r2, #8
 8001e32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0201 	orr.w	r2, r2, #1
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	e005      	b.n	8001e52 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d004      	beq.n	8001e7a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2280      	movs	r2, #128	; 0x80
 8001e74:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e00c      	b.n	8001e94 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2205      	movs	r2, #5
 8001e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0201 	bic.w	r2, r2, #1
 8001e90:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001eac:	4b92      	ldr	r3, [pc, #584]	; (80020f8 <HAL_DMA_IRQHandler+0x258>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a92      	ldr	r2, [pc, #584]	; (80020fc <HAL_DMA_IRQHandler+0x25c>)
 8001eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb6:	0a9b      	lsrs	r3, r3, #10
 8001eb8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eca:	2208      	movs	r2, #8
 8001ecc:	409a      	lsls	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d01a      	beq.n	8001f0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d013      	beq.n	8001f0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 0204 	bic.w	r2, r2, #4
 8001ef2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef8:	2208      	movs	r2, #8
 8001efa:	409a      	lsls	r2, r3
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f04:	f043 0201 	orr.w	r2, r3, #1
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f10:	2201      	movs	r2, #1
 8001f12:	409a      	lsls	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d012      	beq.n	8001f42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00b      	beq.n	8001f42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2e:	2201      	movs	r2, #1
 8001f30:	409a      	lsls	r2, r3
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3a:	f043 0202 	orr.w	r2, r3, #2
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f46:	2204      	movs	r2, #4
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d012      	beq.n	8001f78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00b      	beq.n	8001f78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f64:	2204      	movs	r2, #4
 8001f66:	409a      	lsls	r2, r3
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f70:	f043 0204 	orr.w	r2, r3, #4
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7c:	2210      	movs	r2, #16
 8001f7e:	409a      	lsls	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4013      	ands	r3, r2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d043      	beq.n	8002010 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d03c      	beq.n	8002010 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9a:	2210      	movs	r2, #16
 8001f9c:	409a      	lsls	r2, r3
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d018      	beq.n	8001fe2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d108      	bne.n	8001fd0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d024      	beq.n	8002010 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	4798      	blx	r3
 8001fce:	e01f      	b.n	8002010 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d01b      	beq.n	8002010 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	4798      	blx	r3
 8001fe0:	e016      	b.n	8002010 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d107      	bne.n	8002000 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0208 	bic.w	r2, r2, #8
 8001ffe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002014:	2220      	movs	r2, #32
 8002016:	409a      	lsls	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4013      	ands	r3, r2
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 808e 	beq.w	800213e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0310 	and.w	r3, r3, #16
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 8086 	beq.w	800213e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002036:	2220      	movs	r2, #32
 8002038:	409a      	lsls	r2, r3
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b05      	cmp	r3, #5
 8002048:	d136      	bne.n	80020b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0216 	bic.w	r2, r2, #22
 8002058:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	695a      	ldr	r2, [r3, #20]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002068:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	2b00      	cmp	r3, #0
 8002070:	d103      	bne.n	800207a <HAL_DMA_IRQHandler+0x1da>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002076:	2b00      	cmp	r3, #0
 8002078:	d007      	beq.n	800208a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0208 	bic.w	r2, r2, #8
 8002088:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208e:	223f      	movs	r2, #63	; 0x3f
 8002090:	409a      	lsls	r2, r3
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d07d      	beq.n	80021aa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	4798      	blx	r3
        }
        return;
 80020b6:	e078      	b.n	80021aa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d01c      	beq.n	8002100 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d108      	bne.n	80020e6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d030      	beq.n	800213e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	4798      	blx	r3
 80020e4:	e02b      	b.n	800213e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d027      	beq.n	800213e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	4798      	blx	r3
 80020f6:	e022      	b.n	800213e <HAL_DMA_IRQHandler+0x29e>
 80020f8:	20000020 	.word	0x20000020
 80020fc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10f      	bne.n	800212e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 0210 	bic.w	r2, r2, #16
 800211c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002142:	2b00      	cmp	r3, #0
 8002144:	d032      	beq.n	80021ac <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d022      	beq.n	8002198 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2205      	movs	r2, #5
 8002156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0201 	bic.w	r2, r2, #1
 8002168:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	3301      	adds	r3, #1
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	429a      	cmp	r2, r3
 8002174:	d307      	bcc.n	8002186 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1f2      	bne.n	800216a <HAL_DMA_IRQHandler+0x2ca>
 8002184:	e000      	b.n	8002188 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002186:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219c:	2b00      	cmp	r3, #0
 800219e:	d005      	beq.n	80021ac <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	4798      	blx	r3
 80021a8:	e000      	b.n	80021ac <HAL_DMA_IRQHandler+0x30c>
        return;
 80021aa:	bf00      	nop
    }
  }
}
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop

080021b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	2b40      	cmp	r3, #64	; 0x40
 80021e0:	d108      	bne.n	80021f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80021f2:	e007      	b.n	8002204 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68ba      	ldr	r2, [r7, #8]
 80021fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	60da      	str	r2, [r3, #12]
}
 8002204:	bf00      	nop
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	b2db      	uxtb	r3, r3
 800221e:	3b10      	subs	r3, #16
 8002220:	4a13      	ldr	r2, [pc, #76]	; (8002270 <DMA_CalcBaseAndBitshift+0x60>)
 8002222:	fba2 2303 	umull	r2, r3, r2, r3
 8002226:	091b      	lsrs	r3, r3, #4
 8002228:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800222a:	4a12      	ldr	r2, [pc, #72]	; (8002274 <DMA_CalcBaseAndBitshift+0x64>)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4413      	add	r3, r2
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2b03      	cmp	r3, #3
 800223c:	d908      	bls.n	8002250 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	461a      	mov	r2, r3
 8002244:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <DMA_CalcBaseAndBitshift+0x68>)
 8002246:	4013      	ands	r3, r2
 8002248:	1d1a      	adds	r2, r3, #4
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	659a      	str	r2, [r3, #88]	; 0x58
 800224e:	e006      	b.n	800225e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	461a      	mov	r2, r3
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <DMA_CalcBaseAndBitshift+0x68>)
 8002258:	4013      	ands	r3, r2
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002262:	4618      	mov	r0, r3
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	aaaaaaab 	.word	0xaaaaaaab
 8002274:	080060b8 	.word	0x080060b8
 8002278:	fffffc00 	.word	0xfffffc00

0800227c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d11f      	bne.n	80022d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2b03      	cmp	r3, #3
 800229a:	d855      	bhi.n	8002348 <DMA_CheckFifoParam+0xcc>
 800229c:	a201      	add	r2, pc, #4	; (adr r2, 80022a4 <DMA_CheckFifoParam+0x28>)
 800229e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a2:	bf00      	nop
 80022a4:	080022b5 	.word	0x080022b5
 80022a8:	080022c7 	.word	0x080022c7
 80022ac:	080022b5 	.word	0x080022b5
 80022b0:	08002349 	.word	0x08002349
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d045      	beq.n	800234c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022c4:	e042      	b.n	800234c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022ce:	d13f      	bne.n	8002350 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022d4:	e03c      	b.n	8002350 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022de:	d121      	bne.n	8002324 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d836      	bhi.n	8002354 <DMA_CheckFifoParam+0xd8>
 80022e6:	a201      	add	r2, pc, #4	; (adr r2, 80022ec <DMA_CheckFifoParam+0x70>)
 80022e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ec:	080022fd 	.word	0x080022fd
 80022f0:	08002303 	.word	0x08002303
 80022f4:	080022fd 	.word	0x080022fd
 80022f8:	08002315 	.word	0x08002315
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002300:	e02f      	b.n	8002362 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002306:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d024      	beq.n	8002358 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002312:	e021      	b.n	8002358 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002318:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800231c:	d11e      	bne.n	800235c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002322:	e01b      	b.n	800235c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2b02      	cmp	r3, #2
 8002328:	d902      	bls.n	8002330 <DMA_CheckFifoParam+0xb4>
 800232a:	2b03      	cmp	r3, #3
 800232c:	d003      	beq.n	8002336 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800232e:	e018      	b.n	8002362 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	73fb      	strb	r3, [r7, #15]
      break;
 8002334:	e015      	b.n	8002362 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00e      	beq.n	8002360 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	73fb      	strb	r3, [r7, #15]
      break;
 8002346:	e00b      	b.n	8002360 <DMA_CheckFifoParam+0xe4>
      break;
 8002348:	bf00      	nop
 800234a:	e00a      	b.n	8002362 <DMA_CheckFifoParam+0xe6>
      break;
 800234c:	bf00      	nop
 800234e:	e008      	b.n	8002362 <DMA_CheckFifoParam+0xe6>
      break;
 8002350:	bf00      	nop
 8002352:	e006      	b.n	8002362 <DMA_CheckFifoParam+0xe6>
      break;
 8002354:	bf00      	nop
 8002356:	e004      	b.n	8002362 <DMA_CheckFifoParam+0xe6>
      break;
 8002358:	bf00      	nop
 800235a:	e002      	b.n	8002362 <DMA_CheckFifoParam+0xe6>
      break;   
 800235c:	bf00      	nop
 800235e:	e000      	b.n	8002362 <DMA_CheckFifoParam+0xe6>
      break;
 8002360:	bf00      	nop
    }
  } 
  
  return status; 
 8002362:	7bfb      	ldrb	r3, [r7, #15]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002370:	b480      	push	{r7}
 8002372:	b089      	sub	sp, #36	; 0x24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800237a:	2300      	movs	r3, #0
 800237c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002382:	2300      	movs	r3, #0
 8002384:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002386:	2300      	movs	r3, #0
 8002388:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
 800238e:	e175      	b.n	800267c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002390:	2201      	movs	r2, #1
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	4013      	ands	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	f040 8164 	bne.w	8002676 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d00b      	beq.n	80023ce <HAL_GPIO_Init+0x5e>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d007      	beq.n	80023ce <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023c2:	2b11      	cmp	r3, #17
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b12      	cmp	r3, #18
 80023cc:	d130      	bne.n	8002430 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	2203      	movs	r2, #3
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002404:	2201      	movs	r2, #1
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	091b      	lsrs	r3, r3, #4
 800241a:	f003 0201 	and.w	r2, r3, #1
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	2203      	movs	r2, #3
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4013      	ands	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b02      	cmp	r3, #2
 8002466:	d003      	beq.n	8002470 <HAL_GPIO_Init+0x100>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b12      	cmp	r3, #18
 800246e:	d123      	bne.n	80024b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	08da      	lsrs	r2, r3, #3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3208      	adds	r2, #8
 8002478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800247c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	220f      	movs	r2, #15
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	691a      	ldr	r2, [r3, #16]
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	08da      	lsrs	r2, r3, #3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3208      	adds	r2, #8
 80024b2:	69b9      	ldr	r1, [r7, #24]
 80024b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	2203      	movs	r2, #3
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0203 	and.w	r2, r3, #3
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 80be 	beq.w	8002676 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024fa:	4b65      	ldr	r3, [pc, #404]	; (8002690 <HAL_GPIO_Init+0x320>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fe:	4a64      	ldr	r2, [pc, #400]	; (8002690 <HAL_GPIO_Init+0x320>)
 8002500:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002504:	6453      	str	r3, [r2, #68]	; 0x44
 8002506:	4b62      	ldr	r3, [pc, #392]	; (8002690 <HAL_GPIO_Init+0x320>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002512:	4a60      	ldr	r2, [pc, #384]	; (8002694 <HAL_GPIO_Init+0x324>)
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	089b      	lsrs	r3, r3, #2
 8002518:	3302      	adds	r3, #2
 800251a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	220f      	movs	r2, #15
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43db      	mvns	r3, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4013      	ands	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a57      	ldr	r2, [pc, #348]	; (8002698 <HAL_GPIO_Init+0x328>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d037      	beq.n	80025ae <HAL_GPIO_Init+0x23e>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a56      	ldr	r2, [pc, #344]	; (800269c <HAL_GPIO_Init+0x32c>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d031      	beq.n	80025aa <HAL_GPIO_Init+0x23a>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a55      	ldr	r2, [pc, #340]	; (80026a0 <HAL_GPIO_Init+0x330>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d02b      	beq.n	80025a6 <HAL_GPIO_Init+0x236>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a54      	ldr	r2, [pc, #336]	; (80026a4 <HAL_GPIO_Init+0x334>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d025      	beq.n	80025a2 <HAL_GPIO_Init+0x232>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a53      	ldr	r2, [pc, #332]	; (80026a8 <HAL_GPIO_Init+0x338>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d01f      	beq.n	800259e <HAL_GPIO_Init+0x22e>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a52      	ldr	r2, [pc, #328]	; (80026ac <HAL_GPIO_Init+0x33c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d019      	beq.n	800259a <HAL_GPIO_Init+0x22a>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a51      	ldr	r2, [pc, #324]	; (80026b0 <HAL_GPIO_Init+0x340>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d013      	beq.n	8002596 <HAL_GPIO_Init+0x226>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a50      	ldr	r2, [pc, #320]	; (80026b4 <HAL_GPIO_Init+0x344>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d00d      	beq.n	8002592 <HAL_GPIO_Init+0x222>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a4f      	ldr	r2, [pc, #316]	; (80026b8 <HAL_GPIO_Init+0x348>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d007      	beq.n	800258e <HAL_GPIO_Init+0x21e>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a4e      	ldr	r2, [pc, #312]	; (80026bc <HAL_GPIO_Init+0x34c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d101      	bne.n	800258a <HAL_GPIO_Init+0x21a>
 8002586:	2309      	movs	r3, #9
 8002588:	e012      	b.n	80025b0 <HAL_GPIO_Init+0x240>
 800258a:	230a      	movs	r3, #10
 800258c:	e010      	b.n	80025b0 <HAL_GPIO_Init+0x240>
 800258e:	2308      	movs	r3, #8
 8002590:	e00e      	b.n	80025b0 <HAL_GPIO_Init+0x240>
 8002592:	2307      	movs	r3, #7
 8002594:	e00c      	b.n	80025b0 <HAL_GPIO_Init+0x240>
 8002596:	2306      	movs	r3, #6
 8002598:	e00a      	b.n	80025b0 <HAL_GPIO_Init+0x240>
 800259a:	2305      	movs	r3, #5
 800259c:	e008      	b.n	80025b0 <HAL_GPIO_Init+0x240>
 800259e:	2304      	movs	r3, #4
 80025a0:	e006      	b.n	80025b0 <HAL_GPIO_Init+0x240>
 80025a2:	2303      	movs	r3, #3
 80025a4:	e004      	b.n	80025b0 <HAL_GPIO_Init+0x240>
 80025a6:	2302      	movs	r3, #2
 80025a8:	e002      	b.n	80025b0 <HAL_GPIO_Init+0x240>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <HAL_GPIO_Init+0x240>
 80025ae:	2300      	movs	r3, #0
 80025b0:	69fa      	ldr	r2, [r7, #28]
 80025b2:	f002 0203 	and.w	r2, r2, #3
 80025b6:	0092      	lsls	r2, r2, #2
 80025b8:	4093      	lsls	r3, r2
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80025c0:	4934      	ldr	r1, [pc, #208]	; (8002694 <HAL_GPIO_Init+0x324>)
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	089b      	lsrs	r3, r3, #2
 80025c6:	3302      	adds	r3, #2
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025ce:	4b3c      	ldr	r3, [pc, #240]	; (80026c0 <HAL_GPIO_Init+0x350>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	43db      	mvns	r3, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4013      	ands	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025f2:	4a33      	ldr	r2, [pc, #204]	; (80026c0 <HAL_GPIO_Init+0x350>)
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025f8:	4b31      	ldr	r3, [pc, #196]	; (80026c0 <HAL_GPIO_Init+0x350>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d003      	beq.n	800261c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800261c:	4a28      	ldr	r2, [pc, #160]	; (80026c0 <HAL_GPIO_Init+0x350>)
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002622:	4b27      	ldr	r3, [pc, #156]	; (80026c0 <HAL_GPIO_Init+0x350>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	43db      	mvns	r3, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4013      	ands	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002646:	4a1e      	ldr	r2, [pc, #120]	; (80026c0 <HAL_GPIO_Init+0x350>)
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800264c:	4b1c      	ldr	r3, [pc, #112]	; (80026c0 <HAL_GPIO_Init+0x350>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002670:	4a13      	ldr	r2, [pc, #76]	; (80026c0 <HAL_GPIO_Init+0x350>)
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	3301      	adds	r3, #1
 800267a:	61fb      	str	r3, [r7, #28]
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	2b0f      	cmp	r3, #15
 8002680:	f67f ae86 	bls.w	8002390 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002684:	bf00      	nop
 8002686:	3724      	adds	r7, #36	; 0x24
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	40023800 	.word	0x40023800
 8002694:	40013800 	.word	0x40013800
 8002698:	40020000 	.word	0x40020000
 800269c:	40020400 	.word	0x40020400
 80026a0:	40020800 	.word	0x40020800
 80026a4:	40020c00 	.word	0x40020c00
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40021400 	.word	0x40021400
 80026b0:	40021800 	.word	0x40021800
 80026b4:	40021c00 	.word	0x40021c00
 80026b8:	40022000 	.word	0x40022000
 80026bc:	40022400 	.word	0x40022400
 80026c0:	40013c00 	.word	0x40013c00

080026c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80026ce:	4b23      	ldr	r3, [pc, #140]	; (800275c <HAL_PWREx_EnableOverDrive+0x98>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	4a22      	ldr	r2, [pc, #136]	; (800275c <HAL_PWREx_EnableOverDrive+0x98>)
 80026d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d8:	6413      	str	r3, [r2, #64]	; 0x40
 80026da:	4b20      	ldr	r3, [pc, #128]	; (800275c <HAL_PWREx_EnableOverDrive+0x98>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80026e6:	4b1e      	ldr	r3, [pc, #120]	; (8002760 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a1d      	ldr	r2, [pc, #116]	; (8002760 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026f2:	f7ff f965 	bl	80019c0 <HAL_GetTick>
 80026f6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80026f8:	e009      	b.n	800270e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026fa:	f7ff f961 	bl	80019c0 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002708:	d901      	bls.n	800270e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e022      	b.n	8002754 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800270e:	4b14      	ldr	r3, [pc, #80]	; (8002760 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800271a:	d1ee      	bne.n	80026fa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800271c:	4b10      	ldr	r3, [pc, #64]	; (8002760 <HAL_PWREx_EnableOverDrive+0x9c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a0f      	ldr	r2, [pc, #60]	; (8002760 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002726:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002728:	f7ff f94a 	bl	80019c0 <HAL_GetTick>
 800272c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800272e:	e009      	b.n	8002744 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002730:	f7ff f946 	bl	80019c0 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800273e:	d901      	bls.n	8002744 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e007      	b.n	8002754 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002744:	4b06      	ldr	r3, [pc, #24]	; (8002760 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002750:	d1ee      	bne.n	8002730 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40023800 	.word	0x40023800
 8002760:	40007000 	.word	0x40007000

08002764 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800276c:	2300      	movs	r3, #0
 800276e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e29b      	b.n	8002cb2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 8087 	beq.w	8002896 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002788:	4b96      	ldr	r3, [pc, #600]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 030c 	and.w	r3, r3, #12
 8002790:	2b04      	cmp	r3, #4
 8002792:	d00c      	beq.n	80027ae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002794:	4b93      	ldr	r3, [pc, #588]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 030c 	and.w	r3, r3, #12
 800279c:	2b08      	cmp	r3, #8
 800279e:	d112      	bne.n	80027c6 <HAL_RCC_OscConfig+0x62>
 80027a0:	4b90      	ldr	r3, [pc, #576]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ac:	d10b      	bne.n	80027c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ae:	4b8d      	ldr	r3, [pc, #564]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d06c      	beq.n	8002894 <HAL_RCC_OscConfig+0x130>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d168      	bne.n	8002894 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e275      	b.n	8002cb2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ce:	d106      	bne.n	80027de <HAL_RCC_OscConfig+0x7a>
 80027d0:	4b84      	ldr	r3, [pc, #528]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a83      	ldr	r2, [pc, #524]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 80027d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027da:	6013      	str	r3, [r2, #0]
 80027dc:	e02e      	b.n	800283c <HAL_RCC_OscConfig+0xd8>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10c      	bne.n	8002800 <HAL_RCC_OscConfig+0x9c>
 80027e6:	4b7f      	ldr	r3, [pc, #508]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a7e      	ldr	r2, [pc, #504]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 80027ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	4b7c      	ldr	r3, [pc, #496]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a7b      	ldr	r2, [pc, #492]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 80027f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	e01d      	b.n	800283c <HAL_RCC_OscConfig+0xd8>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002808:	d10c      	bne.n	8002824 <HAL_RCC_OscConfig+0xc0>
 800280a:	4b76      	ldr	r3, [pc, #472]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a75      	ldr	r2, [pc, #468]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 8002810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	4b73      	ldr	r3, [pc, #460]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a72      	ldr	r2, [pc, #456]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 800281c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	e00b      	b.n	800283c <HAL_RCC_OscConfig+0xd8>
 8002824:	4b6f      	ldr	r3, [pc, #444]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a6e      	ldr	r2, [pc, #440]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 800282a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b6c      	ldr	r3, [pc, #432]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a6b      	ldr	r2, [pc, #428]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 8002836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800283a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d013      	beq.n	800286c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002844:	f7ff f8bc 	bl	80019c0 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800284c:	f7ff f8b8 	bl	80019c0 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b64      	cmp	r3, #100	; 0x64
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e229      	b.n	8002cb2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285e:	4b61      	ldr	r3, [pc, #388]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0xe8>
 800286a:	e014      	b.n	8002896 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286c:	f7ff f8a8 	bl	80019c0 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002874:	f7ff f8a4 	bl	80019c0 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b64      	cmp	r3, #100	; 0x64
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e215      	b.n	8002cb2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002886:	4b57      	ldr	r3, [pc, #348]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x110>
 8002892:	e000      	b.n	8002896 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d069      	beq.n	8002976 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028a2:	4b50      	ldr	r3, [pc, #320]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 030c 	and.w	r3, r3, #12
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00b      	beq.n	80028c6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ae:	4b4d      	ldr	r3, [pc, #308]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 030c 	and.w	r3, r3, #12
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d11c      	bne.n	80028f4 <HAL_RCC_OscConfig+0x190>
 80028ba:	4b4a      	ldr	r3, [pc, #296]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d116      	bne.n	80028f4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028c6:	4b47      	ldr	r3, [pc, #284]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d005      	beq.n	80028de <HAL_RCC_OscConfig+0x17a>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d001      	beq.n	80028de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e1e9      	b.n	8002cb2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028de:	4b41      	ldr	r3, [pc, #260]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	493d      	ldr	r1, [pc, #244]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f2:	e040      	b.n	8002976 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d023      	beq.n	8002944 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028fc:	4b39      	ldr	r3, [pc, #228]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a38      	ldr	r2, [pc, #224]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 8002902:	f043 0301 	orr.w	r3, r3, #1
 8002906:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002908:	f7ff f85a 	bl	80019c0 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002910:	f7ff f856 	bl	80019c0 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e1c7      	b.n	8002cb2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002922:	4b30      	ldr	r3, [pc, #192]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0f0      	beq.n	8002910 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292e:	4b2d      	ldr	r3, [pc, #180]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	4929      	ldr	r1, [pc, #164]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 800293e:	4313      	orrs	r3, r2
 8002940:	600b      	str	r3, [r1, #0]
 8002942:	e018      	b.n	8002976 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002944:	4b27      	ldr	r3, [pc, #156]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a26      	ldr	r2, [pc, #152]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 800294a:	f023 0301 	bic.w	r3, r3, #1
 800294e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002950:	f7ff f836 	bl	80019c0 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002958:	f7ff f832 	bl	80019c0 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e1a3      	b.n	8002cb2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800296a:	4b1e      	ldr	r3, [pc, #120]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1f0      	bne.n	8002958 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	2b00      	cmp	r3, #0
 8002980:	d038      	beq.n	80029f4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d019      	beq.n	80029be <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800298a:	4b16      	ldr	r3, [pc, #88]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 800298c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800298e:	4a15      	ldr	r2, [pc, #84]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002996:	f7ff f813 	bl	80019c0 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800299e:	f7ff f80f 	bl	80019c0 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e180      	b.n	8002cb2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b0:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 80029b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0f0      	beq.n	800299e <HAL_RCC_OscConfig+0x23a>
 80029bc:	e01a      	b.n	80029f4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029be:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 80029c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029c2:	4a08      	ldr	r2, [pc, #32]	; (80029e4 <HAL_RCC_OscConfig+0x280>)
 80029c4:	f023 0301 	bic.w	r3, r3, #1
 80029c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ca:	f7fe fff9 	bl	80019c0 <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d0:	e00a      	b.n	80029e8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d2:	f7fe fff5 	bl	80019c0 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d903      	bls.n	80029e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e166      	b.n	8002cb2 <HAL_RCC_OscConfig+0x54e>
 80029e4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e8:	4b92      	ldr	r3, [pc, #584]	; (8002c34 <HAL_RCC_OscConfig+0x4d0>)
 80029ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1ee      	bne.n	80029d2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 80a4 	beq.w	8002b4a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a02:	4b8c      	ldr	r3, [pc, #560]	; (8002c34 <HAL_RCC_OscConfig+0x4d0>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10d      	bne.n	8002a2a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a0e:	4b89      	ldr	r3, [pc, #548]	; (8002c34 <HAL_RCC_OscConfig+0x4d0>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	4a88      	ldr	r2, [pc, #544]	; (8002c34 <HAL_RCC_OscConfig+0x4d0>)
 8002a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a18:	6413      	str	r3, [r2, #64]	; 0x40
 8002a1a:	4b86      	ldr	r3, [pc, #536]	; (8002c34 <HAL_RCC_OscConfig+0x4d0>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a22:	60bb      	str	r3, [r7, #8]
 8002a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a26:	2301      	movs	r3, #1
 8002a28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a2a:	4b83      	ldr	r3, [pc, #524]	; (8002c38 <HAL_RCC_OscConfig+0x4d4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d118      	bne.n	8002a68 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002a36:	4b80      	ldr	r3, [pc, #512]	; (8002c38 <HAL_RCC_OscConfig+0x4d4>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a7f      	ldr	r2, [pc, #508]	; (8002c38 <HAL_RCC_OscConfig+0x4d4>)
 8002a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a42:	f7fe ffbd 	bl	80019c0 <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a4a:	f7fe ffb9 	bl	80019c0 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b64      	cmp	r3, #100	; 0x64
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e12a      	b.n	8002cb2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a5c:	4b76      	ldr	r3, [pc, #472]	; (8002c38 <HAL_RCC_OscConfig+0x4d4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0f0      	beq.n	8002a4a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d106      	bne.n	8002a7e <HAL_RCC_OscConfig+0x31a>
 8002a70:	4b70      	ldr	r3, [pc, #448]	; (8002c34 <HAL_RCC_OscConfig+0x4d0>)
 8002a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a74:	4a6f      	ldr	r2, [pc, #444]	; (8002c34 <HAL_RCC_OscConfig+0x4d0>)
 8002a76:	f043 0301 	orr.w	r3, r3, #1
 8002a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7c:	e02d      	b.n	8002ada <HAL_RCC_OscConfig+0x376>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10c      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x33c>
 8002a86:	4b6b      	ldr	r3, [pc, #428]	; (8002c34 <HAL_RCC_OscConfig+0x4d0>)
 8002a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8a:	4a6a      	ldr	r2, [pc, #424]	; (8002c34 <HAL_RCC_OscConfig+0x4d0>)
 8002a8c:	f023 0301 	bic.w	r3, r3, #1
 8002a90:	6713      	str	r3, [r2, #112]	; 0x70
 8002a92:	4b68      	ldr	r3, [pc, #416]	; (8002c34 <HAL_RCC_OscConfig+0x4d0>)
 8002a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a96:	4a67      	ldr	r2, [pc, #412]	; (8002c34 <HAL_RCC_OscConfig+0x4d0>)
 8002a98:	f023 0304 	bic.w	r3, r3, #4
 8002a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a9e:	e01c      	b.n	8002ada <HAL_RCC_OscConfig+0x376>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	2b05      	cmp	r3, #5
 8002aa6:	d10c      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x35e>
 8002aa8:	4b62      	ldr	r3, [pc, #392]	; (8002c34 <HAL_RCC_OscConfig+0x4d0>)
 8002aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aac:	4a61      	ldr	r2, [pc, #388]	; (8002c34 <HAL_RCC_OscConfig+0x4d0>)
 8002aae:	f043 0304 	orr.w	r3, r3, #4
 8002ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab4:	4b5f      	ldr	r3, [pc, #380]	; (8002c34 <HAL_RCC_OscConfig+0x4d0>)
 8002ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab8:	4a5e      	ldr	r2, [pc, #376]	; (8002c34 <HAL_RCC_OscConfig+0x4d0>)
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac0:	e00b      	b.n	8002ada <HAL_RCC_OscConfig+0x376>
 8002ac2:	4b5c      	ldr	r3, [pc, #368]	; (8002c34 <HAL_RCC_OscConfig+0x4d0>)
 8002ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac6:	4a5b      	ldr	r2, [pc, #364]	; (8002c34 <HAL_RCC_OscConfig+0x4d0>)
 8002ac8:	f023 0301 	bic.w	r3, r3, #1
 8002acc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ace:	4b59      	ldr	r3, [pc, #356]	; (8002c34 <HAL_RCC_OscConfig+0x4d0>)
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad2:	4a58      	ldr	r2, [pc, #352]	; (8002c34 <HAL_RCC_OscConfig+0x4d0>)
 8002ad4:	f023 0304 	bic.w	r3, r3, #4
 8002ad8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d015      	beq.n	8002b0e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae2:	f7fe ff6d 	bl	80019c0 <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae8:	e00a      	b.n	8002b00 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aea:	f7fe ff69 	bl	80019c0 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e0d8      	b.n	8002cb2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b00:	4b4c      	ldr	r3, [pc, #304]	; (8002c34 <HAL_RCC_OscConfig+0x4d0>)
 8002b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0ee      	beq.n	8002aea <HAL_RCC_OscConfig+0x386>
 8002b0c:	e014      	b.n	8002b38 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0e:	f7fe ff57 	bl	80019c0 <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b14:	e00a      	b.n	8002b2c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b16:	f7fe ff53 	bl	80019c0 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e0c2      	b.n	8002cb2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b2c:	4b41      	ldr	r3, [pc, #260]	; (8002c34 <HAL_RCC_OscConfig+0x4d0>)
 8002b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1ee      	bne.n	8002b16 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b38:	7dfb      	ldrb	r3, [r7, #23]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d105      	bne.n	8002b4a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b3e:	4b3d      	ldr	r3, [pc, #244]	; (8002c34 <HAL_RCC_OscConfig+0x4d0>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	4a3c      	ldr	r2, [pc, #240]	; (8002c34 <HAL_RCC_OscConfig+0x4d0>)
 8002b44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 80ae 	beq.w	8002cb0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b54:	4b37      	ldr	r3, [pc, #220]	; (8002c34 <HAL_RCC_OscConfig+0x4d0>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 030c 	and.w	r3, r3, #12
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d06d      	beq.n	8002c3c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d14b      	bne.n	8002c00 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b68:	4b32      	ldr	r3, [pc, #200]	; (8002c34 <HAL_RCC_OscConfig+0x4d0>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a31      	ldr	r2, [pc, #196]	; (8002c34 <HAL_RCC_OscConfig+0x4d0>)
 8002b6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b74:	f7fe ff24 	bl	80019c0 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b7c:	f7fe ff20 	bl	80019c0 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e091      	b.n	8002cb2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8e:	4b29      	ldr	r3, [pc, #164]	; (8002c34 <HAL_RCC_OscConfig+0x4d0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69da      	ldr	r2, [r3, #28]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	019b      	lsls	r3, r3, #6
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb0:	085b      	lsrs	r3, r3, #1
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	041b      	lsls	r3, r3, #16
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbc:	061b      	lsls	r3, r3, #24
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc4:	071b      	lsls	r3, r3, #28
 8002bc6:	491b      	ldr	r1, [pc, #108]	; (8002c34 <HAL_RCC_OscConfig+0x4d0>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bcc:	4b19      	ldr	r3, [pc, #100]	; (8002c34 <HAL_RCC_OscConfig+0x4d0>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a18      	ldr	r2, [pc, #96]	; (8002c34 <HAL_RCC_OscConfig+0x4d0>)
 8002bd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd8:	f7fe fef2 	bl	80019c0 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be0:	f7fe feee 	bl	80019c0 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e05f      	b.n	8002cb2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf2:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <HAL_RCC_OscConfig+0x4d0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0f0      	beq.n	8002be0 <HAL_RCC_OscConfig+0x47c>
 8002bfe:	e057      	b.n	8002cb0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c00:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <HAL_RCC_OscConfig+0x4d0>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a0b      	ldr	r2, [pc, #44]	; (8002c34 <HAL_RCC_OscConfig+0x4d0>)
 8002c06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0c:	f7fe fed8 	bl	80019c0 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c14:	f7fe fed4 	bl	80019c0 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e045      	b.n	8002cb2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c26:	4b03      	ldr	r3, [pc, #12]	; (8002c34 <HAL_RCC_OscConfig+0x4d0>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f0      	bne.n	8002c14 <HAL_RCC_OscConfig+0x4b0>
 8002c32:	e03d      	b.n	8002cb0 <HAL_RCC_OscConfig+0x54c>
 8002c34:	40023800 	.word	0x40023800
 8002c38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002c3c:	4b1f      	ldr	r3, [pc, #124]	; (8002cbc <HAL_RCC_OscConfig+0x558>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d030      	beq.n	8002cac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d129      	bne.n	8002cac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d122      	bne.n	8002cac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c72:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d119      	bne.n	8002cac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c82:	085b      	lsrs	r3, r3, #1
 8002c84:	3b01      	subs	r3, #1
 8002c86:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d10f      	bne.n	8002cac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d107      	bne.n	8002cac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d001      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e000      	b.n	8002cb2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40023800 	.word	0x40023800

08002cc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e0d0      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cd8:	4b6a      	ldr	r3, [pc, #424]	; (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 030f 	and.w	r3, r3, #15
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d910      	bls.n	8002d08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce6:	4b67      	ldr	r3, [pc, #412]	; (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f023 020f 	bic.w	r2, r3, #15
 8002cee:	4965      	ldr	r1, [pc, #404]	; (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf6:	4b63      	ldr	r3, [pc, #396]	; (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d001      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e0b8      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d020      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d005      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d20:	4b59      	ldr	r3, [pc, #356]	; (8002e88 <HAL_RCC_ClockConfig+0x1c8>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	4a58      	ldr	r2, [pc, #352]	; (8002e88 <HAL_RCC_ClockConfig+0x1c8>)
 8002d26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0308 	and.w	r3, r3, #8
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d38:	4b53      	ldr	r3, [pc, #332]	; (8002e88 <HAL_RCC_ClockConfig+0x1c8>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	4a52      	ldr	r2, [pc, #328]	; (8002e88 <HAL_RCC_ClockConfig+0x1c8>)
 8002d3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d44:	4b50      	ldr	r3, [pc, #320]	; (8002e88 <HAL_RCC_ClockConfig+0x1c8>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	494d      	ldr	r1, [pc, #308]	; (8002e88 <HAL_RCC_ClockConfig+0x1c8>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d040      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d107      	bne.n	8002d7a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6a:	4b47      	ldr	r3, [pc, #284]	; (8002e88 <HAL_RCC_ClockConfig+0x1c8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d115      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e07f      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d107      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d82:	4b41      	ldr	r3, [pc, #260]	; (8002e88 <HAL_RCC_ClockConfig+0x1c8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d109      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e073      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d92:	4b3d      	ldr	r3, [pc, #244]	; (8002e88 <HAL_RCC_ClockConfig+0x1c8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e06b      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002da2:	4b39      	ldr	r3, [pc, #228]	; (8002e88 <HAL_RCC_ClockConfig+0x1c8>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f023 0203 	bic.w	r2, r3, #3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	4936      	ldr	r1, [pc, #216]	; (8002e88 <HAL_RCC_ClockConfig+0x1c8>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db4:	f7fe fe04 	bl	80019c0 <HAL_GetTick>
 8002db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dba:	e00a      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dbc:	f7fe fe00 	bl	80019c0 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e053      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd2:	4b2d      	ldr	r3, [pc, #180]	; (8002e88 <HAL_RCC_ClockConfig+0x1c8>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 020c 	and.w	r2, r3, #12
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d1eb      	bne.n	8002dbc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002de4:	4b27      	ldr	r3, [pc, #156]	; (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 030f 	and.w	r3, r3, #15
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d210      	bcs.n	8002e14 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df2:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 020f 	bic.w	r2, r3, #15
 8002dfa:	4922      	ldr	r1, [pc, #136]	; (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e02:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <HAL_RCC_ClockConfig+0x1c4>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d001      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e032      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d008      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e20:	4b19      	ldr	r3, [pc, #100]	; (8002e88 <HAL_RCC_ClockConfig+0x1c8>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	4916      	ldr	r1, [pc, #88]	; (8002e88 <HAL_RCC_ClockConfig+0x1c8>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d009      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e3e:	4b12      	ldr	r3, [pc, #72]	; (8002e88 <HAL_RCC_ClockConfig+0x1c8>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	490e      	ldr	r1, [pc, #56]	; (8002e88 <HAL_RCC_ClockConfig+0x1c8>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e52:	f000 f821 	bl	8002e98 <HAL_RCC_GetSysClockFreq>
 8002e56:	4601      	mov	r1, r0
 8002e58:	4b0b      	ldr	r3, [pc, #44]	; (8002e88 <HAL_RCC_ClockConfig+0x1c8>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	091b      	lsrs	r3, r3, #4
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	4a0a      	ldr	r2, [pc, #40]	; (8002e8c <HAL_RCC_ClockConfig+0x1cc>)
 8002e64:	5cd3      	ldrb	r3, [r2, r3]
 8002e66:	fa21 f303 	lsr.w	r3, r1, r3
 8002e6a:	4a09      	ldr	r2, [pc, #36]	; (8002e90 <HAL_RCC_ClockConfig+0x1d0>)
 8002e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e6e:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <HAL_RCC_ClockConfig+0x1d4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe fd60 	bl	8001938 <HAL_InitTick>

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40023c00 	.word	0x40023c00
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	080060a0 	.word	0x080060a0
 8002e90:	20000020 	.word	0x20000020
 8002e94:	20000024 	.word	0x20000024

08002e98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	607b      	str	r3, [r7, #4]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eae:	4b63      	ldr	r3, [pc, #396]	; (800303c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 030c 	and.w	r3, r3, #12
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	d007      	beq.n	8002eca <HAL_RCC_GetSysClockFreq+0x32>
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d008      	beq.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x38>
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f040 80b4 	bne.w	800302c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ec4:	4b5e      	ldr	r3, [pc, #376]	; (8003040 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002ec6:	60bb      	str	r3, [r7, #8]
      break;
 8002ec8:	e0b3      	b.n	8003032 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eca:	4b5e      	ldr	r3, [pc, #376]	; (8003044 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002ecc:	60bb      	str	r3, [r7, #8]
      break;
 8002ece:	e0b0      	b.n	8003032 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ed0:	4b5a      	ldr	r3, [pc, #360]	; (800303c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ed8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002eda:	4b58      	ldr	r3, [pc, #352]	; (800303c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d04a      	beq.n	8002f7c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee6:	4b55      	ldr	r3, [pc, #340]	; (800303c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	099b      	lsrs	r3, r3, #6
 8002eec:	f04f 0400 	mov.w	r4, #0
 8002ef0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	ea03 0501 	and.w	r5, r3, r1
 8002efc:	ea04 0602 	and.w	r6, r4, r2
 8002f00:	4629      	mov	r1, r5
 8002f02:	4632      	mov	r2, r6
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	f04f 0400 	mov.w	r4, #0
 8002f0c:	0154      	lsls	r4, r2, #5
 8002f0e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f12:	014b      	lsls	r3, r1, #5
 8002f14:	4619      	mov	r1, r3
 8002f16:	4622      	mov	r2, r4
 8002f18:	1b49      	subs	r1, r1, r5
 8002f1a:	eb62 0206 	sbc.w	r2, r2, r6
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	f04f 0400 	mov.w	r4, #0
 8002f26:	0194      	lsls	r4, r2, #6
 8002f28:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f2c:	018b      	lsls	r3, r1, #6
 8002f2e:	1a5b      	subs	r3, r3, r1
 8002f30:	eb64 0402 	sbc.w	r4, r4, r2
 8002f34:	f04f 0100 	mov.w	r1, #0
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	00e2      	lsls	r2, r4, #3
 8002f3e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f42:	00d9      	lsls	r1, r3, #3
 8002f44:	460b      	mov	r3, r1
 8002f46:	4614      	mov	r4, r2
 8002f48:	195b      	adds	r3, r3, r5
 8002f4a:	eb44 0406 	adc.w	r4, r4, r6
 8002f4e:	f04f 0100 	mov.w	r1, #0
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	0262      	lsls	r2, r4, #9
 8002f58:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002f5c:	0259      	lsls	r1, r3, #9
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4614      	mov	r4, r2
 8002f62:	4618      	mov	r0, r3
 8002f64:	4621      	mov	r1, r4
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f04f 0400 	mov.w	r4, #0
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4623      	mov	r3, r4
 8002f70:	f7fd f962 	bl	8000238 <__aeabi_uldivmod>
 8002f74:	4603      	mov	r3, r0
 8002f76:	460c      	mov	r4, r1
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	e049      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f7c:	4b2f      	ldr	r3, [pc, #188]	; (800303c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	099b      	lsrs	r3, r3, #6
 8002f82:	f04f 0400 	mov.w	r4, #0
 8002f86:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	ea03 0501 	and.w	r5, r3, r1
 8002f92:	ea04 0602 	and.w	r6, r4, r2
 8002f96:	4629      	mov	r1, r5
 8002f98:	4632      	mov	r2, r6
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	f04f 0400 	mov.w	r4, #0
 8002fa2:	0154      	lsls	r4, r2, #5
 8002fa4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002fa8:	014b      	lsls	r3, r1, #5
 8002faa:	4619      	mov	r1, r3
 8002fac:	4622      	mov	r2, r4
 8002fae:	1b49      	subs	r1, r1, r5
 8002fb0:	eb62 0206 	sbc.w	r2, r2, r6
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	f04f 0400 	mov.w	r4, #0
 8002fbc:	0194      	lsls	r4, r2, #6
 8002fbe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002fc2:	018b      	lsls	r3, r1, #6
 8002fc4:	1a5b      	subs	r3, r3, r1
 8002fc6:	eb64 0402 	sbc.w	r4, r4, r2
 8002fca:	f04f 0100 	mov.w	r1, #0
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	00e2      	lsls	r2, r4, #3
 8002fd4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002fd8:	00d9      	lsls	r1, r3, #3
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4614      	mov	r4, r2
 8002fde:	195b      	adds	r3, r3, r5
 8002fe0:	eb44 0406 	adc.w	r4, r4, r6
 8002fe4:	f04f 0100 	mov.w	r1, #0
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	02a2      	lsls	r2, r4, #10
 8002fee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ff2:	0299      	lsls	r1, r3, #10
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	4614      	mov	r4, r2
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f04f 0400 	mov.w	r4, #0
 8003002:	461a      	mov	r2, r3
 8003004:	4623      	mov	r3, r4
 8003006:	f7fd f917 	bl	8000238 <__aeabi_uldivmod>
 800300a:	4603      	mov	r3, r0
 800300c:	460c      	mov	r4, r1
 800300e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003010:	4b0a      	ldr	r3, [pc, #40]	; (800303c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	0c1b      	lsrs	r3, r3, #16
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	3301      	adds	r3, #1
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	fbb2 f3f3 	udiv	r3, r2, r3
 8003028:	60bb      	str	r3, [r7, #8]
      break;
 800302a:	e002      	b.n	8003032 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800302c:	4b04      	ldr	r3, [pc, #16]	; (8003040 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800302e:	60bb      	str	r3, [r7, #8]
      break;
 8003030:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003032:	68bb      	ldr	r3, [r7, #8]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800303c:	40023800 	.word	0x40023800
 8003040:	00f42400 	.word	0x00f42400
 8003044:	007a1200 	.word	0x007a1200

08003048 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800304c:	4b03      	ldr	r3, [pc, #12]	; (800305c <HAL_RCC_GetHCLKFreq+0x14>)
 800304e:	681b      	ldr	r3, [r3, #0]
}
 8003050:	4618      	mov	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20000020 	.word	0x20000020

08003060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003064:	f7ff fff0 	bl	8003048 <HAL_RCC_GetHCLKFreq>
 8003068:	4601      	mov	r1, r0
 800306a:	4b05      	ldr	r3, [pc, #20]	; (8003080 <HAL_RCC_GetPCLK1Freq+0x20>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	0a9b      	lsrs	r3, r3, #10
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	4a03      	ldr	r2, [pc, #12]	; (8003084 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003076:	5cd3      	ldrb	r3, [r2, r3]
 8003078:	fa21 f303 	lsr.w	r3, r1, r3
}
 800307c:	4618      	mov	r0, r3
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40023800 	.word	0x40023800
 8003084:	080060b0 	.word	0x080060b0

08003088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800308c:	f7ff ffdc 	bl	8003048 <HAL_RCC_GetHCLKFreq>
 8003090:	4601      	mov	r1, r0
 8003092:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	0b5b      	lsrs	r3, r3, #13
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	4a03      	ldr	r2, [pc, #12]	; (80030ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800309e:	5cd3      	ldrb	r3, [r2, r3]
 80030a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40023800 	.word	0x40023800
 80030ac:	080060b0 	.word	0x080060b0

080030b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80030b8:	2300      	movs	r3, #0
 80030ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80030bc:	2300      	movs	r3, #0
 80030be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80030c0:	2300      	movs	r3, #0
 80030c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80030c4:	2300      	movs	r3, #0
 80030c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80030c8:	2300      	movs	r3, #0
 80030ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d012      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80030d8:	4b69      	ldr	r3, [pc, #420]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	4a68      	ldr	r2, [pc, #416]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80030e2:	6093      	str	r3, [r2, #8]
 80030e4:	4b66      	ldr	r3, [pc, #408]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ec:	4964      	ldr	r1, [pc, #400]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80030fa:	2301      	movs	r3, #1
 80030fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d017      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800310a:	4b5d      	ldr	r3, [pc, #372]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800310c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003110:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003118:	4959      	ldr	r1, [pc, #356]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800311a:	4313      	orrs	r3, r2
 800311c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003124:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003128:	d101      	bne.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800312a:	2301      	movs	r3, #1
 800312c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003136:	2301      	movs	r3, #1
 8003138:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d017      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003146:	4b4e      	ldr	r3, [pc, #312]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800314c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	494a      	ldr	r1, [pc, #296]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003156:	4313      	orrs	r3, r2
 8003158:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003164:	d101      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003166:	2301      	movs	r3, #1
 8003168:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003172:	2301      	movs	r3, #1
 8003174:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003182:	2301      	movs	r3, #1
 8003184:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0320 	and.w	r3, r3, #32
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 808b 	beq.w	80032aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003194:	4b3a      	ldr	r3, [pc, #232]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	4a39      	ldr	r2, [pc, #228]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800319a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800319e:	6413      	str	r3, [r2, #64]	; 0x40
 80031a0:	4b37      	ldr	r3, [pc, #220]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a8:	60bb      	str	r3, [r7, #8]
 80031aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80031ac:	4b35      	ldr	r3, [pc, #212]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a34      	ldr	r2, [pc, #208]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031b8:	f7fe fc02 	bl	80019c0 <HAL_GetTick>
 80031bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c0:	f7fe fbfe 	bl	80019c0 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b64      	cmp	r3, #100	; 0x64
 80031cc:	d901      	bls.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e38d      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80031d2:	4b2c      	ldr	r3, [pc, #176]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031de:	4b28      	ldr	r3, [pc, #160]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d035      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d02e      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031fc:	4b20      	ldr	r3, [pc, #128]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003204:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003206:	4b1e      	ldr	r3, [pc, #120]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320a:	4a1d      	ldr	r2, [pc, #116]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800320c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003210:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003212:	4b1b      	ldr	r3, [pc, #108]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003216:	4a1a      	ldr	r2, [pc, #104]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800321c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800321e:	4a18      	ldr	r2, [pc, #96]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003224:	4b16      	ldr	r3, [pc, #88]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b01      	cmp	r3, #1
 800322e:	d114      	bne.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003230:	f7fe fbc6 	bl	80019c0 <HAL_GetTick>
 8003234:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003236:	e00a      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003238:	f7fe fbc2 	bl	80019c0 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	f241 3288 	movw	r2, #5000	; 0x1388
 8003246:	4293      	cmp	r3, r2
 8003248:	d901      	bls.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e34f      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800324e:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0ee      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003262:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003266:	d111      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003268:	4b05      	ldr	r3, [pc, #20]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003274:	4b04      	ldr	r3, [pc, #16]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003276:	400b      	ands	r3, r1
 8003278:	4901      	ldr	r1, [pc, #4]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800327a:	4313      	orrs	r3, r2
 800327c:	608b      	str	r3, [r1, #8]
 800327e:	e00b      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003280:	40023800 	.word	0x40023800
 8003284:	40007000 	.word	0x40007000
 8003288:	0ffffcff 	.word	0x0ffffcff
 800328c:	4bb3      	ldr	r3, [pc, #716]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	4ab2      	ldr	r2, [pc, #712]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003292:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003296:	6093      	str	r3, [r2, #8]
 8003298:	4bb0      	ldr	r3, [pc, #704]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800329a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a4:	49ad      	ldr	r1, [pc, #692]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0310 	and.w	r3, r3, #16
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d010      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80032b6:	4ba9      	ldr	r3, [pc, #676]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032bc:	4aa7      	ldr	r2, [pc, #668]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80032c6:	4ba5      	ldr	r3, [pc, #660]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d0:	49a2      	ldr	r1, [pc, #648]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00a      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032e4:	4b9d      	ldr	r3, [pc, #628]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032f2:	499a      	ldr	r1, [pc, #616]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00a      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003306:	4b95      	ldr	r3, [pc, #596]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003314:	4991      	ldr	r1, [pc, #580]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003316:	4313      	orrs	r3, r2
 8003318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00a      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003328:	4b8c      	ldr	r3, [pc, #560]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800332a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003336:	4989      	ldr	r1, [pc, #548]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003338:	4313      	orrs	r3, r2
 800333a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800334a:	4b84      	ldr	r3, [pc, #528]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800334c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003350:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003358:	4980      	ldr	r1, [pc, #512]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800335a:	4313      	orrs	r3, r2
 800335c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00a      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800336c:	4b7b      	ldr	r3, [pc, #492]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800336e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003372:	f023 0203 	bic.w	r2, r3, #3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	4978      	ldr	r1, [pc, #480]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800337c:	4313      	orrs	r3, r2
 800337e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800338e:	4b73      	ldr	r3, [pc, #460]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003394:	f023 020c 	bic.w	r2, r3, #12
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800339c:	496f      	ldr	r1, [pc, #444]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033b0:	4b6a      	ldr	r3, [pc, #424]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033be:	4967      	ldr	r1, [pc, #412]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033d2:	4b62      	ldr	r3, [pc, #392]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033e0:	495e      	ldr	r1, [pc, #376]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033f4:	4b59      	ldr	r3, [pc, #356]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003402:	4956      	ldr	r1, [pc, #344]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003416:	4b51      	ldr	r3, [pc, #324]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003424:	494d      	ldr	r1, [pc, #308]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003438:	4b48      	ldr	r3, [pc, #288]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800343a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003446:	4945      	ldr	r1, [pc, #276]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800345a:	4b40      	ldr	r3, [pc, #256]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800345c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003460:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003468:	493c      	ldr	r1, [pc, #240]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800347c:	4b37      	ldr	r3, [pc, #220]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800347e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003482:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800348a:	4934      	ldr	r1, [pc, #208]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d011      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800349e:	4b2f      	ldr	r3, [pc, #188]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034ac:	492b      	ldr	r1, [pc, #172]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034bc:	d101      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80034be:	2301      	movs	r3, #1
 80034c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80034ce:	2301      	movs	r3, #1
 80034d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034de:	4b1f      	ldr	r3, [pc, #124]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ec:	491b      	ldr	r1, [pc, #108]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00b      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003500:	4b16      	ldr	r3, [pc, #88]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003506:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003510:	4912      	ldr	r1, [pc, #72]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003512:	4313      	orrs	r3, r2
 8003514:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00b      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003524:	4b0d      	ldr	r3, [pc, #52]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003534:	4909      	ldr	r1, [pc, #36]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00f      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003548:	4b04      	ldr	r3, [pc, #16]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800354a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800354e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003558:	e002      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800355a:	bf00      	nop
 800355c:	40023800 	.word	0x40023800
 8003560:	4985      	ldr	r1, [pc, #532]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00b      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003574:	4b80      	ldr	r3, [pc, #512]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003576:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800357a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003584:	497c      	ldr	r1, [pc, #496]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003586:	4313      	orrs	r3, r2
 8003588:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d005      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800359a:	f040 80d6 	bne.w	800374a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800359e:	4b76      	ldr	r3, [pc, #472]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a75      	ldr	r2, [pc, #468]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035aa:	f7fe fa09 	bl	80019c0 <HAL_GetTick>
 80035ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035b0:	e008      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035b2:	f7fe fa05 	bl	80019c0 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b64      	cmp	r3, #100	; 0x64
 80035be:	d901      	bls.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e194      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035c4:	4b6c      	ldr	r3, [pc, #432]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1f0      	bne.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d021      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d11d      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80035e4:	4b64      	ldr	r3, [pc, #400]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ea:	0c1b      	lsrs	r3, r3, #16
 80035ec:	f003 0303 	and.w	r3, r3, #3
 80035f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035f2:	4b61      	ldr	r3, [pc, #388]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035f8:	0e1b      	lsrs	r3, r3, #24
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	019a      	lsls	r2, r3, #6
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	041b      	lsls	r3, r3, #16
 800360a:	431a      	orrs	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	061b      	lsls	r3, r3, #24
 8003610:	431a      	orrs	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	071b      	lsls	r3, r3, #28
 8003618:	4957      	ldr	r1, [pc, #348]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800361a:	4313      	orrs	r3, r2
 800361c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d004      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003630:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003634:	d00a      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800363e:	2b00      	cmp	r3, #0
 8003640:	d02e      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800364a:	d129      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800364c:	4b4a      	ldr	r3, [pc, #296]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800364e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003652:	0c1b      	lsrs	r3, r3, #16
 8003654:	f003 0303 	and.w	r3, r3, #3
 8003658:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800365a:	4b47      	ldr	r3, [pc, #284]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800365c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003660:	0f1b      	lsrs	r3, r3, #28
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	019a      	lsls	r2, r3, #6
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	041b      	lsls	r3, r3, #16
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	061b      	lsls	r3, r3, #24
 800367a:	431a      	orrs	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	071b      	lsls	r3, r3, #28
 8003680:	493d      	ldr	r1, [pc, #244]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003688:	4b3b      	ldr	r3, [pc, #236]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800368a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800368e:	f023 021f 	bic.w	r2, r3, #31
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	3b01      	subs	r3, #1
 8003698:	4937      	ldr	r1, [pc, #220]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800369a:	4313      	orrs	r3, r2
 800369c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d01d      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036ac:	4b32      	ldr	r3, [pc, #200]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036b2:	0e1b      	lsrs	r3, r3, #24
 80036b4:	f003 030f 	and.w	r3, r3, #15
 80036b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036ba:	4b2f      	ldr	r3, [pc, #188]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036c0:	0f1b      	lsrs	r3, r3, #28
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	019a      	lsls	r2, r3, #6
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	041b      	lsls	r3, r3, #16
 80036d4:	431a      	orrs	r2, r3
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	061b      	lsls	r3, r3, #24
 80036da:	431a      	orrs	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	071b      	lsls	r3, r3, #28
 80036e0:	4925      	ldr	r1, [pc, #148]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d011      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	019a      	lsls	r2, r3, #6
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	041b      	lsls	r3, r3, #16
 8003700:	431a      	orrs	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	061b      	lsls	r3, r3, #24
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	071b      	lsls	r3, r3, #28
 8003710:	4919      	ldr	r1, [pc, #100]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003718:	4b17      	ldr	r3, [pc, #92]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a16      	ldr	r2, [pc, #88]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800371e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003722:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003724:	f7fe f94c 	bl	80019c0 <HAL_GetTick>
 8003728:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800372a:	e008      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800372c:	f7fe f948 	bl	80019c0 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b64      	cmp	r3, #100	; 0x64
 8003738:	d901      	bls.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e0d7      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800373e:	4b0e      	ldr	r3, [pc, #56]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0f0      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	2b01      	cmp	r3, #1
 800374e:	f040 80cd 	bne.w	80038ec <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003752:	4b09      	ldr	r3, [pc, #36]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a08      	ldr	r2, [pc, #32]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003758:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800375c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800375e:	f7fe f92f 	bl	80019c0 <HAL_GetTick>
 8003762:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003764:	e00a      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003766:	f7fe f92b 	bl	80019c0 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b64      	cmp	r3, #100	; 0x64
 8003772:	d903      	bls.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e0ba      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003778:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800377c:	4b5e      	ldr	r3, [pc, #376]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003788:	d0ed      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379a:	2b00      	cmp	r3, #0
 800379c:	d009      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d02e      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d12a      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80037b2:	4b51      	ldr	r3, [pc, #324]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80037b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b8:	0c1b      	lsrs	r3, r3, #16
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80037c0:	4b4d      	ldr	r3, [pc, #308]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80037c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c6:	0f1b      	lsrs	r3, r3, #28
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	019a      	lsls	r2, r3, #6
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	041b      	lsls	r3, r3, #16
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	061b      	lsls	r3, r3, #24
 80037e0:	431a      	orrs	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	071b      	lsls	r3, r3, #28
 80037e6:	4944      	ldr	r1, [pc, #272]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80037ee:	4b42      	ldr	r3, [pc, #264]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80037f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fc:	3b01      	subs	r3, #1
 80037fe:	021b      	lsls	r3, r3, #8
 8003800:	493d      	ldr	r1, [pc, #244]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003802:	4313      	orrs	r3, r2
 8003804:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d022      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003818:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800381c:	d11d      	bne.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800381e:	4b36      	ldr	r3, [pc, #216]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003824:	0e1b      	lsrs	r3, r3, #24
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800382c:	4b32      	ldr	r3, [pc, #200]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800382e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003832:	0f1b      	lsrs	r3, r3, #28
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	019a      	lsls	r2, r3, #6
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	041b      	lsls	r3, r3, #16
 8003846:	431a      	orrs	r2, r3
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	061b      	lsls	r3, r3, #24
 800384c:	431a      	orrs	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	071b      	lsls	r3, r3, #28
 8003852:	4929      	ldr	r1, [pc, #164]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d028      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003866:	4b24      	ldr	r3, [pc, #144]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386c:	0e1b      	lsrs	r3, r3, #24
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003874:	4b20      	ldr	r3, [pc, #128]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387a:	0c1b      	lsrs	r3, r3, #16
 800387c:	f003 0303 	and.w	r3, r3, #3
 8003880:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	019a      	lsls	r2, r3, #6
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	041b      	lsls	r3, r3, #16
 800388c:	431a      	orrs	r2, r3
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	061b      	lsls	r3, r3, #24
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	071b      	lsls	r3, r3, #28
 800389a:	4917      	ldr	r1, [pc, #92]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80038a2:	4b15      	ldr	r3, [pc, #84]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b0:	4911      	ldr	r1, [pc, #68]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80038b8:	4b0f      	ldr	r3, [pc, #60]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a0e      	ldr	r2, [pc, #56]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038c4:	f7fe f87c 	bl	80019c0 <HAL_GetTick>
 80038c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038cc:	f7fe f878 	bl	80019c0 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b64      	cmp	r3, #100	; 0x64
 80038d8:	d901      	bls.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e007      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038de:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038ea:	d1ef      	bne.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3720      	adds	r7, #32
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40023800 	.word	0x40023800

080038fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e084      	b.n	8003a18 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	d106      	bne.n	800392e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7fd fe25 	bl	8001578 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2202      	movs	r2, #2
 8003932:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003944:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800394e:	d902      	bls.n	8003956 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003950:	2300      	movs	r3, #0
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	e002      	b.n	800395c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003956:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800395a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003964:	d007      	beq.n	8003976 <HAL_SPI_Init+0x7a>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800396e:	d002      	beq.n	8003976 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10b      	bne.n	8003996 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003986:	d903      	bls.n	8003990 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	631a      	str	r2, [r3, #48]	; 0x30
 800398e:	e002      	b.n	8003996 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	431a      	orrs	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039b4:	431a      	orrs	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	431a      	orrs	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	ea42 0103 	orr.w	r1, r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	0c1b      	lsrs	r3, r3, #16
 80039d6:	f003 0204 	and.w	r2, r3, #4
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e4:	431a      	orrs	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	ea42 0103 	orr.w	r1, r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	69da      	ldr	r2, [r3, #28]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a06:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b088      	sub	sp, #32
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	603b      	str	r3, [r7, #0]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a30:	2300      	movs	r3, #0
 8003a32:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d101      	bne.n	8003a42 <HAL_SPI_Transmit+0x22>
 8003a3e:	2302      	movs	r3, #2
 8003a40:	e150      	b.n	8003ce4 <HAL_SPI_Transmit+0x2c4>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a4a:	f7fd ffb9 	bl	80019c0 <HAL_GetTick>
 8003a4e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003a50:	88fb      	ldrh	r3, [r7, #6]
 8003a52:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d002      	beq.n	8003a66 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003a60:	2302      	movs	r3, #2
 8003a62:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a64:	e135      	b.n	8003cd2 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <HAL_SPI_Transmit+0x52>
 8003a6c:	88fb      	ldrh	r3, [r7, #6]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d102      	bne.n	8003a78 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a76:	e12c      	b.n	8003cd2 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2203      	movs	r2, #3
 8003a7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	88fa      	ldrh	r2, [r7, #6]
 8003a90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	88fa      	ldrh	r2, [r7, #6]
 8003a96:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ac2:	d107      	bne.n	8003ad4 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ad2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ade:	2b40      	cmp	r3, #64	; 0x40
 8003ae0:	d007      	beq.n	8003af2 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003af0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003afa:	d94b      	bls.n	8003b94 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <HAL_SPI_Transmit+0xea>
 8003b04:	8afb      	ldrh	r3, [r7, #22]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d13e      	bne.n	8003b88 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0e:	881a      	ldrh	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1a:	1c9a      	adds	r2, r3, #2
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b2e:	e02b      	b.n	8003b88 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d112      	bne.n	8003b64 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b42:	881a      	ldrh	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4e:	1c9a      	adds	r2, r3, #2
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b62:	e011      	b.n	8003b88 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b64:	f7fd ff2c 	bl	80019c0 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d803      	bhi.n	8003b7c <HAL_SPI_Transmit+0x15c>
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7a:	d102      	bne.n	8003b82 <HAL_SPI_Transmit+0x162>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d102      	bne.n	8003b88 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b86:	e0a4      	b.n	8003cd2 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1ce      	bne.n	8003b30 <HAL_SPI_Transmit+0x110>
 8003b92:	e07c      	b.n	8003c8e <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d002      	beq.n	8003ba2 <HAL_SPI_Transmit+0x182>
 8003b9c:	8afb      	ldrh	r3, [r7, #22]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d170      	bne.n	8003c84 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d912      	bls.n	8003bd2 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb0:	881a      	ldrh	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbc:	1c9a      	adds	r2, r3, #2
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	3b02      	subs	r3, #2
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003bd0:	e058      	b.n	8003c84 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	330c      	adds	r3, #12
 8003bdc:	7812      	ldrb	r2, [r2, #0]
 8003bde:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be4:	1c5a      	adds	r2, r3, #1
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003bf8:	e044      	b.n	8003c84 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d12b      	bne.n	8003c60 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d912      	bls.n	8003c38 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c16:	881a      	ldrh	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c22:	1c9a      	adds	r2, r3, #2
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	3b02      	subs	r3, #2
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c36:	e025      	b.n	8003c84 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	330c      	adds	r3, #12
 8003c42:	7812      	ldrb	r2, [r2, #0]
 8003c44:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4a:	1c5a      	adds	r2, r3, #1
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c5e:	e011      	b.n	8003c84 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c60:	f7fd feae 	bl	80019c0 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d803      	bhi.n	8003c78 <HAL_SPI_Transmit+0x258>
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c76:	d102      	bne.n	8003c7e <HAL_SPI_Transmit+0x25e>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d102      	bne.n	8003c84 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c82:	e026      	b.n	8003cd2 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1b5      	bne.n	8003bfa <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	6839      	ldr	r1, [r7, #0]
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 f901 	bl	8003e9a <SPI_EndRxTxTransaction>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d002      	beq.n	8003ca4 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10a      	bne.n	8003cc2 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cac:	2300      	movs	r3, #0
 8003cae:	613b      	str	r3, [r7, #16]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	613b      	str	r3, [r7, #16]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	613b      	str	r3, [r7, #16]
 8003cc0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	77fb      	strb	r3, [r7, #31]
 8003cce:	e000      	b.n	8003cd2 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8003cd0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ce2:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3720      	adds	r7, #32
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	603b      	str	r3, [r7, #0]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cfc:	e04c      	b.n	8003d98 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d04:	d048      	beq.n	8003d98 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003d06:	f7fd fe5b 	bl	80019c0 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d902      	bls.n	8003d1c <SPI_WaitFlagStateUntilTimeout+0x30>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d13d      	bne.n	8003d98 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d2a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d34:	d111      	bne.n	8003d5a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d3e:	d004      	beq.n	8003d4a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d48:	d107      	bne.n	8003d5a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d58:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d62:	d10f      	bne.n	8003d84 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d82:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e00f      	b.n	8003db8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689a      	ldr	r2, [r3, #8]
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	4013      	ands	r3, r2
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	bf0c      	ite	eq
 8003da8:	2301      	moveq	r3, #1
 8003daa:	2300      	movne	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	461a      	mov	r2, r3
 8003db0:	79fb      	ldrb	r3, [r7, #7]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d1a3      	bne.n	8003cfe <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
 8003dcc:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8003dce:	e057      	b.n	8003e80 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003dd6:	d106      	bne.n	8003de6 <SPI_WaitFifoStateUntilTimeout+0x26>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d103      	bne.n	8003de6 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	330c      	adds	r3, #12
 8003de4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dec:	d048      	beq.n	8003e80 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003dee:	f7fd fde7 	bl	80019c0 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d902      	bls.n	8003e04 <SPI_WaitFifoStateUntilTimeout+0x44>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d13d      	bne.n	8003e80 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e12:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e1c:	d111      	bne.n	8003e42 <SPI_WaitFifoStateUntilTimeout+0x82>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e26:	d004      	beq.n	8003e32 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e30:	d107      	bne.n	8003e42 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e40:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e4a:	d10f      	bne.n	8003e6c <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e5a:	601a      	str	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e6a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e008      	b.n	8003e92 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689a      	ldr	r2, [r3, #8]
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d19f      	bne.n	8003dd0 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b086      	sub	sp, #24
 8003e9e:	af02      	add	r7, sp, #8
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f7ff ff84 	bl	8003dc0 <SPI_WaitFifoStateUntilTimeout>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d007      	beq.n	8003ece <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec2:	f043 0220 	orr.w	r2, r3, #32
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e027      	b.n	8003f1e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	2180      	movs	r1, #128	; 0x80
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f7ff ff07 	bl	8003cec <SPI_WaitFlagStateUntilTimeout>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d007      	beq.n	8003ef4 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee8:	f043 0220 	orr.w	r2, r3, #32
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e014      	b.n	8003f1e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f7ff ff5d 	bl	8003dc0 <SPI_WaitFifoStateUntilTimeout>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d007      	beq.n	8003f1c <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f10:	f043 0220 	orr.w	r2, r3, #32
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e000      	b.n	8003f1e <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b082      	sub	sp, #8
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e01d      	b.n	8003f74 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d106      	bne.n	8003f52 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7fd fbb5 	bl	80016bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2202      	movs	r2, #2
 8003f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	3304      	adds	r3, #4
 8003f62:	4619      	mov	r1, r3
 8003f64:	4610      	mov	r0, r2
 8003f66:	f000 fa11 	bl	800438c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e01d      	b.n	8003fca <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f815 	bl	8003fd2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4610      	mov	r0, r2
 8003fbc:	f000 f9e6 	bl	800438c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
	...

08003fe8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d101      	bne.n	8004002 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003ffe:	2302      	movs	r3, #2
 8004000:	e105      	b.n	800420e <HAL_TIM_PWM_ConfigChannel+0x226>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2202      	movs	r2, #2
 800400e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b14      	cmp	r3, #20
 8004016:	f200 80f0 	bhi.w	80041fa <HAL_TIM_PWM_ConfigChannel+0x212>
 800401a:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800401c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004020:	08004075 	.word	0x08004075
 8004024:	080041fb 	.word	0x080041fb
 8004028:	080041fb 	.word	0x080041fb
 800402c:	080041fb 	.word	0x080041fb
 8004030:	080040b5 	.word	0x080040b5
 8004034:	080041fb 	.word	0x080041fb
 8004038:	080041fb 	.word	0x080041fb
 800403c:	080041fb 	.word	0x080041fb
 8004040:	080040f7 	.word	0x080040f7
 8004044:	080041fb 	.word	0x080041fb
 8004048:	080041fb 	.word	0x080041fb
 800404c:	080041fb 	.word	0x080041fb
 8004050:	08004137 	.word	0x08004137
 8004054:	080041fb 	.word	0x080041fb
 8004058:	080041fb 	.word	0x080041fb
 800405c:	080041fb 	.word	0x080041fb
 8004060:	08004179 	.word	0x08004179
 8004064:	080041fb 	.word	0x080041fb
 8004068:	080041fb 	.word	0x080041fb
 800406c:	080041fb 	.word	0x080041fb
 8004070:	080041b9 	.word	0x080041b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68b9      	ldr	r1, [r7, #8]
 800407a:	4618      	mov	r0, r3
 800407c:	f000 fa26 	bl	80044cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699a      	ldr	r2, [r3, #24]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0208 	orr.w	r2, r2, #8
 800408e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	699a      	ldr	r2, [r3, #24]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0204 	bic.w	r2, r2, #4
 800409e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6999      	ldr	r1, [r3, #24]
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	691a      	ldr	r2, [r3, #16]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	619a      	str	r2, [r3, #24]
      break;
 80040b2:	e0a3      	b.n	80041fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68b9      	ldr	r1, [r7, #8]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 fa78 	bl	80045b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699a      	ldr	r2, [r3, #24]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	699a      	ldr	r2, [r3, #24]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6999      	ldr	r1, [r3, #24]
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	021a      	lsls	r2, r3, #8
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	619a      	str	r2, [r3, #24]
      break;
 80040f4:	e082      	b.n	80041fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68b9      	ldr	r1, [r7, #8]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 facf 	bl	80046a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	69da      	ldr	r2, [r3, #28]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f042 0208 	orr.w	r2, r2, #8
 8004110:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	69da      	ldr	r2, [r3, #28]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0204 	bic.w	r2, r2, #4
 8004120:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	69d9      	ldr	r1, [r3, #28]
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	691a      	ldr	r2, [r3, #16]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	61da      	str	r2, [r3, #28]
      break;
 8004134:	e062      	b.n	80041fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68b9      	ldr	r1, [r7, #8]
 800413c:	4618      	mov	r0, r3
 800413e:	f000 fb25 	bl	800478c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	69da      	ldr	r2, [r3, #28]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004150:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	69da      	ldr	r2, [r3, #28]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004160:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	69d9      	ldr	r1, [r3, #28]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	021a      	lsls	r2, r3, #8
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	61da      	str	r2, [r3, #28]
      break;
 8004176:	e041      	b.n	80041fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68b9      	ldr	r1, [r7, #8]
 800417e:	4618      	mov	r0, r3
 8004180:	f000 fb5c 	bl	800483c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0208 	orr.w	r2, r2, #8
 8004192:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 0204 	bic.w	r2, r2, #4
 80041a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	691a      	ldr	r2, [r3, #16]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80041b6:	e021      	b.n	80041fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68b9      	ldr	r1, [r7, #8]
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 fb8e 	bl	80048e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	021a      	lsls	r2, r3, #8
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80041f8:	e000      	b.n	80041fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80041fa:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop

08004218 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004228:	2b01      	cmp	r3, #1
 800422a:	d101      	bne.n	8004230 <HAL_TIM_ConfigClockSource+0x18>
 800422c:	2302      	movs	r3, #2
 800422e:	e0a6      	b.n	800437e <HAL_TIM_ConfigClockSource+0x166>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	4b4f      	ldr	r3, [pc, #316]	; (8004388 <HAL_TIM_ConfigClockSource+0x170>)
 800424c:	4013      	ands	r3, r2
 800424e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004256:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b40      	cmp	r3, #64	; 0x40
 8004266:	d067      	beq.n	8004338 <HAL_TIM_ConfigClockSource+0x120>
 8004268:	2b40      	cmp	r3, #64	; 0x40
 800426a:	d80b      	bhi.n	8004284 <HAL_TIM_ConfigClockSource+0x6c>
 800426c:	2b10      	cmp	r3, #16
 800426e:	d073      	beq.n	8004358 <HAL_TIM_ConfigClockSource+0x140>
 8004270:	2b10      	cmp	r3, #16
 8004272:	d802      	bhi.n	800427a <HAL_TIM_ConfigClockSource+0x62>
 8004274:	2b00      	cmp	r3, #0
 8004276:	d06f      	beq.n	8004358 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004278:	e078      	b.n	800436c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800427a:	2b20      	cmp	r3, #32
 800427c:	d06c      	beq.n	8004358 <HAL_TIM_ConfigClockSource+0x140>
 800427e:	2b30      	cmp	r3, #48	; 0x30
 8004280:	d06a      	beq.n	8004358 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004282:	e073      	b.n	800436c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004284:	2b70      	cmp	r3, #112	; 0x70
 8004286:	d00d      	beq.n	80042a4 <HAL_TIM_ConfigClockSource+0x8c>
 8004288:	2b70      	cmp	r3, #112	; 0x70
 800428a:	d804      	bhi.n	8004296 <HAL_TIM_ConfigClockSource+0x7e>
 800428c:	2b50      	cmp	r3, #80	; 0x50
 800428e:	d033      	beq.n	80042f8 <HAL_TIM_ConfigClockSource+0xe0>
 8004290:	2b60      	cmp	r3, #96	; 0x60
 8004292:	d041      	beq.n	8004318 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004294:	e06a      	b.n	800436c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800429a:	d066      	beq.n	800436a <HAL_TIM_ConfigClockSource+0x152>
 800429c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042a0:	d017      	beq.n	80042d2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80042a2:	e063      	b.n	800436c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6818      	ldr	r0, [r3, #0]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	6899      	ldr	r1, [r3, #8]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f000 fbe2 	bl	8004a7c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042c6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	609a      	str	r2, [r3, #8]
      break;
 80042d0:	e04c      	b.n	800436c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6818      	ldr	r0, [r3, #0]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	6899      	ldr	r1, [r3, #8]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f000 fbcb 	bl	8004a7c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042f4:	609a      	str	r2, [r3, #8]
      break;
 80042f6:	e039      	b.n	800436c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6818      	ldr	r0, [r3, #0]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	6859      	ldr	r1, [r3, #4]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	461a      	mov	r2, r3
 8004306:	f000 fb3f 	bl	8004988 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2150      	movs	r1, #80	; 0x50
 8004310:	4618      	mov	r0, r3
 8004312:	f000 fb98 	bl	8004a46 <TIM_ITRx_SetConfig>
      break;
 8004316:	e029      	b.n	800436c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6818      	ldr	r0, [r3, #0]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	6859      	ldr	r1, [r3, #4]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	461a      	mov	r2, r3
 8004326:	f000 fb5e 	bl	80049e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2160      	movs	r1, #96	; 0x60
 8004330:	4618      	mov	r0, r3
 8004332:	f000 fb88 	bl	8004a46 <TIM_ITRx_SetConfig>
      break;
 8004336:	e019      	b.n	800436c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6818      	ldr	r0, [r3, #0]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	6859      	ldr	r1, [r3, #4]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	461a      	mov	r2, r3
 8004346:	f000 fb1f 	bl	8004988 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2140      	movs	r1, #64	; 0x40
 8004350:	4618      	mov	r0, r3
 8004352:	f000 fb78 	bl	8004a46 <TIM_ITRx_SetConfig>
      break;
 8004356:	e009      	b.n	800436c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4619      	mov	r1, r3
 8004362:	4610      	mov	r0, r2
 8004364:	f000 fb6f 	bl	8004a46 <TIM_ITRx_SetConfig>
      break;
 8004368:	e000      	b.n	800436c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800436a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	fffeff88 	.word	0xfffeff88

0800438c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a40      	ldr	r2, [pc, #256]	; (80044a0 <TIM_Base_SetConfig+0x114>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d013      	beq.n	80043cc <TIM_Base_SetConfig+0x40>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043aa:	d00f      	beq.n	80043cc <TIM_Base_SetConfig+0x40>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a3d      	ldr	r2, [pc, #244]	; (80044a4 <TIM_Base_SetConfig+0x118>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d00b      	beq.n	80043cc <TIM_Base_SetConfig+0x40>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a3c      	ldr	r2, [pc, #240]	; (80044a8 <TIM_Base_SetConfig+0x11c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d007      	beq.n	80043cc <TIM_Base_SetConfig+0x40>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a3b      	ldr	r2, [pc, #236]	; (80044ac <TIM_Base_SetConfig+0x120>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d003      	beq.n	80043cc <TIM_Base_SetConfig+0x40>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a3a      	ldr	r2, [pc, #232]	; (80044b0 <TIM_Base_SetConfig+0x124>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d108      	bne.n	80043de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	4313      	orrs	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a2f      	ldr	r2, [pc, #188]	; (80044a0 <TIM_Base_SetConfig+0x114>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d02b      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ec:	d027      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a2c      	ldr	r2, [pc, #176]	; (80044a4 <TIM_Base_SetConfig+0x118>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d023      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a2b      	ldr	r2, [pc, #172]	; (80044a8 <TIM_Base_SetConfig+0x11c>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d01f      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a2a      	ldr	r2, [pc, #168]	; (80044ac <TIM_Base_SetConfig+0x120>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d01b      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a29      	ldr	r2, [pc, #164]	; (80044b0 <TIM_Base_SetConfig+0x124>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d017      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a28      	ldr	r2, [pc, #160]	; (80044b4 <TIM_Base_SetConfig+0x128>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d013      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a27      	ldr	r2, [pc, #156]	; (80044b8 <TIM_Base_SetConfig+0x12c>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d00f      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a26      	ldr	r2, [pc, #152]	; (80044bc <TIM_Base_SetConfig+0x130>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d00b      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a25      	ldr	r2, [pc, #148]	; (80044c0 <TIM_Base_SetConfig+0x134>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d007      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a24      	ldr	r2, [pc, #144]	; (80044c4 <TIM_Base_SetConfig+0x138>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d003      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a23      	ldr	r2, [pc, #140]	; (80044c8 <TIM_Base_SetConfig+0x13c>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d108      	bne.n	8004450 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	4313      	orrs	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	4313      	orrs	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a0a      	ldr	r2, [pc, #40]	; (80044a0 <TIM_Base_SetConfig+0x114>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d003      	beq.n	8004484 <TIM_Base_SetConfig+0xf8>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a0c      	ldr	r2, [pc, #48]	; (80044b0 <TIM_Base_SetConfig+0x124>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d103      	bne.n	800448c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	691a      	ldr	r2, [r3, #16]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	615a      	str	r2, [r3, #20]
}
 8004492:	bf00      	nop
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	40010000 	.word	0x40010000
 80044a4:	40000400 	.word	0x40000400
 80044a8:	40000800 	.word	0x40000800
 80044ac:	40000c00 	.word	0x40000c00
 80044b0:	40010400 	.word	0x40010400
 80044b4:	40014000 	.word	0x40014000
 80044b8:	40014400 	.word	0x40014400
 80044bc:	40014800 	.word	0x40014800
 80044c0:	40001800 	.word	0x40001800
 80044c4:	40001c00 	.word	0x40001c00
 80044c8:	40002000 	.word	0x40002000

080044cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	f023 0201 	bic.w	r2, r3, #1
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4b2b      	ldr	r3, [pc, #172]	; (80045a4 <TIM_OC1_SetConfig+0xd8>)
 80044f8:	4013      	ands	r3, r2
 80044fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 0303 	bic.w	r3, r3, #3
 8004502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	4313      	orrs	r3, r2
 800450c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f023 0302 	bic.w	r3, r3, #2
 8004514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	4313      	orrs	r3, r2
 800451e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a21      	ldr	r2, [pc, #132]	; (80045a8 <TIM_OC1_SetConfig+0xdc>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d003      	beq.n	8004530 <TIM_OC1_SetConfig+0x64>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a20      	ldr	r2, [pc, #128]	; (80045ac <TIM_OC1_SetConfig+0xe0>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d10c      	bne.n	800454a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	f023 0308 	bic.w	r3, r3, #8
 8004536:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	4313      	orrs	r3, r2
 8004540:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f023 0304 	bic.w	r3, r3, #4
 8004548:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a16      	ldr	r2, [pc, #88]	; (80045a8 <TIM_OC1_SetConfig+0xdc>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d003      	beq.n	800455a <TIM_OC1_SetConfig+0x8e>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a15      	ldr	r2, [pc, #84]	; (80045ac <TIM_OC1_SetConfig+0xe0>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d111      	bne.n	800457e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	4313      	orrs	r3, r2
 8004572:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	4313      	orrs	r3, r2
 800457c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	621a      	str	r2, [r3, #32]
}
 8004598:	bf00      	nop
 800459a:	371c      	adds	r7, #28
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	fffeff8f 	.word	0xfffeff8f
 80045a8:	40010000 	.word	0x40010000
 80045ac:	40010400 	.word	0x40010400

080045b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b087      	sub	sp, #28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	f023 0210 	bic.w	r2, r3, #16
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	4b2e      	ldr	r3, [pc, #184]	; (8004694 <TIM_OC2_SetConfig+0xe4>)
 80045dc:	4013      	ands	r3, r2
 80045de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	021b      	lsls	r3, r3, #8
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f023 0320 	bic.w	r3, r3, #32
 80045fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	4313      	orrs	r3, r2
 8004606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a23      	ldr	r2, [pc, #140]	; (8004698 <TIM_OC2_SetConfig+0xe8>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d003      	beq.n	8004618 <TIM_OC2_SetConfig+0x68>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a22      	ldr	r2, [pc, #136]	; (800469c <TIM_OC2_SetConfig+0xec>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d10d      	bne.n	8004634 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800461e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	011b      	lsls	r3, r3, #4
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	4313      	orrs	r3, r2
 800462a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004632:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a18      	ldr	r2, [pc, #96]	; (8004698 <TIM_OC2_SetConfig+0xe8>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d003      	beq.n	8004644 <TIM_OC2_SetConfig+0x94>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a17      	ldr	r2, [pc, #92]	; (800469c <TIM_OC2_SetConfig+0xec>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d113      	bne.n	800466c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800464a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004652:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	4313      	orrs	r3, r2
 800465e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	4313      	orrs	r3, r2
 800466a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	621a      	str	r2, [r3, #32]
}
 8004686:	bf00      	nop
 8004688:	371c      	adds	r7, #28
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	feff8fff 	.word	0xfeff8fff
 8004698:	40010000 	.word	0x40010000
 800469c:	40010400 	.word	0x40010400

080046a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	4b2d      	ldr	r3, [pc, #180]	; (8004780 <TIM_OC3_SetConfig+0xe0>)
 80046cc:	4013      	ands	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f023 0303 	bic.w	r3, r3, #3
 80046d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	4313      	orrs	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	021b      	lsls	r3, r3, #8
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a22      	ldr	r2, [pc, #136]	; (8004784 <TIM_OC3_SetConfig+0xe4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d003      	beq.n	8004706 <TIM_OC3_SetConfig+0x66>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a21      	ldr	r2, [pc, #132]	; (8004788 <TIM_OC3_SetConfig+0xe8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d10d      	bne.n	8004722 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800470c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	021b      	lsls	r3, r3, #8
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	4313      	orrs	r3, r2
 8004718:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004720:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a17      	ldr	r2, [pc, #92]	; (8004784 <TIM_OC3_SetConfig+0xe4>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d003      	beq.n	8004732 <TIM_OC3_SetConfig+0x92>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a16      	ldr	r2, [pc, #88]	; (8004788 <TIM_OC3_SetConfig+0xe8>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d113      	bne.n	800475a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004738:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004740:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	4313      	orrs	r3, r2
 800474c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	011b      	lsls	r3, r3, #4
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	4313      	orrs	r3, r2
 8004758:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	621a      	str	r2, [r3, #32]
}
 8004774:	bf00      	nop
 8004776:	371c      	adds	r7, #28
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	fffeff8f 	.word	0xfffeff8f
 8004784:	40010000 	.word	0x40010000
 8004788:	40010400 	.word	0x40010400

0800478c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800478c:	b480      	push	{r7}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	4b1e      	ldr	r3, [pc, #120]	; (8004830 <TIM_OC4_SetConfig+0xa4>)
 80047b8:	4013      	ands	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	021b      	lsls	r3, r3, #8
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	031b      	lsls	r3, r3, #12
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a13      	ldr	r2, [pc, #76]	; (8004834 <TIM_OC4_SetConfig+0xa8>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d003      	beq.n	80047f4 <TIM_OC4_SetConfig+0x68>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a12      	ldr	r2, [pc, #72]	; (8004838 <TIM_OC4_SetConfig+0xac>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d109      	bne.n	8004808 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	019b      	lsls	r3, r3, #6
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	4313      	orrs	r3, r2
 8004806:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	621a      	str	r2, [r3, #32]
}
 8004822:	bf00      	nop
 8004824:	371c      	adds	r7, #28
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	feff8fff 	.word	0xfeff8fff
 8004834:	40010000 	.word	0x40010000
 8004838:	40010400 	.word	0x40010400

0800483c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800483c:	b480      	push	{r7}
 800483e:	b087      	sub	sp, #28
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	4b1b      	ldr	r3, [pc, #108]	; (80048d4 <TIM_OC5_SetConfig+0x98>)
 8004868:	4013      	ands	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	4313      	orrs	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800487c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	041b      	lsls	r3, r3, #16
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	4313      	orrs	r3, r2
 8004888:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a12      	ldr	r2, [pc, #72]	; (80048d8 <TIM_OC5_SetConfig+0x9c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d003      	beq.n	800489a <TIM_OC5_SetConfig+0x5e>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a11      	ldr	r2, [pc, #68]	; (80048dc <TIM_OC5_SetConfig+0xa0>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d109      	bne.n	80048ae <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	021b      	lsls	r3, r3, #8
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	621a      	str	r2, [r3, #32]
}
 80048c8:	bf00      	nop
 80048ca:	371c      	adds	r7, #28
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr
 80048d4:	fffeff8f 	.word	0xfffeff8f
 80048d8:	40010000 	.word	0x40010000
 80048dc:	40010400 	.word	0x40010400

080048e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	4b1c      	ldr	r3, [pc, #112]	; (800497c <TIM_OC6_SetConfig+0x9c>)
 800490c:	4013      	ands	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	021b      	lsls	r3, r3, #8
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	4313      	orrs	r3, r2
 800491a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004922:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	051b      	lsls	r3, r3, #20
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	4313      	orrs	r3, r2
 800492e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a13      	ldr	r2, [pc, #76]	; (8004980 <TIM_OC6_SetConfig+0xa0>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d003      	beq.n	8004940 <TIM_OC6_SetConfig+0x60>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a12      	ldr	r2, [pc, #72]	; (8004984 <TIM_OC6_SetConfig+0xa4>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d109      	bne.n	8004954 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004946:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	029b      	lsls	r3, r3, #10
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	4313      	orrs	r3, r2
 8004952:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	621a      	str	r2, [r3, #32]
}
 800496e:	bf00      	nop
 8004970:	371c      	adds	r7, #28
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	feff8fff 	.word	0xfeff8fff
 8004980:	40010000 	.word	0x40010000
 8004984:	40010400 	.word	0x40010400

08004988 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	f023 0201 	bic.w	r2, r3, #1
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f023 030a 	bic.w	r3, r3, #10
 80049c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	621a      	str	r2, [r3, #32]
}
 80049da:	bf00      	nop
 80049dc:	371c      	adds	r7, #28
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b087      	sub	sp, #28
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	60f8      	str	r0, [r7, #12]
 80049ee:	60b9      	str	r1, [r7, #8]
 80049f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	f023 0210 	bic.w	r2, r3, #16
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	031b      	lsls	r3, r3, #12
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	621a      	str	r2, [r3, #32]
}
 8004a3a:	bf00      	nop
 8004a3c:	371c      	adds	r7, #28
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b085      	sub	sp, #20
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
 8004a4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	f043 0307 	orr.w	r3, r3, #7
 8004a68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	609a      	str	r2, [r3, #8]
}
 8004a70:	bf00      	nop
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
 8004a88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	021a      	lsls	r2, r3, #8
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	609a      	str	r2, [r3, #8]
}
 8004ab0:	bf00      	nop
 8004ab2:	371c      	adds	r7, #28
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e06d      	b.n	8004bb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a30      	ldr	r2, [pc, #192]	; (8004bbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d004      	beq.n	8004b08 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a2f      	ldr	r2, [pc, #188]	; (8004bc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d108      	bne.n	8004b1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a20      	ldr	r2, [pc, #128]	; (8004bbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d022      	beq.n	8004b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b46:	d01d      	beq.n	8004b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a1d      	ldr	r2, [pc, #116]	; (8004bc4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d018      	beq.n	8004b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a1c      	ldr	r2, [pc, #112]	; (8004bc8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d013      	beq.n	8004b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a1a      	ldr	r2, [pc, #104]	; (8004bcc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d00e      	beq.n	8004b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a15      	ldr	r2, [pc, #84]	; (8004bc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d009      	beq.n	8004b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a16      	ldr	r2, [pc, #88]	; (8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d004      	beq.n	8004b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a15      	ldr	r2, [pc, #84]	; (8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d10c      	bne.n	8004b9e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	40010000 	.word	0x40010000
 8004bc0:	40010400 	.word	0x40010400
 8004bc4:	40000400 	.word	0x40000400
 8004bc8:	40000800 	.word	0x40000800
 8004bcc:	40000c00 	.word	0x40000c00
 8004bd0:	40014000 	.word	0x40014000
 8004bd4:	40001800 	.word	0x40001800

08004bd8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d101      	bne.n	8004bf4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	e065      	b.n	8004cc0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	041b      	lsls	r3, r3, #16
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a16      	ldr	r2, [pc, #88]	; (8004ccc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d004      	beq.n	8004c82 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a14      	ldr	r2, [pc, #80]	; (8004cd0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d115      	bne.n	8004cae <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8c:	051b      	lsls	r3, r3, #20
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	69db      	ldr	r3, [r3, #28]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	40010000 	.word	0x40010000
 8004cd0:	40010400 	.word	0x40010400

08004cd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e040      	b.n	8004d68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d106      	bne.n	8004cfc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7fc fd12 	bl	8001720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2224      	movs	r2, #36	; 0x24
 8004d00:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 0201 	bic.w	r2, r2, #1
 8004d10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 fab0 	bl	8005278 <UART_SetConfig>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d101      	bne.n	8004d22 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e022      	b.n	8004d68 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 fd4e 	bl	80057cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689a      	ldr	r2, [r3, #8]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 fdd5 	bl	8005910 <UART_CheckIdleState>
 8004d66:	4603      	mov	r3, r0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b08a      	sub	sp, #40	; 0x28
 8004d74:	af02      	add	r7, sp, #8
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	603b      	str	r3, [r7, #0]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d84:	2b20      	cmp	r3, #32
 8004d86:	d17f      	bne.n	8004e88 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d002      	beq.n	8004d94 <HAL_UART_Transmit+0x24>
 8004d8e:	88fb      	ldrh	r3, [r7, #6]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e078      	b.n	8004e8a <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d101      	bne.n	8004da6 <HAL_UART_Transmit+0x36>
 8004da2:	2302      	movs	r3, #2
 8004da4:	e071      	b.n	8004e8a <HAL_UART_Transmit+0x11a>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2221      	movs	r2, #33	; 0x21
 8004db8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004dba:	f7fc fe01 	bl	80019c0 <HAL_GetTick>
 8004dbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	88fa      	ldrh	r2, [r7, #6]
 8004dc4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	88fa      	ldrh	r2, [r7, #6]
 8004dcc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd8:	d108      	bne.n	8004dec <HAL_UART_Transmit+0x7c>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d104      	bne.n	8004dec <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8004de2:	2300      	movs	r3, #0
 8004de4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	61bb      	str	r3, [r7, #24]
 8004dea:	e003      	b.n	8004df4 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004df0:	2300      	movs	r3, #0
 8004df2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004dfc:	e02c      	b.n	8004e58 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2200      	movs	r2, #0
 8004e06:	2180      	movs	r1, #128	; 0x80
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 fdc6 	bl	800599a <UART_WaitOnFlagUntilTimeout>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d001      	beq.n	8004e18 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e038      	b.n	8004e8a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10b      	bne.n	8004e36 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	461a      	mov	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e2c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	3302      	adds	r3, #2
 8004e32:	61bb      	str	r3, [r7, #24]
 8004e34:	e007      	b.n	8004e46 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	781a      	ldrb	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	3301      	adds	r3, #1
 8004e44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1cc      	bne.n	8004dfe <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2140      	movs	r1, #64	; 0x40
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 fd93 	bl	800599a <UART_WaitOnFlagUntilTimeout>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e005      	b.n	8004e8a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2220      	movs	r2, #32
 8004e82:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004e84:	2300      	movs	r3, #0
 8004e86:	e000      	b.n	8004e8a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8004e88:	2302      	movs	r3, #2
  }
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3720      	adds	r7, #32
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
	...

08004e94 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ea6:	2b20      	cmp	r3, #32
 8004ea8:	d16c      	bne.n	8004f84 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <HAL_UART_Receive_DMA+0x22>
 8004eb0:	88fb      	ldrh	r3, [r7, #6]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e065      	b.n	8004f86 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d101      	bne.n	8004ec8 <HAL_UART_Receive_DMA+0x34>
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	e05e      	b.n	8004f86 <HAL_UART_Receive_DMA+0xf2>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	88fa      	ldrh	r2, [r7, #6]
 8004eda:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2222      	movs	r2, #34	; 0x22
 8004ee8:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d02a      	beq.n	8004f48 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ef6:	4a26      	ldr	r2, [pc, #152]	; (8004f90 <HAL_UART_Receive_DMA+0xfc>)
 8004ef8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004efe:	4a25      	ldr	r2, [pc, #148]	; (8004f94 <HAL_UART_Receive_DMA+0x100>)
 8004f00:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f06:	4a24      	ldr	r2, [pc, #144]	; (8004f98 <HAL_UART_Receive_DMA+0x104>)
 8004f08:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f0e:	2200      	movs	r2, #0
 8004f10:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	3324      	adds	r3, #36	; 0x24
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f22:	461a      	mov	r2, r3
 8004f24:	88fb      	ldrh	r3, [r7, #6]
 8004f26:	f7fc ff39 	bl	8001d9c <HAL_DMA_Start_IT>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00b      	beq.n	8004f48 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2210      	movs	r2, #16
 8004f34:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2220      	movs	r2, #32
 8004f42:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e01e      	b.n	8004f86 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f5e:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689a      	ldr	r2, [r3, #8]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0201 	orr.w	r2, r2, #1
 8004f6e:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689a      	ldr	r2, [r3, #8]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f7e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8004f80:	2300      	movs	r3, #0
 8004f82:	e000      	b.n	8004f86 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8004f84:	2302      	movs	r3, #2
  }
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	08005afb 	.word	0x08005afb
 8004f94:	08005b5f 	.word	0x08005b5f
 8004f98:	08005b7b 	.word	0x08005b7b

08004f9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b088      	sub	sp, #32
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004fbc:	69fa      	ldr	r2, [r7, #28]
 8004fbe:	f640 030f 	movw	r3, #2063	; 0x80f
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d113      	bne.n	8004ff4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	f003 0320 	and.w	r3, r3, #32
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00e      	beq.n	8004ff4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	f003 0320 	and.w	r3, r3, #32
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d009      	beq.n	8004ff4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 8114 	beq.w	8005212 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	4798      	blx	r3
      }
      return;
 8004ff2:	e10e      	b.n	8005212 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f000 80d6 	beq.w	80051a8 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	d105      	bne.n	8005012 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800500c:	2b00      	cmp	r3, #0
 800500e:	f000 80cb 	beq.w	80051a8 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00e      	beq.n	800503a <HAL_UART_IRQHandler+0x9e>
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005022:	2b00      	cmp	r3, #0
 8005024:	d009      	beq.n	800503a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2201      	movs	r2, #1
 800502c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005032:	f043 0201 	orr.w	r2, r3, #1
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00e      	beq.n	8005062 <HAL_UART_IRQHandler+0xc6>
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b00      	cmp	r3, #0
 800504c:	d009      	beq.n	8005062 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2202      	movs	r2, #2
 8005054:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800505a:	f043 0204 	orr.w	r2, r3, #4
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00e      	beq.n	800508a <HAL_UART_IRQHandler+0xee>
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	2b00      	cmp	r3, #0
 8005074:	d009      	beq.n	800508a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2204      	movs	r2, #4
 800507c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005082:	f043 0202 	orr.w	r2, r3, #2
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	f003 0308 	and.w	r3, r3, #8
 8005090:	2b00      	cmp	r3, #0
 8005092:	d013      	beq.n	80050bc <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	f003 0320 	and.w	r3, r3, #32
 800509a:	2b00      	cmp	r3, #0
 800509c:	d104      	bne.n	80050a8 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d009      	beq.n	80050bc <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2208      	movs	r2, #8
 80050ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050b4:	f043 0208 	orr.w	r2, r3, #8
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00f      	beq.n	80050e6 <HAL_UART_IRQHandler+0x14a>
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00a      	beq.n	80050e6 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050de:	f043 0220 	orr.w	r2, r3, #32
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f000 8093 	beq.w	8005216 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	f003 0320 	and.w	r3, r3, #32
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00c      	beq.n	8005114 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	f003 0320 	and.w	r3, r3, #32
 8005100:	2b00      	cmp	r3, #0
 8005102:	d007      	beq.n	8005114 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005108:	2b00      	cmp	r3, #0
 800510a:	d003      	beq.n	8005114 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005118:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005124:	2b40      	cmp	r3, #64	; 0x40
 8005126:	d004      	beq.n	8005132 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800512e:	2b00      	cmp	r3, #0
 8005130:	d031      	beq.n	8005196 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 fcc1 	bl	8005aba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005142:	2b40      	cmp	r3, #64	; 0x40
 8005144:	d123      	bne.n	800518e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005154:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800515a:	2b00      	cmp	r3, #0
 800515c:	d013      	beq.n	8005186 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005162:	4a30      	ldr	r2, [pc, #192]	; (8005224 <HAL_UART_IRQHandler+0x288>)
 8005164:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800516a:	4618      	mov	r0, r3
 800516c:	f7fc fe76 	bl	8001e5c <HAL_DMA_Abort_IT>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d016      	beq.n	80051a4 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800517a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005180:	4610      	mov	r0, r2
 8005182:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005184:	e00e      	b.n	80051a4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f862 	bl	8005250 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800518c:	e00a      	b.n	80051a4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f85e 	bl	8005250 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005194:	e006      	b.n	80051a4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f85a 	bl	8005250 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80051a2:	e038      	b.n	8005216 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a4:	bf00      	nop
    return;
 80051a6:	e036      	b.n	8005216 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00d      	beq.n	80051ce <HAL_UART_IRQHandler+0x232>
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d008      	beq.n	80051ce <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80051c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f84c 	bl	8005264 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80051cc:	e026      	b.n	800521c <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00d      	beq.n	80051f4 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d008      	beq.n	80051f4 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d017      	beq.n	800521a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	4798      	blx	r3
    }
    return;
 80051f2:	e012      	b.n	800521a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00e      	beq.n	800521c <HAL_UART_IRQHandler+0x280>
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005204:	2b00      	cmp	r3, #0
 8005206:	d009      	beq.n	800521c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 fd08 	bl	8005c1e <UART_EndTransmit_IT>
    return;
 800520e:	bf00      	nop
 8005210:	e004      	b.n	800521c <HAL_UART_IRQHandler+0x280>
      return;
 8005212:	bf00      	nop
 8005214:	e002      	b.n	800521c <HAL_UART_IRQHandler+0x280>
    return;
 8005216:	bf00      	nop
 8005218:	e000      	b.n	800521c <HAL_UART_IRQHandler+0x280>
    return;
 800521a:	bf00      	nop
  }

}
 800521c:	3720      	adds	r7, #32
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	08005bf3 	.word	0x08005bf3

08005228 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005280:	2300      	movs	r3, #0
 8005282:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005284:	2300      	movs	r3, #0
 8005286:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	431a      	orrs	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	69db      	ldr	r3, [r3, #28]
 800529c:	4313      	orrs	r3, r2
 800529e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	4bb1      	ldr	r3, [pc, #708]	; (800556c <UART_SetConfig+0x2f4>)
 80052a8:	4013      	ands	r3, r2
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	6812      	ldr	r2, [r2, #0]
 80052ae:	6939      	ldr	r1, [r7, #16]
 80052b0:	430b      	orrs	r3, r1
 80052b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68da      	ldr	r2, [r3, #12]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a9f      	ldr	r2, [pc, #636]	; (8005570 <UART_SetConfig+0x2f8>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d121      	bne.n	800533c <UART_SetConfig+0xc4>
 80052f8:	4b9e      	ldr	r3, [pc, #632]	; (8005574 <UART_SetConfig+0x2fc>)
 80052fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052fe:	f003 0303 	and.w	r3, r3, #3
 8005302:	2b03      	cmp	r3, #3
 8005304:	d816      	bhi.n	8005334 <UART_SetConfig+0xbc>
 8005306:	a201      	add	r2, pc, #4	; (adr r2, 800530c <UART_SetConfig+0x94>)
 8005308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530c:	0800531d 	.word	0x0800531d
 8005310:	08005329 	.word	0x08005329
 8005314:	08005323 	.word	0x08005323
 8005318:	0800532f 	.word	0x0800532f
 800531c:	2301      	movs	r3, #1
 800531e:	77fb      	strb	r3, [r7, #31]
 8005320:	e151      	b.n	80055c6 <UART_SetConfig+0x34e>
 8005322:	2302      	movs	r3, #2
 8005324:	77fb      	strb	r3, [r7, #31]
 8005326:	e14e      	b.n	80055c6 <UART_SetConfig+0x34e>
 8005328:	2304      	movs	r3, #4
 800532a:	77fb      	strb	r3, [r7, #31]
 800532c:	e14b      	b.n	80055c6 <UART_SetConfig+0x34e>
 800532e:	2308      	movs	r3, #8
 8005330:	77fb      	strb	r3, [r7, #31]
 8005332:	e148      	b.n	80055c6 <UART_SetConfig+0x34e>
 8005334:	2310      	movs	r3, #16
 8005336:	77fb      	strb	r3, [r7, #31]
 8005338:	bf00      	nop
 800533a:	e144      	b.n	80055c6 <UART_SetConfig+0x34e>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a8d      	ldr	r2, [pc, #564]	; (8005578 <UART_SetConfig+0x300>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d134      	bne.n	80053b0 <UART_SetConfig+0x138>
 8005346:	4b8b      	ldr	r3, [pc, #556]	; (8005574 <UART_SetConfig+0x2fc>)
 8005348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800534c:	f003 030c 	and.w	r3, r3, #12
 8005350:	2b0c      	cmp	r3, #12
 8005352:	d829      	bhi.n	80053a8 <UART_SetConfig+0x130>
 8005354:	a201      	add	r2, pc, #4	; (adr r2, 800535c <UART_SetConfig+0xe4>)
 8005356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800535a:	bf00      	nop
 800535c:	08005391 	.word	0x08005391
 8005360:	080053a9 	.word	0x080053a9
 8005364:	080053a9 	.word	0x080053a9
 8005368:	080053a9 	.word	0x080053a9
 800536c:	0800539d 	.word	0x0800539d
 8005370:	080053a9 	.word	0x080053a9
 8005374:	080053a9 	.word	0x080053a9
 8005378:	080053a9 	.word	0x080053a9
 800537c:	08005397 	.word	0x08005397
 8005380:	080053a9 	.word	0x080053a9
 8005384:	080053a9 	.word	0x080053a9
 8005388:	080053a9 	.word	0x080053a9
 800538c:	080053a3 	.word	0x080053a3
 8005390:	2300      	movs	r3, #0
 8005392:	77fb      	strb	r3, [r7, #31]
 8005394:	e117      	b.n	80055c6 <UART_SetConfig+0x34e>
 8005396:	2302      	movs	r3, #2
 8005398:	77fb      	strb	r3, [r7, #31]
 800539a:	e114      	b.n	80055c6 <UART_SetConfig+0x34e>
 800539c:	2304      	movs	r3, #4
 800539e:	77fb      	strb	r3, [r7, #31]
 80053a0:	e111      	b.n	80055c6 <UART_SetConfig+0x34e>
 80053a2:	2308      	movs	r3, #8
 80053a4:	77fb      	strb	r3, [r7, #31]
 80053a6:	e10e      	b.n	80055c6 <UART_SetConfig+0x34e>
 80053a8:	2310      	movs	r3, #16
 80053aa:	77fb      	strb	r3, [r7, #31]
 80053ac:	bf00      	nop
 80053ae:	e10a      	b.n	80055c6 <UART_SetConfig+0x34e>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a71      	ldr	r2, [pc, #452]	; (800557c <UART_SetConfig+0x304>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d120      	bne.n	80053fc <UART_SetConfig+0x184>
 80053ba:	4b6e      	ldr	r3, [pc, #440]	; (8005574 <UART_SetConfig+0x2fc>)
 80053bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80053c4:	2b10      	cmp	r3, #16
 80053c6:	d00f      	beq.n	80053e8 <UART_SetConfig+0x170>
 80053c8:	2b10      	cmp	r3, #16
 80053ca:	d802      	bhi.n	80053d2 <UART_SetConfig+0x15a>
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d005      	beq.n	80053dc <UART_SetConfig+0x164>
 80053d0:	e010      	b.n	80053f4 <UART_SetConfig+0x17c>
 80053d2:	2b20      	cmp	r3, #32
 80053d4:	d005      	beq.n	80053e2 <UART_SetConfig+0x16a>
 80053d6:	2b30      	cmp	r3, #48	; 0x30
 80053d8:	d009      	beq.n	80053ee <UART_SetConfig+0x176>
 80053da:	e00b      	b.n	80053f4 <UART_SetConfig+0x17c>
 80053dc:	2300      	movs	r3, #0
 80053de:	77fb      	strb	r3, [r7, #31]
 80053e0:	e0f1      	b.n	80055c6 <UART_SetConfig+0x34e>
 80053e2:	2302      	movs	r3, #2
 80053e4:	77fb      	strb	r3, [r7, #31]
 80053e6:	e0ee      	b.n	80055c6 <UART_SetConfig+0x34e>
 80053e8:	2304      	movs	r3, #4
 80053ea:	77fb      	strb	r3, [r7, #31]
 80053ec:	e0eb      	b.n	80055c6 <UART_SetConfig+0x34e>
 80053ee:	2308      	movs	r3, #8
 80053f0:	77fb      	strb	r3, [r7, #31]
 80053f2:	e0e8      	b.n	80055c6 <UART_SetConfig+0x34e>
 80053f4:	2310      	movs	r3, #16
 80053f6:	77fb      	strb	r3, [r7, #31]
 80053f8:	bf00      	nop
 80053fa:	e0e4      	b.n	80055c6 <UART_SetConfig+0x34e>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a5f      	ldr	r2, [pc, #380]	; (8005580 <UART_SetConfig+0x308>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d120      	bne.n	8005448 <UART_SetConfig+0x1d0>
 8005406:	4b5b      	ldr	r3, [pc, #364]	; (8005574 <UART_SetConfig+0x2fc>)
 8005408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005410:	2b40      	cmp	r3, #64	; 0x40
 8005412:	d00f      	beq.n	8005434 <UART_SetConfig+0x1bc>
 8005414:	2b40      	cmp	r3, #64	; 0x40
 8005416:	d802      	bhi.n	800541e <UART_SetConfig+0x1a6>
 8005418:	2b00      	cmp	r3, #0
 800541a:	d005      	beq.n	8005428 <UART_SetConfig+0x1b0>
 800541c:	e010      	b.n	8005440 <UART_SetConfig+0x1c8>
 800541e:	2b80      	cmp	r3, #128	; 0x80
 8005420:	d005      	beq.n	800542e <UART_SetConfig+0x1b6>
 8005422:	2bc0      	cmp	r3, #192	; 0xc0
 8005424:	d009      	beq.n	800543a <UART_SetConfig+0x1c2>
 8005426:	e00b      	b.n	8005440 <UART_SetConfig+0x1c8>
 8005428:	2300      	movs	r3, #0
 800542a:	77fb      	strb	r3, [r7, #31]
 800542c:	e0cb      	b.n	80055c6 <UART_SetConfig+0x34e>
 800542e:	2302      	movs	r3, #2
 8005430:	77fb      	strb	r3, [r7, #31]
 8005432:	e0c8      	b.n	80055c6 <UART_SetConfig+0x34e>
 8005434:	2304      	movs	r3, #4
 8005436:	77fb      	strb	r3, [r7, #31]
 8005438:	e0c5      	b.n	80055c6 <UART_SetConfig+0x34e>
 800543a:	2308      	movs	r3, #8
 800543c:	77fb      	strb	r3, [r7, #31]
 800543e:	e0c2      	b.n	80055c6 <UART_SetConfig+0x34e>
 8005440:	2310      	movs	r3, #16
 8005442:	77fb      	strb	r3, [r7, #31]
 8005444:	bf00      	nop
 8005446:	e0be      	b.n	80055c6 <UART_SetConfig+0x34e>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a4d      	ldr	r2, [pc, #308]	; (8005584 <UART_SetConfig+0x30c>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d124      	bne.n	800549c <UART_SetConfig+0x224>
 8005452:	4b48      	ldr	r3, [pc, #288]	; (8005574 <UART_SetConfig+0x2fc>)
 8005454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005458:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800545c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005460:	d012      	beq.n	8005488 <UART_SetConfig+0x210>
 8005462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005466:	d802      	bhi.n	800546e <UART_SetConfig+0x1f6>
 8005468:	2b00      	cmp	r3, #0
 800546a:	d007      	beq.n	800547c <UART_SetConfig+0x204>
 800546c:	e012      	b.n	8005494 <UART_SetConfig+0x21c>
 800546e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005472:	d006      	beq.n	8005482 <UART_SetConfig+0x20a>
 8005474:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005478:	d009      	beq.n	800548e <UART_SetConfig+0x216>
 800547a:	e00b      	b.n	8005494 <UART_SetConfig+0x21c>
 800547c:	2300      	movs	r3, #0
 800547e:	77fb      	strb	r3, [r7, #31]
 8005480:	e0a1      	b.n	80055c6 <UART_SetConfig+0x34e>
 8005482:	2302      	movs	r3, #2
 8005484:	77fb      	strb	r3, [r7, #31]
 8005486:	e09e      	b.n	80055c6 <UART_SetConfig+0x34e>
 8005488:	2304      	movs	r3, #4
 800548a:	77fb      	strb	r3, [r7, #31]
 800548c:	e09b      	b.n	80055c6 <UART_SetConfig+0x34e>
 800548e:	2308      	movs	r3, #8
 8005490:	77fb      	strb	r3, [r7, #31]
 8005492:	e098      	b.n	80055c6 <UART_SetConfig+0x34e>
 8005494:	2310      	movs	r3, #16
 8005496:	77fb      	strb	r3, [r7, #31]
 8005498:	bf00      	nop
 800549a:	e094      	b.n	80055c6 <UART_SetConfig+0x34e>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a39      	ldr	r2, [pc, #228]	; (8005588 <UART_SetConfig+0x310>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d124      	bne.n	80054f0 <UART_SetConfig+0x278>
 80054a6:	4b33      	ldr	r3, [pc, #204]	; (8005574 <UART_SetConfig+0x2fc>)
 80054a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054b4:	d012      	beq.n	80054dc <UART_SetConfig+0x264>
 80054b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ba:	d802      	bhi.n	80054c2 <UART_SetConfig+0x24a>
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d007      	beq.n	80054d0 <UART_SetConfig+0x258>
 80054c0:	e012      	b.n	80054e8 <UART_SetConfig+0x270>
 80054c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054c6:	d006      	beq.n	80054d6 <UART_SetConfig+0x25e>
 80054c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054cc:	d009      	beq.n	80054e2 <UART_SetConfig+0x26a>
 80054ce:	e00b      	b.n	80054e8 <UART_SetConfig+0x270>
 80054d0:	2301      	movs	r3, #1
 80054d2:	77fb      	strb	r3, [r7, #31]
 80054d4:	e077      	b.n	80055c6 <UART_SetConfig+0x34e>
 80054d6:	2302      	movs	r3, #2
 80054d8:	77fb      	strb	r3, [r7, #31]
 80054da:	e074      	b.n	80055c6 <UART_SetConfig+0x34e>
 80054dc:	2304      	movs	r3, #4
 80054de:	77fb      	strb	r3, [r7, #31]
 80054e0:	e071      	b.n	80055c6 <UART_SetConfig+0x34e>
 80054e2:	2308      	movs	r3, #8
 80054e4:	77fb      	strb	r3, [r7, #31]
 80054e6:	e06e      	b.n	80055c6 <UART_SetConfig+0x34e>
 80054e8:	2310      	movs	r3, #16
 80054ea:	77fb      	strb	r3, [r7, #31]
 80054ec:	bf00      	nop
 80054ee:	e06a      	b.n	80055c6 <UART_SetConfig+0x34e>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a25      	ldr	r2, [pc, #148]	; (800558c <UART_SetConfig+0x314>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d124      	bne.n	8005544 <UART_SetConfig+0x2cc>
 80054fa:	4b1e      	ldr	r3, [pc, #120]	; (8005574 <UART_SetConfig+0x2fc>)
 80054fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005500:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005508:	d012      	beq.n	8005530 <UART_SetConfig+0x2b8>
 800550a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800550e:	d802      	bhi.n	8005516 <UART_SetConfig+0x29e>
 8005510:	2b00      	cmp	r3, #0
 8005512:	d007      	beq.n	8005524 <UART_SetConfig+0x2ac>
 8005514:	e012      	b.n	800553c <UART_SetConfig+0x2c4>
 8005516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800551a:	d006      	beq.n	800552a <UART_SetConfig+0x2b2>
 800551c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005520:	d009      	beq.n	8005536 <UART_SetConfig+0x2be>
 8005522:	e00b      	b.n	800553c <UART_SetConfig+0x2c4>
 8005524:	2300      	movs	r3, #0
 8005526:	77fb      	strb	r3, [r7, #31]
 8005528:	e04d      	b.n	80055c6 <UART_SetConfig+0x34e>
 800552a:	2302      	movs	r3, #2
 800552c:	77fb      	strb	r3, [r7, #31]
 800552e:	e04a      	b.n	80055c6 <UART_SetConfig+0x34e>
 8005530:	2304      	movs	r3, #4
 8005532:	77fb      	strb	r3, [r7, #31]
 8005534:	e047      	b.n	80055c6 <UART_SetConfig+0x34e>
 8005536:	2308      	movs	r3, #8
 8005538:	77fb      	strb	r3, [r7, #31]
 800553a:	e044      	b.n	80055c6 <UART_SetConfig+0x34e>
 800553c:	2310      	movs	r3, #16
 800553e:	77fb      	strb	r3, [r7, #31]
 8005540:	bf00      	nop
 8005542:	e040      	b.n	80055c6 <UART_SetConfig+0x34e>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a11      	ldr	r2, [pc, #68]	; (8005590 <UART_SetConfig+0x318>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d139      	bne.n	80055c2 <UART_SetConfig+0x34a>
 800554e:	4b09      	ldr	r3, [pc, #36]	; (8005574 <UART_SetConfig+0x2fc>)
 8005550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005554:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005558:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800555c:	d027      	beq.n	80055ae <UART_SetConfig+0x336>
 800555e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005562:	d817      	bhi.n	8005594 <UART_SetConfig+0x31c>
 8005564:	2b00      	cmp	r3, #0
 8005566:	d01c      	beq.n	80055a2 <UART_SetConfig+0x32a>
 8005568:	e027      	b.n	80055ba <UART_SetConfig+0x342>
 800556a:	bf00      	nop
 800556c:	efff69f3 	.word	0xefff69f3
 8005570:	40011000 	.word	0x40011000
 8005574:	40023800 	.word	0x40023800
 8005578:	40004400 	.word	0x40004400
 800557c:	40004800 	.word	0x40004800
 8005580:	40004c00 	.word	0x40004c00
 8005584:	40005000 	.word	0x40005000
 8005588:	40011400 	.word	0x40011400
 800558c:	40007800 	.word	0x40007800
 8005590:	40007c00 	.word	0x40007c00
 8005594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005598:	d006      	beq.n	80055a8 <UART_SetConfig+0x330>
 800559a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800559e:	d009      	beq.n	80055b4 <UART_SetConfig+0x33c>
 80055a0:	e00b      	b.n	80055ba <UART_SetConfig+0x342>
 80055a2:	2300      	movs	r3, #0
 80055a4:	77fb      	strb	r3, [r7, #31]
 80055a6:	e00e      	b.n	80055c6 <UART_SetConfig+0x34e>
 80055a8:	2302      	movs	r3, #2
 80055aa:	77fb      	strb	r3, [r7, #31]
 80055ac:	e00b      	b.n	80055c6 <UART_SetConfig+0x34e>
 80055ae:	2304      	movs	r3, #4
 80055b0:	77fb      	strb	r3, [r7, #31]
 80055b2:	e008      	b.n	80055c6 <UART_SetConfig+0x34e>
 80055b4:	2308      	movs	r3, #8
 80055b6:	77fb      	strb	r3, [r7, #31]
 80055b8:	e005      	b.n	80055c6 <UART_SetConfig+0x34e>
 80055ba:	2310      	movs	r3, #16
 80055bc:	77fb      	strb	r3, [r7, #31]
 80055be:	bf00      	nop
 80055c0:	e001      	b.n	80055c6 <UART_SetConfig+0x34e>
 80055c2:	2310      	movs	r3, #16
 80055c4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ce:	d17f      	bne.n	80056d0 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80055d0:	7ffb      	ldrb	r3, [r7, #31]
 80055d2:	2b08      	cmp	r3, #8
 80055d4:	d85c      	bhi.n	8005690 <UART_SetConfig+0x418>
 80055d6:	a201      	add	r2, pc, #4	; (adr r2, 80055dc <UART_SetConfig+0x364>)
 80055d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055dc:	08005601 	.word	0x08005601
 80055e0:	08005621 	.word	0x08005621
 80055e4:	08005641 	.word	0x08005641
 80055e8:	08005691 	.word	0x08005691
 80055ec:	08005659 	.word	0x08005659
 80055f0:	08005691 	.word	0x08005691
 80055f4:	08005691 	.word	0x08005691
 80055f8:	08005691 	.word	0x08005691
 80055fc:	08005679 	.word	0x08005679
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005600:	f7fd fd2e 	bl	8003060 <HAL_RCC_GetPCLK1Freq>
 8005604:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	005a      	lsls	r2, r3, #1
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	085b      	lsrs	r3, r3, #1
 8005610:	441a      	add	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	fbb2 f3f3 	udiv	r3, r2, r3
 800561a:	b29b      	uxth	r3, r3
 800561c:	61bb      	str	r3, [r7, #24]
        break;
 800561e:	e03a      	b.n	8005696 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005620:	f7fd fd32 	bl	8003088 <HAL_RCC_GetPCLK2Freq>
 8005624:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	005a      	lsls	r2, r3, #1
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	085b      	lsrs	r3, r3, #1
 8005630:	441a      	add	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	fbb2 f3f3 	udiv	r3, r2, r3
 800563a:	b29b      	uxth	r3, r3
 800563c:	61bb      	str	r3, [r7, #24]
        break;
 800563e:	e02a      	b.n	8005696 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	085a      	lsrs	r2, r3, #1
 8005646:	4b5f      	ldr	r3, [pc, #380]	; (80057c4 <UART_SetConfig+0x54c>)
 8005648:	4413      	add	r3, r2
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	6852      	ldr	r2, [r2, #4]
 800564e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005652:	b29b      	uxth	r3, r3
 8005654:	61bb      	str	r3, [r7, #24]
        break;
 8005656:	e01e      	b.n	8005696 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005658:	f7fd fc1e 	bl	8002e98 <HAL_RCC_GetSysClockFreq>
 800565c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	005a      	lsls	r2, r3, #1
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	085b      	lsrs	r3, r3, #1
 8005668:	441a      	add	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005672:	b29b      	uxth	r3, r3
 8005674:	61bb      	str	r3, [r7, #24]
        break;
 8005676:	e00e      	b.n	8005696 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	085b      	lsrs	r3, r3, #1
 800567e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	fbb2 f3f3 	udiv	r3, r2, r3
 800568a:	b29b      	uxth	r3, r3
 800568c:	61bb      	str	r3, [r7, #24]
        break;
 800568e:	e002      	b.n	8005696 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	75fb      	strb	r3, [r7, #23]
        break;
 8005694:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	2b0f      	cmp	r3, #15
 800569a:	d916      	bls.n	80056ca <UART_SetConfig+0x452>
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056a2:	d212      	bcs.n	80056ca <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	f023 030f 	bic.w	r3, r3, #15
 80056ac:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	085b      	lsrs	r3, r3, #1
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	897b      	ldrh	r3, [r7, #10]
 80056bc:	4313      	orrs	r3, r2
 80056be:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	897a      	ldrh	r2, [r7, #10]
 80056c6:	60da      	str	r2, [r3, #12]
 80056c8:	e070      	b.n	80057ac <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	75fb      	strb	r3, [r7, #23]
 80056ce:	e06d      	b.n	80057ac <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80056d0:	7ffb      	ldrb	r3, [r7, #31]
 80056d2:	2b08      	cmp	r3, #8
 80056d4:	d859      	bhi.n	800578a <UART_SetConfig+0x512>
 80056d6:	a201      	add	r2, pc, #4	; (adr r2, 80056dc <UART_SetConfig+0x464>)
 80056d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056dc:	08005701 	.word	0x08005701
 80056e0:	0800571f 	.word	0x0800571f
 80056e4:	0800573d 	.word	0x0800573d
 80056e8:	0800578b 	.word	0x0800578b
 80056ec:	08005755 	.word	0x08005755
 80056f0:	0800578b 	.word	0x0800578b
 80056f4:	0800578b 	.word	0x0800578b
 80056f8:	0800578b 	.word	0x0800578b
 80056fc:	08005773 	.word	0x08005773
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005700:	f7fd fcae 	bl	8003060 <HAL_RCC_GetPCLK1Freq>
 8005704:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	085a      	lsrs	r2, r3, #1
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	441a      	add	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	fbb2 f3f3 	udiv	r3, r2, r3
 8005718:	b29b      	uxth	r3, r3
 800571a:	61bb      	str	r3, [r7, #24]
        break;
 800571c:	e038      	b.n	8005790 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800571e:	f7fd fcb3 	bl	8003088 <HAL_RCC_GetPCLK2Freq>
 8005722:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	085a      	lsrs	r2, r3, #1
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	441a      	add	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	fbb2 f3f3 	udiv	r3, r2, r3
 8005736:	b29b      	uxth	r3, r3
 8005738:	61bb      	str	r3, [r7, #24]
        break;
 800573a:	e029      	b.n	8005790 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	085a      	lsrs	r2, r3, #1
 8005742:	4b21      	ldr	r3, [pc, #132]	; (80057c8 <UART_SetConfig+0x550>)
 8005744:	4413      	add	r3, r2
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	6852      	ldr	r2, [r2, #4]
 800574a:	fbb3 f3f2 	udiv	r3, r3, r2
 800574e:	b29b      	uxth	r3, r3
 8005750:	61bb      	str	r3, [r7, #24]
        break;
 8005752:	e01d      	b.n	8005790 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005754:	f7fd fba0 	bl	8002e98 <HAL_RCC_GetSysClockFreq>
 8005758:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	085a      	lsrs	r2, r3, #1
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	441a      	add	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	fbb2 f3f3 	udiv	r3, r2, r3
 800576c:	b29b      	uxth	r3, r3
 800576e:	61bb      	str	r3, [r7, #24]
        break;
 8005770:	e00e      	b.n	8005790 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	085b      	lsrs	r3, r3, #1
 8005778:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	fbb2 f3f3 	udiv	r3, r2, r3
 8005784:	b29b      	uxth	r3, r3
 8005786:	61bb      	str	r3, [r7, #24]
        break;
 8005788:	e002      	b.n	8005790 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	75fb      	strb	r3, [r7, #23]
        break;
 800578e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	2b0f      	cmp	r3, #15
 8005794:	d908      	bls.n	80057a8 <UART_SetConfig+0x530>
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800579c:	d204      	bcs.n	80057a8 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	69ba      	ldr	r2, [r7, #24]
 80057a4:	60da      	str	r2, [r3, #12]
 80057a6:	e001      	b.n	80057ac <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80057b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3720      	adds	r7, #32
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	01e84800 	.word	0x01e84800
 80057c8:	00f42400 	.word	0x00f42400

080057cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00a      	beq.n	80057f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00a      	beq.n	8005818 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581c:	f003 0304 	and.w	r3, r3, #4
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00a      	beq.n	800583a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583e:	f003 0308 	and.w	r3, r3, #8
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005860:	f003 0310 	and.w	r3, r3, #16
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00a      	beq.n	800587e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	430a      	orrs	r2, r1
 800587c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	f003 0320 	and.w	r3, r3, #32
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00a      	beq.n	80058a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	430a      	orrs	r2, r1
 800589e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d01a      	beq.n	80058e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058ca:	d10a      	bne.n	80058e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00a      	beq.n	8005904 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	430a      	orrs	r2, r1
 8005902:	605a      	str	r2, [r3, #4]
  }
}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af02      	add	r7, sp, #8
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800591e:	f7fc f84f 	bl	80019c0 <HAL_GetTick>
 8005922:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0308 	and.w	r3, r3, #8
 800592e:	2b08      	cmp	r3, #8
 8005930:	d10e      	bne.n	8005950 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005932:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f82a 	bl	800599a <UART_WaitOnFlagUntilTimeout>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d001      	beq.n	8005950 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e020      	b.n	8005992 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0304 	and.w	r3, r3, #4
 800595a:	2b04      	cmp	r3, #4
 800595c:	d10e      	bne.n	800597c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800595e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 f814 	bl	800599a <UART_WaitOnFlagUntilTimeout>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d001      	beq.n	800597c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e00a      	b.n	8005992 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2220      	movs	r2, #32
 8005980:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2220      	movs	r2, #32
 8005986:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b084      	sub	sp, #16
 800599e:	af00      	add	r7, sp, #0
 80059a0:	60f8      	str	r0, [r7, #12]
 80059a2:	60b9      	str	r1, [r7, #8]
 80059a4:	603b      	str	r3, [r7, #0]
 80059a6:	4613      	mov	r3, r2
 80059a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059aa:	e05d      	b.n	8005a68 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b2:	d059      	beq.n	8005a68 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b4:	f7fc f804 	bl	80019c0 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d302      	bcc.n	80059ca <UART_WaitOnFlagUntilTimeout+0x30>
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d11b      	bne.n	8005a02 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80059d8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689a      	ldr	r2, [r3, #8]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 0201 	bic.w	r2, r2, #1
 80059e8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2220      	movs	r2, #32
 80059ee:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2220      	movs	r2, #32
 80059f4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e042      	b.n	8005a88 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0304 	and.w	r3, r3, #4
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d02b      	beq.n	8005a68 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a1e:	d123      	bne.n	8005a68 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a28:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a38:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	689a      	ldr	r2, [r3, #8]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 0201 	bic.w	r2, r2, #1
 8005a48:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2220      	movs	r2, #32
 8005a54:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e00f      	b.n	8005a88 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	69da      	ldr	r2, [r3, #28]
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	4013      	ands	r3, r2
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	bf0c      	ite	eq
 8005a78:	2301      	moveq	r3, #1
 8005a7a:	2300      	movne	r3, #0
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	461a      	mov	r2, r3
 8005a80:	79fb      	ldrb	r3, [r7, #7]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d092      	beq.n	80059ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005aa6:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005aae:	bf00      	nop
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005aba:	b480      	push	{r7}
 8005abc:	b083      	sub	sp, #12
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ad0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	689a      	ldr	r2, [r3, #8]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f022 0201 	bic.w	r2, r2, #1
 8005ae0:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2220      	movs	r2, #32
 8005ae6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005aee:	bf00      	nop
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b084      	sub	sp, #16
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b06:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	69db      	ldr	r3, [r3, #28]
 8005b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b10:	d01e      	beq.n	8005b50 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b28:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	689a      	ldr	r2, [r3, #8]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 0201 	bic.w	r2, r2, #1
 8005b38:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	689a      	ldr	r2, [r3, #8]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b48:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f7fb f895 	bl	8000c80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b56:	bf00      	nop
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b084      	sub	sp, #16
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f7ff fb65 	bl	800523c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b72:	bf00      	nop
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b086      	sub	sp, #24
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b86:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b8c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b92:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b9e:	2b80      	cmp	r3, #128	; 0x80
 8005ba0:	d109      	bne.n	8005bb6 <UART_DMAError+0x3c>
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	2b21      	cmp	r3, #33	; 0x21
 8005ba6:	d106      	bne.n	8005bb6 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005bb0:	6978      	ldr	r0, [r7, #20]
 8005bb2:	f7ff ff6d 	bl	8005a90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc0:	2b40      	cmp	r3, #64	; 0x40
 8005bc2:	d109      	bne.n	8005bd8 <UART_DMAError+0x5e>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2b22      	cmp	r3, #34	; 0x22
 8005bc8:	d106      	bne.n	8005bd8 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005bd2:	6978      	ldr	r0, [r7, #20]
 8005bd4:	f7ff ff71 	bl	8005aba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bdc:	f043 0210 	orr.w	r2, r3, #16
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005be4:	6978      	ldr	r0, [r7, #20]
 8005be6:	f7ff fb33 	bl	8005250 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bea:	bf00      	nop
 8005bec:	3718      	adds	r7, #24
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b084      	sub	sp, #16
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f7ff fb1d 	bl	8005250 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c16:	bf00      	nop
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b082      	sub	sp, #8
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c34:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f7ff faf0 	bl	8005228 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c48:	bf00      	nop
 8005c4a:	3708      	adds	r7, #8
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <LL_GPIO_SetPinMode>:
{
 8005c50:	b480      	push	{r7}
 8005c52:	b089      	sub	sp, #36	; 0x24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	fa93 f3a3 	rbit	r3, r3
 8005c6a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	fab3 f383 	clz	r3, r3
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	005b      	lsls	r3, r3, #1
 8005c76:	2103      	movs	r1, #3
 8005c78:	fa01 f303 	lsl.w	r3, r1, r3
 8005c7c:	43db      	mvns	r3, r3
 8005c7e:	401a      	ands	r2, r3
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	fa93 f3a3 	rbit	r3, r3
 8005c8a:	61bb      	str	r3, [r7, #24]
  return result;
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	fab3 f383 	clz	r3, r3
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	6879      	ldr	r1, [r7, #4]
 8005c98:	fa01 f303 	lsl.w	r3, r1, r3
 8005c9c:	431a      	orrs	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	601a      	str	r2, [r3, #0]
}
 8005ca2:	bf00      	nop
 8005ca4:	3724      	adds	r7, #36	; 0x24
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <LL_GPIO_SetPinOutputType>:
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b085      	sub	sp, #20
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	60f8      	str	r0, [r7, #12]
 8005cb6:	60b9      	str	r1, [r7, #8]
 8005cb8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	43db      	mvns	r3, r3
 8005cc2:	401a      	ands	r2, r3
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	6879      	ldr	r1, [r7, #4]
 8005cc8:	fb01 f303 	mul.w	r3, r1, r3
 8005ccc:	431a      	orrs	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	605a      	str	r2, [r3, #4]
}
 8005cd2:	bf00      	nop
 8005cd4:	3714      	adds	r7, #20
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <LL_GPIO_SetPinSpeed>:
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b089      	sub	sp, #36	; 0x24
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	60f8      	str	r0, [r7, #12]
 8005ce6:	60b9      	str	r1, [r7, #8]
 8005ce8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	689a      	ldr	r2, [r3, #8]
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	fa93 f3a3 	rbit	r3, r3
 8005cf8:	613b      	str	r3, [r7, #16]
  return result;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	fab3 f383 	clz	r3, r3
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	005b      	lsls	r3, r3, #1
 8005d04:	2103      	movs	r1, #3
 8005d06:	fa01 f303 	lsl.w	r3, r1, r3
 8005d0a:	43db      	mvns	r3, r3
 8005d0c:	401a      	ands	r2, r3
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	fa93 f3a3 	rbit	r3, r3
 8005d18:	61bb      	str	r3, [r7, #24]
  return result;
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	fab3 f383 	clz	r3, r3
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	005b      	lsls	r3, r3, #1
 8005d24:	6879      	ldr	r1, [r7, #4]
 8005d26:	fa01 f303 	lsl.w	r3, r1, r3
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	609a      	str	r2, [r3, #8]
}
 8005d30:	bf00      	nop
 8005d32:	3724      	adds	r7, #36	; 0x24
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <LL_GPIO_SetPinPull>:
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b089      	sub	sp, #36	; 0x24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	68da      	ldr	r2, [r3, #12]
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	fa93 f3a3 	rbit	r3, r3
 8005d56:	613b      	str	r3, [r7, #16]
  return result;
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	fab3 f383 	clz	r3, r3
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	005b      	lsls	r3, r3, #1
 8005d62:	2103      	movs	r1, #3
 8005d64:	fa01 f303 	lsl.w	r3, r1, r3
 8005d68:	43db      	mvns	r3, r3
 8005d6a:	401a      	ands	r2, r3
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	fa93 f3a3 	rbit	r3, r3
 8005d76:	61bb      	str	r3, [r7, #24]
  return result;
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	fab3 f383 	clz	r3, r3
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	005b      	lsls	r3, r3, #1
 8005d82:	6879      	ldr	r1, [r7, #4]
 8005d84:	fa01 f303 	lsl.w	r3, r1, r3
 8005d88:	431a      	orrs	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	60da      	str	r2, [r3, #12]
}
 8005d8e:	bf00      	nop
 8005d90:	3724      	adds	r7, #36	; 0x24
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <LL_GPIO_SetAFPin_0_7>:
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b089      	sub	sp, #36	; 0x24
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	60f8      	str	r0, [r7, #12]
 8005da2:	60b9      	str	r1, [r7, #8]
 8005da4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6a1a      	ldr	r2, [r3, #32]
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	fa93 f3a3 	rbit	r3, r3
 8005db4:	613b      	str	r3, [r7, #16]
  return result;
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	fab3 f383 	clz	r3, r3
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	210f      	movs	r1, #15
 8005dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8005dc6:	43db      	mvns	r3, r3
 8005dc8:	401a      	ands	r2, r3
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	fa93 f3a3 	rbit	r3, r3
 8005dd4:	61bb      	str	r3, [r7, #24]
  return result;
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	fab3 f383 	clz	r3, r3
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	6879      	ldr	r1, [r7, #4]
 8005de2:	fa01 f303 	lsl.w	r3, r1, r3
 8005de6:	431a      	orrs	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	621a      	str	r2, [r3, #32]
}
 8005dec:	bf00      	nop
 8005dee:	3724      	adds	r7, #36	; 0x24
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <LL_GPIO_SetAFPin_8_15>:
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b089      	sub	sp, #36	; 0x24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	0a1b      	lsrs	r3, r3, #8
 8005e0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	fa93 f3a3 	rbit	r3, r3
 8005e14:	613b      	str	r3, [r7, #16]
  return result;
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	fab3 f383 	clz	r3, r3
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	210f      	movs	r1, #15
 8005e22:	fa01 f303 	lsl.w	r3, r1, r3
 8005e26:	43db      	mvns	r3, r3
 8005e28:	401a      	ands	r2, r3
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	0a1b      	lsrs	r3, r3, #8
 8005e2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	fa93 f3a3 	rbit	r3, r3
 8005e36:	61bb      	str	r3, [r7, #24]
  return result;
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	fab3 f383 	clz	r3, r3
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	6879      	ldr	r1, [r7, #4]
 8005e44:	fa01 f303 	lsl.w	r3, r1, r3
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005e4e:	bf00      	nop
 8005e50:	3724      	adds	r7, #36	; 0x24
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b088      	sub	sp, #32
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
 8005e62:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8005e64:	2300      	movs	r3, #0
 8005e66:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	fa93 f3a3 	rbit	r3, r3
 8005e78:	613b      	str	r3, [r7, #16]
  return result;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	fab3 f383 	clz	r3, r3
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005e84:	e051      	b.n	8005f2a <LL_GPIO_Init+0xd0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e92:	4013      	ands	r3, r2
 8005e94:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d043      	beq.n	8005f24 <LL_GPIO_Init+0xca>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d003      	beq.n	8005eac <LL_GPIO_Init+0x52>
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d10e      	bne.n	8005eca <LL_GPIO_Init+0x70>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	69b9      	ldr	r1, [r7, #24]
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f7ff ff12 	bl	8005cde <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	6819      	ldr	r1, [r3, #0]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f7ff fef2 	bl	8005cae <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	69b9      	ldr	r1, [r7, #24]
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f7ff ff32 	bl	8005d3c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d11a      	bne.n	8005f16 <LL_GPIO_Init+0xbc>
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	fa93 f3a3 	rbit	r3, r3
 8005eea:	60bb      	str	r3, [r7, #8]
  return result;
 8005eec:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8005eee:	fab3 f383 	clz	r3, r3
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	2b07      	cmp	r3, #7
 8005ef6:	d807      	bhi.n	8005f08 <LL_GPIO_Init+0xae>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	461a      	mov	r2, r3
 8005efe:	69b9      	ldr	r1, [r7, #24]
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f7ff ff4a 	bl	8005d9a <LL_GPIO_SetAFPin_0_7>
 8005f06:	e006      	b.n	8005f16 <LL_GPIO_Init+0xbc>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	69b9      	ldr	r1, [r7, #24]
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f7ff ff71 	bl	8005df8 <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	69b9      	ldr	r1, [r7, #24]
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7ff fe96 	bl	8005c50 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	3301      	adds	r3, #1
 8005f28:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	fa22 f303 	lsr.w	r3, r2, r3
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1a6      	bne.n	8005e86 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3720      	adds	r7, #32
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <LL_SPI_IsEnabled>:
{
 8005f42:	b480      	push	{r7}
 8005f44:	b083      	sub	sp, #12
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f52:	2b40      	cmp	r3, #64	; 0x40
 8005f54:	d101      	bne.n	8005f5a <LL_SPI_IsEnabled+0x18>
 8005f56:	2301      	movs	r3, #1
 8005f58:	e000      	b.n	8005f5c <LL_SPI_IsEnabled+0x1a>
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <LL_SPI_SetCRCPolynomial>:
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	461a      	mov	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	611a      	str	r2, [r3, #16]
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f7ff ffd3 	bl	8005f42 <LL_SPI_IsEnabled>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d137      	bne.n	8006012 <LL_SPI_Init+0x8a>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	4b20      	ldr	r3, [pc, #128]	; (8006028 <LL_SPI_Init+0xa0>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	6811      	ldr	r1, [r2, #0]
 8005fae:	683a      	ldr	r2, [r7, #0]
 8005fb0:	6852      	ldr	r2, [r2, #4]
 8005fb2:	4311      	orrs	r1, r2
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	68d2      	ldr	r2, [r2, #12]
 8005fb8:	4311      	orrs	r1, r2
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	6912      	ldr	r2, [r2, #16]
 8005fbe:	4311      	orrs	r1, r2
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	6952      	ldr	r2, [r2, #20]
 8005fc4:	4311      	orrs	r1, r2
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	6992      	ldr	r2, [r2, #24]
 8005fca:	4311      	orrs	r1, r2
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	69d2      	ldr	r2, [r2, #28]
 8005fd0:	4311      	orrs	r1, r2
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	6a12      	ldr	r2, [r2, #32]
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	4b12      	ldr	r3, [pc, #72]	; (800602c <LL_SPI_Init+0xa4>)
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	6891      	ldr	r1, [r2, #8]
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	6952      	ldr	r2, [r2, #20]
 8005fee:	0c12      	lsrs	r2, r2, #16
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006000:	d105      	bne.n	800600e <LL_SPI_Init+0x86>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006006:	4619      	mov	r1, r3
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f7ff ffad 	bl	8005f68 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800600e:	2300      	movs	r3, #0
 8006010:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	61da      	str	r2, [r3, #28]
  return status;
 800601e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	ffff0040 	.word	0xffff0040
 800602c:	fffff0fb 	.word	0xfffff0fb

08006030 <__libc_init_array>:
 8006030:	b570      	push	{r4, r5, r6, lr}
 8006032:	4e0d      	ldr	r6, [pc, #52]	; (8006068 <__libc_init_array+0x38>)
 8006034:	4c0d      	ldr	r4, [pc, #52]	; (800606c <__libc_init_array+0x3c>)
 8006036:	1ba4      	subs	r4, r4, r6
 8006038:	10a4      	asrs	r4, r4, #2
 800603a:	2500      	movs	r5, #0
 800603c:	42a5      	cmp	r5, r4
 800603e:	d109      	bne.n	8006054 <__libc_init_array+0x24>
 8006040:	4e0b      	ldr	r6, [pc, #44]	; (8006070 <__libc_init_array+0x40>)
 8006042:	4c0c      	ldr	r4, [pc, #48]	; (8006074 <__libc_init_array+0x44>)
 8006044:	f000 f820 	bl	8006088 <_init>
 8006048:	1ba4      	subs	r4, r4, r6
 800604a:	10a4      	asrs	r4, r4, #2
 800604c:	2500      	movs	r5, #0
 800604e:	42a5      	cmp	r5, r4
 8006050:	d105      	bne.n	800605e <__libc_init_array+0x2e>
 8006052:	bd70      	pop	{r4, r5, r6, pc}
 8006054:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006058:	4798      	blx	r3
 800605a:	3501      	adds	r5, #1
 800605c:	e7ee      	b.n	800603c <__libc_init_array+0xc>
 800605e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006062:	4798      	blx	r3
 8006064:	3501      	adds	r5, #1
 8006066:	e7f2      	b.n	800604e <__libc_init_array+0x1e>
 8006068:	080060c8 	.word	0x080060c8
 800606c:	080060c8 	.word	0x080060c8
 8006070:	080060c8 	.word	0x080060c8
 8006074:	080060cc 	.word	0x080060cc

08006078 <memset>:
 8006078:	4402      	add	r2, r0
 800607a:	4603      	mov	r3, r0
 800607c:	4293      	cmp	r3, r2
 800607e:	d100      	bne.n	8006082 <memset+0xa>
 8006080:	4770      	bx	lr
 8006082:	f803 1b01 	strb.w	r1, [r3], #1
 8006086:	e7f9      	b.n	800607c <memset+0x4>

08006088 <_init>:
 8006088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800608a:	bf00      	nop
 800608c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800608e:	bc08      	pop	{r3}
 8006090:	469e      	mov	lr, r3
 8006092:	4770      	bx	lr

08006094 <_fini>:
 8006094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006096:	bf00      	nop
 8006098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800609a:	bc08      	pop	{r3}
 800609c:	469e      	mov	lr, r3
 800609e:	4770      	bx	lr
