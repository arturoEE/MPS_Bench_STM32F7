
F7Embedded_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e5c  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08006058  08006058  00016058  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062e8  080062e8  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080062e8  080062e8  000162e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062f0  080062f0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062f0  080062f0  000162f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062f4  080062f4  000162f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080062f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0007ca08  20000088  0800637c  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2007ca90  0800637c  0002ca90  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001088e  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000230a  00000000  00000000  00030940  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001060  00000000  00000000  00032c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f48  00000000  00000000  00033cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a138  00000000  00000000  00034bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c704  00000000  00000000  0005ed30  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010aa87  00000000  00000000  0006b434  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00175ebb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046b0  00000000  00000000  00175f38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000088 	.word	0x20000088
 8000214:	00000000 	.word	0x00000000
 8000218:	0800603c 	.word	0x0800603c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000008c 	.word	0x2000008c
 8000234:	0800603c 	.word	0x0800603c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	601a      	str	r2, [r3, #0]
}
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	f023 0210 	bic.w	r2, r3, #16
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	431a      	orrs	r2, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	605a      	str	r2, [r3, #4]
}
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr

0800057e <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 800057e:	b480      	push	{r7}
 8000580:	b083      	sub	sp, #12
 8000582:	af00      	add	r7, sp, #0
 8000584:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	f043 0208 	orr.w	r2, r3, #8
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	605a      	str	r2, [r3, #4]
}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 800059e:	b480      	push	{r7}
 80005a0:	b083      	sub	sp, #12
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	689b      	ldr	r3, [r3, #8]
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d101      	bne.n	80005b6 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80005b2:	2301      	movs	r3, #1
 80005b4:	e000      	b.n	80005b8 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80005b6:	2300      	movs	r3, #0
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	683a      	ldr	r2, [r7, #0]
 80005d2:	619a      	str	r2, [r3, #24]
}
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	041a      	lsls	r2, r3, #16
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	619a      	str	r2, [r3, #24]
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
	...

08000600 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800060a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800060c:	4907      	ldr	r1, [pc, #28]	; (800062c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4313      	orrs	r3, r2
 8000612:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4013      	ands	r3, r2
 800061c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800061e:	68fb      	ldr	r3, [r7, #12]
}
 8000620:	bf00      	nop
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	40023800 	.word	0x40023800

08000630 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000638:	4b08      	ldr	r3, [pc, #32]	; (800065c <LL_APB2_GRP1_EnableClock+0x2c>)
 800063a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800063c:	4907      	ldr	r1, [pc, #28]	; (800065c <LL_APB2_GRP1_EnableClock+0x2c>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4313      	orrs	r3, r2
 8000642:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000644:	4b05      	ldr	r3, [pc, #20]	; (800065c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000646:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4013      	ands	r3, r2
 800064c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800064e:	68fb      	ldr	r3, [r7, #12]
}
 8000650:	bf00      	nop
 8000652:	3714      	adds	r7, #20
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	40023800 	.word	0x40023800

08000660 <adcRead1000>:
    LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_7);
    uint32_t first2 = first;

    return(((first2<<12)+(second)));
}
void adcRead1000(){
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
	uint32_t i;
	for(i = 0; i<samplesize; i++){
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	e049      	b.n	8000700 <adcRead1000+0xa0>
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_7);
 800066c:	2180      	movs	r1, #128	; 0x80
 800066e:	4828      	ldr	r0, [pc, #160]	; (8000710 <adcRead1000+0xb0>)
 8000670:	f7ff ffa8 	bl	80005c4 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	4826      	ldr	r0, [pc, #152]	; (8000710 <adcRead1000+0xb0>)
 8000678:	f7ff ffb2 	bl	80005e0 <LL_GPIO_ResetOutputPin>
		while (LL_SPI_IsActiveFlag_RXNE(SPI1))
 800067c:	e001      	b.n	8000682 <adcRead1000+0x22>
		{
			(void)(uint16_t)(READ_REG(SPI1->DR)); // flush any FIFO content
 800067e:	4b25      	ldr	r3, [pc, #148]	; (8000714 <adcRead1000+0xb4>)
 8000680:	68db      	ldr	r3, [r3, #12]
		while (LL_SPI_IsActiveFlag_RXNE(SPI1))
 8000682:	4824      	ldr	r0, [pc, #144]	; (8000714 <adcRead1000+0xb4>)
 8000684:	f7ff ff8b 	bl	800059e <LL_SPI_IsActiveFlag_RXNE>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d1f7      	bne.n	800067e <adcRead1000+0x1e>
		}
		__IO uint16_t *spidr = ((__IO uint16_t *)&SPI1->DR);
 800068e:	4b22      	ldr	r3, [pc, #136]	; (8000718 <adcRead1000+0xb8>)
 8000690:	60bb      	str	r3, [r7, #8]
		*spidr = 0xFFFF;
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000698:	801a      	strh	r2, [r3, #0]
		uint16_t first = (uint16_t)(READ_REG(SPI1->DR));
 800069a:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <adcRead1000+0xb4>)
 800069c:	68db      	ldr	r3, [r3, #12]
 800069e:	80fb      	strh	r3, [r7, #6]
		*spidr = 0xFFFF;
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006a6:	801a      	strh	r2, [r3, #0]
		uint16_t second = (uint16_t)(READ_REG(SPI1->DR));
 80006a8:	4b1a      	ldr	r3, [pc, #104]	; (8000714 <adcRead1000+0xb4>)
 80006aa:	68db      	ldr	r3, [r3, #12]
 80006ac:	80bb      	strh	r3, [r7, #4]
		uint32_t first2 = first;
 80006ae:	88fb      	ldrh	r3, [r7, #6]
 80006b0:	603b      	str	r3, [r7, #0]
		read_data = ((first2<<12)+(second));
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	031a      	lsls	r2, r3, #12
 80006b6:	88bb      	ldrh	r3, [r7, #4]
 80006b8:	4413      	add	r3, r2
 80006ba:	4a18      	ldr	r2, [pc, #96]	; (800071c <adcRead1000+0xbc>)
 80006bc:	6013      	str	r3, [r2, #0]
		the_stuff[2][i] = read_data;
 80006be:	4b17      	ldr	r3, [pc, #92]	; (800071c <adcRead1000+0xbc>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	b2d9      	uxtb	r1, r3
 80006c4:	4a16      	ldr	r2, [pc, #88]	; (8000720 <adcRead1000+0xc0>)
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	441a      	add	r2, r3
 80006ca:	4b16      	ldr	r3, [pc, #88]	; (8000724 <adcRead1000+0xc4>)
 80006cc:	4413      	add	r3, r2
 80006ce:	460a      	mov	r2, r1
 80006d0:	701a      	strb	r2, [r3, #0]
		the_stuff[1][i] = (read_data >> 8);
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <adcRead1000+0xbc>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	0a1b      	lsrs	r3, r3, #8
 80006d8:	b2d9      	uxtb	r1, r3
 80006da:	4a11      	ldr	r2, [pc, #68]	; (8000720 <adcRead1000+0xc0>)
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	441a      	add	r2, r3
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <adcRead1000+0xc8>)
 80006e2:	4413      	add	r3, r2
 80006e4:	460a      	mov	r2, r1
 80006e6:	701a      	strb	r2, [r3, #0]
		the_stuff[0][i] = (read_data >> 16);
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <adcRead1000+0xbc>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	0c1b      	lsrs	r3, r3, #16
 80006ee:	b2d9      	uxtb	r1, r3
 80006f0:	4a0b      	ldr	r2, [pc, #44]	; (8000720 <adcRead1000+0xc0>)
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	4413      	add	r3, r2
 80006f6:	460a      	mov	r2, r1
 80006f8:	701a      	strb	r2, [r3, #0]
	for(i = 0; i<samplesize; i++){
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	3301      	adds	r3, #1
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	4a0a      	ldr	r2, [pc, #40]	; (800072c <adcRead1000+0xcc>)
 8000704:	4293      	cmp	r3, r2
 8000706:	d9b1      	bls.n	800066c <adcRead1000+0xc>
	}

}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40020000 	.word	0x40020000
 8000714:	40013000 	.word	0x40013000
 8000718:	4001300c 	.word	0x4001300c
 800071c:	2007ca48 	.word	0x2007ca48
 8000720:	20000138 	.word	0x20000138
 8000724:	00053020 	.word	0x00053020
 8000728:	00029810 	.word	0x00029810
 800072c:	0002980f 	.word	0x0002980f

08000730 <transmit1000>:
void transmit1000(){
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
	uint32_t i;
	uint32_t j;
	for(i  = 0; i <samplesize; i++){
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	e018      	b.n	800076e <transmit1000+0x3e>
		for(j = 0; j<3; j++){
 800073c:	2300      	movs	r3, #0
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	e00f      	b.n	8000762 <transmit1000+0x32>
			HAL_UART_Transmit(&huart1, (uint8_t*)&the_stuff[j][i], sizeof((uint8_t*)&the_stuff[j][i]), 1);
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	4a0e      	ldr	r2, [pc, #56]	; (8000780 <transmit1000+0x50>)
 8000746:	fb02 f203 	mul.w	r2, r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4413      	add	r3, r2
 800074e:	4a0d      	ldr	r2, [pc, #52]	; (8000784 <transmit1000+0x54>)
 8000750:	1899      	adds	r1, r3, r2
 8000752:	2301      	movs	r3, #1
 8000754:	2204      	movs	r2, #4
 8000756:	480c      	ldr	r0, [pc, #48]	; (8000788 <transmit1000+0x58>)
 8000758:	f004 f93a 	bl	80049d0 <HAL_UART_Transmit>
		for(j = 0; j<3; j++){
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	3301      	adds	r3, #1
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	2b02      	cmp	r3, #2
 8000766:	d9ec      	bls.n	8000742 <transmit1000+0x12>
	for(i  = 0; i <samplesize; i++){
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3301      	adds	r3, #1
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4a06      	ldr	r2, [pc, #24]	; (800078c <transmit1000+0x5c>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d9e2      	bls.n	800073c <transmit1000+0xc>
		}
	}
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	00029810 	.word	0x00029810
 8000784:	20000138 	.word	0x20000138
 8000788:	2007c9c8 	.word	0x2007c9c8
 800078c:	0002980f 	.word	0x0002980f

08000790 <AD9833_tx>:
void AD9833_tx(SPI_HandleTypeDef *hspi, uint16_t dt, uint8_t DDS_Num) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	460b      	mov	r3, r1
 800079a:	807b      	strh	r3, [r7, #2]
 800079c:	4613      	mov	r3, r2
 800079e:	707b      	strb	r3, [r7, #1]
	uint16_t data[1] = { 0 };
 80007a0:	2300      	movs	r3, #0
 80007a2:	81bb      	strh	r3, [r7, #12]
	data[0] = dt;
 80007a4:	887b      	ldrh	r3, [r7, #2]
 80007a6:	81bb      	strh	r3, [r7, #12]
	if(DDS_Num == 1){
 80007a8:	787b      	ldrb	r3, [r7, #1]
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d108      	bne.n	80007c0 <AD9833_tx+0x30>
		LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 80007ae:	2102      	movs	r1, #2
 80007b0:	4813      	ldr	r0, [pc, #76]	; (8000800 <AD9833_tx+0x70>)
 80007b2:	f7ff ff15 	bl	80005e0 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_0);
 80007b6:	2101      	movs	r1, #1
 80007b8:	4811      	ldr	r0, [pc, #68]	; (8000800 <AD9833_tx+0x70>)
 80007ba:	f7ff ff03 	bl	80005c4 <LL_GPIO_SetOutputPin>
 80007be:	e00a      	b.n	80007d6 <AD9833_tx+0x46>
	}else if (DDS_Num == 2){
 80007c0:	787b      	ldrb	r3, [r7, #1]
 80007c2:	2b02      	cmp	r3, #2
 80007c4:	d107      	bne.n	80007d6 <AD9833_tx+0x46>
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 80007c6:	2102      	movs	r1, #2
 80007c8:	480d      	ldr	r0, [pc, #52]	; (8000800 <AD9833_tx+0x70>)
 80007ca:	f7ff fefb 	bl	80005c4 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 80007ce:	2101      	movs	r1, #1
 80007d0:	480b      	ldr	r0, [pc, #44]	; (8000800 <AD9833_tx+0x70>)
 80007d2:	f7ff ff05 	bl	80005e0 <LL_GPIO_ResetOutputPin>
	}
	HAL_SPI_Transmit(hspi, (uint8_t * )&data[0], 1, HAL_MAX_DELAY);
 80007d6:	f107 010c 	add.w	r1, r7, #12
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
 80007de:	2201      	movs	r2, #1
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f002 ff4d 	bl	8003680 <HAL_SPI_Transmit>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_0);
 80007e6:	2101      	movs	r1, #1
 80007e8:	4805      	ldr	r0, [pc, #20]	; (8000800 <AD9833_tx+0x70>)
 80007ea:	f7ff feeb 	bl	80005c4 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 80007ee:	2102      	movs	r1, #2
 80007f0:	4803      	ldr	r0, [pc, #12]	; (8000800 <AD9833_tx+0x70>)
 80007f2:	f7ff fee7 	bl	80005c4 <LL_GPIO_SetOutputPin>
}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40020400 	.word	0x40020400

08000804 <AD9833_Init>:

void AD9833_Init(SPI_HandleTypeDef *hspi, uint8_t DDS_Num) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	460b      	mov	r3, r1
 800080e:	70fb      	strb	r3, [r7, #3]
	uint16_t data;
	data = 0x21 << 8;
 8000810:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8000814:	81fb      	strh	r3, [r7, #14]
	AD9833_tx(hspi, data, DDS_Num);
 8000816:	78fa      	ldrb	r2, [r7, #3]
 8000818:	89fb      	ldrh	r3, [r7, #14]
 800081a:	4619      	mov	r1, r3
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff ffb7 	bl	8000790 <AD9833_tx>
}
 8000822:	bf00      	nop
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <AD9833_freq_calc>:
uint64_t AD9833_freq_calc(uint64_t freq, uint64_t clk) {
 800082c:	b590      	push	{r4, r7, lr}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000836:	e9c7 2300 	strd	r2, r3, [r7]
	static uint64_t ret;
	static uint64_t retf;

	retf = (freq * (2 << 27)) / clk;
 800083a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800083e:	f04f 0000 	mov.w	r0, #0
 8000842:	f04f 0100 	mov.w	r1, #0
 8000846:	0721      	lsls	r1, r4, #28
 8000848:	ea41 1113 	orr.w	r1, r1, r3, lsr #4
 800084c:	0718      	lsls	r0, r3, #28
 800084e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000852:	f7ff fcf1 	bl	8000238 <__aeabi_uldivmod>
 8000856:	4603      	mov	r3, r0
 8000858:	460c      	mov	r4, r1
 800085a:	4a08      	ldr	r2, [pc, #32]	; (800087c <AD9833_freq_calc+0x50>)
 800085c:	e9c2 3400 	strd	r3, r4, [r2]
	ret = retf;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <AD9833_freq_calc+0x50>)
 8000862:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000866:	4a06      	ldr	r2, [pc, #24]	; (8000880 <AD9833_freq_calc+0x54>)
 8000868:	e9c2 3400 	strd	r3, r4, [r2]
	return ret;
 800086c:	4b04      	ldr	r3, [pc, #16]	; (8000880 <AD9833_freq_calc+0x54>)
 800086e:	e9d3 3400 	ldrd	r3, r4, [r3]
}
 8000872:	4618      	mov	r0, r3
 8000874:	4621      	mov	r1, r4
 8000876:	3714      	adds	r7, #20
 8000878:	46bd      	mov	sp, r7
 800087a:	bd90      	pop	{r4, r7, pc}
 800087c:	200000b0 	.word	0x200000b0
 8000880:	200000b8 	.word	0x200000b8
 8000884:	00000000 	.word	0x00000000

08000888 <AD9833_set>:
void AD9833_set(SPI_HandleTypeDef *hspi, uint32_t freq, uint16_t phase,
		uint8_t reset, uint8_t DDS_Num) {
 8000888:	b590      	push	{r4, r7, lr}
 800088a:	b087      	sub	sp, #28
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	4611      	mov	r1, r2
 8000894:	461a      	mov	r2, r3
 8000896:	460b      	mov	r3, r1
 8000898:	80fb      	strh	r3, [r7, #6]
 800089a:	4613      	mov	r3, r2
 800089c:	717b      	strb	r3, [r7, #5]
	static uint16_t fqlsb;
	static uint16_t fqmsb;

	static uint64_t FreqReg;
	static uint16_t PhReg;
	const uint64_t fmclk = 25000000;
 800089e:	a464      	add	r4, pc, #400	; (adr r4, 8000a30 <AD9833_set+0x1a8>)
 80008a0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80008a4:	e9c7 3404 	strd	r3, r4, [r7, #16]

	if (reset)
 80008a8:	797b      	ldrb	r3, [r7, #5]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d005      	beq.n	80008ba <AD9833_set+0x32>
		AD9833_Init(hspi, DDS_Num);
 80008ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80008b2:	4619      	mov	r1, r3
 80008b4:	68f8      	ldr	r0, [r7, #12]
 80008b6:	f7ff ffa5 	bl	8000804 <AD9833_Init>

	FreqReg = AD9833_freq_calc(freq, fmclk);
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	4618      	mov	r0, r3
 80008be:	f04f 0100 	mov.w	r1, #0
 80008c2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80008c6:	f7ff ffb1 	bl	800082c <AD9833_freq_calc>
 80008ca:	4603      	mov	r3, r0
 80008cc:	460c      	mov	r4, r1
 80008ce:	4a4e      	ldr	r2, [pc, #312]	; (8000a08 <AD9833_set+0x180>)
 80008d0:	e9c2 3400 	strd	r3, r4, [r2]
	fqlsb = FreqReg & ftmask;
 80008d4:	4b4c      	ldr	r3, [pc, #304]	; (8000a08 <AD9833_set+0x180>)
 80008d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80008da:	b29a      	uxth	r2, r3
 80008dc:	4b4b      	ldr	r3, [pc, #300]	; (8000a0c <AD9833_set+0x184>)
 80008de:	881b      	ldrh	r3, [r3, #0]
 80008e0:	4013      	ands	r3, r2
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	4b4a      	ldr	r3, [pc, #296]	; (8000a10 <AD9833_set+0x188>)
 80008e6:	801a      	strh	r2, [r3, #0]
	fqmsb = (FreqReg >> 14) & ftmask;
 80008e8:	4b47      	ldr	r3, [pc, #284]	; (8000a08 <AD9833_set+0x180>)
 80008ea:	e9d3 1200 	ldrd	r1, r2, [r3]
 80008ee:	f04f 0300 	mov.w	r3, #0
 80008f2:	f04f 0400 	mov.w	r4, #0
 80008f6:	0b8b      	lsrs	r3, r1, #14
 80008f8:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 80008fc:	0b94      	lsrs	r4, r2, #14
 80008fe:	b29a      	uxth	r2, r3
 8000900:	4b42      	ldr	r3, [pc, #264]	; (8000a0c <AD9833_set+0x184>)
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	4013      	ands	r3, r2
 8000906:	b29a      	uxth	r2, r3
 8000908:	4b42      	ldr	r3, [pc, #264]	; (8000a14 <AD9833_set+0x18c>)
 800090a:	801a      	strh	r2, [r3, #0]

	fqlsb = fq1maskand & fqlsb;
 800090c:	4b42      	ldr	r3, [pc, #264]	; (8000a18 <AD9833_set+0x190>)
 800090e:	881a      	ldrh	r2, [r3, #0]
 8000910:	4b3f      	ldr	r3, [pc, #252]	; (8000a10 <AD9833_set+0x188>)
 8000912:	881b      	ldrh	r3, [r3, #0]
 8000914:	4013      	ands	r3, r2
 8000916:	b29a      	uxth	r2, r3
 8000918:	4b3d      	ldr	r3, [pc, #244]	; (8000a10 <AD9833_set+0x188>)
 800091a:	801a      	strh	r2, [r3, #0]
	fqlsb = fq1maskor | fqlsb;
 800091c:	4b3f      	ldr	r3, [pc, #252]	; (8000a1c <AD9833_set+0x194>)
 800091e:	881a      	ldrh	r2, [r3, #0]
 8000920:	4b3b      	ldr	r3, [pc, #236]	; (8000a10 <AD9833_set+0x188>)
 8000922:	881b      	ldrh	r3, [r3, #0]
 8000924:	4313      	orrs	r3, r2
 8000926:	b29a      	uxth	r2, r3
 8000928:	4b39      	ldr	r3, [pc, #228]	; (8000a10 <AD9833_set+0x188>)
 800092a:	801a      	strh	r2, [r3, #0]
	fqmsb = fq1maskand & fqmsb;
 800092c:	4b3a      	ldr	r3, [pc, #232]	; (8000a18 <AD9833_set+0x190>)
 800092e:	881a      	ldrh	r2, [r3, #0]
 8000930:	4b38      	ldr	r3, [pc, #224]	; (8000a14 <AD9833_set+0x18c>)
 8000932:	881b      	ldrh	r3, [r3, #0]
 8000934:	4013      	ands	r3, r2
 8000936:	b29a      	uxth	r2, r3
 8000938:	4b36      	ldr	r3, [pc, #216]	; (8000a14 <AD9833_set+0x18c>)
 800093a:	801a      	strh	r2, [r3, #0]
	fqmsb = fq1maskor | fqmsb;
 800093c:	4b37      	ldr	r3, [pc, #220]	; (8000a1c <AD9833_set+0x194>)
 800093e:	881a      	ldrh	r2, [r3, #0]
 8000940:	4b34      	ldr	r3, [pc, #208]	; (8000a14 <AD9833_set+0x18c>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	4313      	orrs	r3, r2
 8000946:	b29a      	uxth	r2, r3
 8000948:	4b32      	ldr	r3, [pc, #200]	; (8000a14 <AD9833_set+0x18c>)
 800094a:	801a      	strh	r2, [r3, #0]

	PhReg = (phase * 2 * M_PI) / 4096;
 800094c:	88fb      	ldrh	r3, [r7, #6]
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	ee07 3a90 	vmov	s15, r3
 8000954:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000958:	ed9f 6b27 	vldr	d6, [pc, #156]	; 80009f8 <AD9833_set+0x170>
 800095c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000960:	ed9f 5b27 	vldr	d5, [pc, #156]	; 8000a00 <AD9833_set+0x178>
 8000964:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000968:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800096c:	ee17 3a90 	vmov	r3, s15
 8000970:	b29a      	uxth	r2, r3
 8000972:	4b2b      	ldr	r3, [pc, #172]	; (8000a20 <AD9833_set+0x198>)
 8000974:	801a      	strh	r2, [r3, #0]
	PhReg &= twmask;
 8000976:	4b2a      	ldr	r3, [pc, #168]	; (8000a20 <AD9833_set+0x198>)
 8000978:	881a      	ldrh	r2, [r3, #0]
 800097a:	4b2a      	ldr	r3, [pc, #168]	; (8000a24 <AD9833_set+0x19c>)
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	4013      	ands	r3, r2
 8000980:	b29a      	uxth	r2, r3
 8000982:	4b27      	ldr	r3, [pc, #156]	; (8000a20 <AD9833_set+0x198>)
 8000984:	801a      	strh	r2, [r3, #0]

	PhReg &= ph1maskand;
 8000986:	4b26      	ldr	r3, [pc, #152]	; (8000a20 <AD9833_set+0x198>)
 8000988:	881a      	ldrh	r2, [r3, #0]
 800098a:	4b27      	ldr	r3, [pc, #156]	; (8000a28 <AD9833_set+0x1a0>)
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	4013      	ands	r3, r2
 8000990:	b29a      	uxth	r2, r3
 8000992:	4b23      	ldr	r3, [pc, #140]	; (8000a20 <AD9833_set+0x198>)
 8000994:	801a      	strh	r2, [r3, #0]
	PhReg |= ph1markor;
 8000996:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <AD9833_set+0x198>)
 8000998:	881a      	ldrh	r2, [r3, #0]
 800099a:	4b24      	ldr	r3, [pc, #144]	; (8000a2c <AD9833_set+0x1a4>)
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	4313      	orrs	r3, r2
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <AD9833_set+0x198>)
 80009a4:	801a      	strh	r2, [r3, #0]

	AD9833_tx(hspi, fqlsb, DDS_Num);
 80009a6:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <AD9833_set+0x188>)
 80009a8:	881b      	ldrh	r3, [r3, #0]
 80009aa:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80009ae:	4619      	mov	r1, r3
 80009b0:	68f8      	ldr	r0, [r7, #12]
 80009b2:	f7ff feed 	bl	8000790 <AD9833_tx>
	AD9833_tx(hspi, fqmsb, DDS_Num);
 80009b6:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <AD9833_set+0x18c>)
 80009b8:	881b      	ldrh	r3, [r3, #0]
 80009ba:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80009be:	4619      	mov	r1, r3
 80009c0:	68f8      	ldr	r0, [r7, #12]
 80009c2:	f7ff fee5 	bl	8000790 <AD9833_tx>
	AD9833_tx(hspi, PhReg, DDS_Num);
 80009c6:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <AD9833_set+0x198>)
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80009ce:	4619      	mov	r1, r3
 80009d0:	68f8      	ldr	r0, [r7, #12]
 80009d2:	f7ff fedd 	bl	8000790 <AD9833_tx>
	if (reset)
 80009d6:	797b      	ldrb	r3, [r7, #5]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d007      	beq.n	80009ec <AD9833_set+0x164>
		AD9833_tx(hspi, 0x2000, DDS_Num);
 80009dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80009e0:	461a      	mov	r2, r3
 80009e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009e6:	68f8      	ldr	r0, [r7, #12]
 80009e8:	f7ff fed2 	bl	8000790 <AD9833_tx>
}
 80009ec:	bf00      	nop
 80009ee:	371c      	adds	r7, #28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd90      	pop	{r4, r7, pc}
 80009f4:	f3af 8000 	nop.w
 80009f8:	54442d18 	.word	0x54442d18
 80009fc:	400921fb 	.word	0x400921fb
 8000a00:	00000000 	.word	0x00000000
 8000a04:	40b00000 	.word	0x40b00000
 8000a08:	200000c0 	.word	0x200000c0
 8000a0c:	20000006 	.word	0x20000006
 8000a10:	200000c8 	.word	0x200000c8
 8000a14:	200000ca 	.word	0x200000ca
 8000a18:	20000008 	.word	0x20000008
 8000a1c:	2000000a 	.word	0x2000000a
 8000a20:	200000cc 	.word	0x200000cc
 8000a24:	2000000c 	.word	0x2000000c
 8000a28:	2000000e 	.word	0x2000000e
 8000a2c:	20000010 	.word	0x20000010
 8000a30:	017d7840 	.word	0x017d7840
 8000a34:	00000000 	.word	0x00000000

08000a38 <HAL_UART_RxCpltCallback>:
uint8_t b[2] = {0xBB,0};
uint8_t c[2] = {0xFF,0};
uint8_t needtoadj = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	ed2d 8b02 	vpush	{d8}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	if(FreqFlag == 1){
 8000a44:	4b4c      	ldr	r3, [pc, #304]	; (8000b78 <HAL_UART_RxCpltCallback+0x140>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d116      	bne.n	8000a7a <HAL_UART_RxCpltCallback+0x42>
		FrequencyL = myRxData[0]*myRxData[1];
 8000a4c:	4b4b      	ldr	r3, [pc, #300]	; (8000b7c <HAL_UART_RxCpltCallback+0x144>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	4b4a      	ldr	r3, [pc, #296]	; (8000b7c <HAL_UART_RxCpltCallback+0x144>)
 8000a54:	785b      	ldrb	r3, [r3, #1]
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	fb12 f303 	smulbb	r3, r2, r3
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	4b48      	ldr	r3, [pc, #288]	; (8000b80 <HAL_UART_RxCpltCallback+0x148>)
 8000a60:	801a      	strh	r2, [r3, #0]
		FreqFlag = 0;
 8000a62:	4b45      	ldr	r3, [pc, #276]	; (8000b78 <HAL_UART_RxCpltCallback+0x140>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
		FreqFlag2 = 1;
 8000a68:	4b46      	ldr	r3, [pc, #280]	; (8000b84 <HAL_UART_RxCpltCallback+0x14c>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart1, myRxData, 2);
 8000a6e:	2202      	movs	r2, #2
 8000a70:	4942      	ldr	r1, [pc, #264]	; (8000b7c <HAL_UART_RxCpltCallback+0x144>)
 8000a72:	4845      	ldr	r0, [pc, #276]	; (8000b88 <HAL_UART_RxCpltCallback+0x150>)
 8000a74:	f004 f83e 	bl	8004af4 <HAL_UART_Receive_DMA>
		return;
 8000a78:	e079      	b.n	8000b6e <HAL_UART_RxCpltCallback+0x136>
	}if(FreqFlag2 == 1){
 8000a7a:	4b42      	ldr	r3, [pc, #264]	; (8000b84 <HAL_UART_RxCpltCallback+0x14c>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d138      	bne.n	8000af4 <HAL_UART_RxCpltCallback+0xbc>
		if(myRxData[1] != 1){
 8000a82:	4b3e      	ldr	r3, [pc, #248]	; (8000b7c <HAL_UART_RxCpltCallback+0x144>)
 8000a84:	785b      	ldrb	r3, [r3, #1]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d01d      	beq.n	8000ac6 <HAL_UART_RxCpltCallback+0x8e>
			FrequencyH = myRxData[0]*powf(10, myRxData[1]); // end my life please
 8000a8a:	4b3c      	ldr	r3, [pc, #240]	; (8000b7c <HAL_UART_RxCpltCallback+0x144>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	ee07 3a90 	vmov	s15, r3
 8000a92:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000a96:	4b39      	ldr	r3, [pc, #228]	; (8000b7c <HAL_UART_RxCpltCallback+0x144>)
 8000a98:	785b      	ldrb	r3, [r3, #1]
 8000a9a:	ee07 3a90 	vmov	s15, r3
 8000a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000aa2:	eef0 0a67 	vmov.f32	s1, s15
 8000aa6:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8000aaa:	f005 f93d 	bl	8005d28 <powf>
 8000aae:	eef0 7a40 	vmov.f32	s15, s0
 8000ab2:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000ab6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000aba:	ee17 3a90 	vmov	r3, s15
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	4b32      	ldr	r3, [pc, #200]	; (8000b8c <HAL_UART_RxCpltCallback+0x154>)
 8000ac2:	801a      	strh	r2, [r3, #0]
 8000ac4:	e00a      	b.n	8000adc <HAL_UART_RxCpltCallback+0xa4>
		}else{
			FrequencyH = myRxData[0]*myRxData[1];
 8000ac6:	4b2d      	ldr	r3, [pc, #180]	; (8000b7c <HAL_UART_RxCpltCallback+0x144>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	4b2b      	ldr	r3, [pc, #172]	; (8000b7c <HAL_UART_RxCpltCallback+0x144>)
 8000ace:	785b      	ldrb	r3, [r3, #1]
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	fb12 f303 	smulbb	r3, r2, r3
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	4b2c      	ldr	r3, [pc, #176]	; (8000b8c <HAL_UART_RxCpltCallback+0x154>)
 8000ada:	801a      	strh	r2, [r3, #0]
		}
		FreqFlag2 = 0;
 8000adc:	4b29      	ldr	r3, [pc, #164]	; (8000b84 <HAL_UART_RxCpltCallback+0x14c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]
		needtoadj = 1;
 8000ae2:	4b2b      	ldr	r3, [pc, #172]	; (8000b90 <HAL_UART_RxCpltCallback+0x158>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart1, myRxData, 2); // just kidding
 8000ae8:	2202      	movs	r2, #2
 8000aea:	4924      	ldr	r1, [pc, #144]	; (8000b7c <HAL_UART_RxCpltCallback+0x144>)
 8000aec:	4826      	ldr	r0, [pc, #152]	; (8000b88 <HAL_UART_RxCpltCallback+0x150>)
 8000aee:	f004 f801 	bl	8004af4 <HAL_UART_Receive_DMA>
		return;
 8000af2:	e03c      	b.n	8000b6e <HAL_UART_RxCpltCallback+0x136>
	}
	if((myRxData[0] == 'a' )&& (myRxData[1] == 'a')){
 8000af4:	4b21      	ldr	r3, [pc, #132]	; (8000b7c <HAL_UART_RxCpltCallback+0x144>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b61      	cmp	r3, #97	; 0x61
 8000afa:	d10b      	bne.n	8000b14 <HAL_UART_RxCpltCallback+0xdc>
 8000afc:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <HAL_UART_RxCpltCallback+0x144>)
 8000afe:	785b      	ldrb	r3, [r3, #1]
 8000b00:	2b61      	cmp	r3, #97	; 0x61
 8000b02:	d107      	bne.n	8000b14 <HAL_UART_RxCpltCallback+0xdc>
		HAL_UART_Transmit(&huart1, (uint8_t * )&a[0], sizeof(a[0]), 0xFFFF);
 8000b04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b08:	2201      	movs	r2, #1
 8000b0a:	4922      	ldr	r1, [pc, #136]	; (8000b94 <HAL_UART_RxCpltCallback+0x15c>)
 8000b0c:	481e      	ldr	r0, [pc, #120]	; (8000b88 <HAL_UART_RxCpltCallback+0x150>)
 8000b0e:	f003 ff5f 	bl	80049d0 <HAL_UART_Transmit>
 8000b12:	e027      	b.n	8000b64 <HAL_UART_RxCpltCallback+0x12c>
    }else if((myRxData[0] == 'b' )&& (myRxData[1] == 'b')){
 8000b14:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <HAL_UART_RxCpltCallback+0x144>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b62      	cmp	r3, #98	; 0x62
 8000b1a:	d10d      	bne.n	8000b38 <HAL_UART_RxCpltCallback+0x100>
 8000b1c:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <HAL_UART_RxCpltCallback+0x144>)
 8000b1e:	785b      	ldrb	r3, [r3, #1]
 8000b20:	2b62      	cmp	r3, #98	; 0x62
 8000b22:	d109      	bne.n	8000b38 <HAL_UART_RxCpltCallback+0x100>
    	adcRead1000();
 8000b24:	f7ff fd9c 	bl	8000660 <adcRead1000>
    	HAL_UART_Transmit(&huart1, (uint8_t * )&b[0], sizeof(b[0]), 0xFFFF);
 8000b28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	491a      	ldr	r1, [pc, #104]	; (8000b98 <HAL_UART_RxCpltCallback+0x160>)
 8000b30:	4815      	ldr	r0, [pc, #84]	; (8000b88 <HAL_UART_RxCpltCallback+0x150>)
 8000b32:	f003 ff4d 	bl	80049d0 <HAL_UART_Transmit>
 8000b36:	e015      	b.n	8000b64 <HAL_UART_RxCpltCallback+0x12c>
    }else if((myRxData[0] == 'c' )&& (myRxData[1] == 'c')){
 8000b38:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <HAL_UART_RxCpltCallback+0x144>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b63      	cmp	r3, #99	; 0x63
 8000b3e:	d106      	bne.n	8000b4e <HAL_UART_RxCpltCallback+0x116>
 8000b40:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <HAL_UART_RxCpltCallback+0x144>)
 8000b42:	785b      	ldrb	r3, [r3, #1]
 8000b44:	2b63      	cmp	r3, #99	; 0x63
 8000b46:	d102      	bne.n	8000b4e <HAL_UART_RxCpltCallback+0x116>
    	transmit1000();
 8000b48:	f7ff fdf2 	bl	8000730 <transmit1000>
 8000b4c:	e00a      	b.n	8000b64 <HAL_UART_RxCpltCallback+0x12c>
	}else if((myRxData[0] == 'l' )&& (myRxData[1] == 'l')){
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <HAL_UART_RxCpltCallback+0x144>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b6c      	cmp	r3, #108	; 0x6c
 8000b54:	d106      	bne.n	8000b64 <HAL_UART_RxCpltCallback+0x12c>
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <HAL_UART_RxCpltCallback+0x144>)
 8000b58:	785b      	ldrb	r3, [r3, #1]
 8000b5a:	2b6c      	cmp	r3, #108	; 0x6c
 8000b5c:	d102      	bne.n	8000b64 <HAL_UART_RxCpltCallback+0x12c>
		FreqFlag = 1;
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_UART_RxCpltCallback+0x140>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_DMA(&huart1, myRxData, 2);
 8000b64:	2202      	movs	r2, #2
 8000b66:	4905      	ldr	r1, [pc, #20]	; (8000b7c <HAL_UART_RxCpltCallback+0x144>)
 8000b68:	4807      	ldr	r0, [pc, #28]	; (8000b88 <HAL_UART_RxCpltCallback+0x150>)
 8000b6a:	f003 ffc3 	bl	8004af4 <HAL_UART_Receive_DMA>
}
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	ecbd 8b02 	vpop	{d8}
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	200000a4 	.word	0x200000a4
 8000b7c:	20000134 	.word	0x20000134
 8000b80:	200000a8 	.word	0x200000a8
 8000b84:	200000a5 	.word	0x200000a5
 8000b88:	2007c9c8 	.word	0x2007c9c8
 8000b8c:	200000a6 	.word	0x200000a6
 8000b90:	200000aa 	.word	0x200000aa
 8000b94:	20000000 	.word	0x20000000
 8000b98:	20000004 	.word	0x20000004

08000b9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ba2:	f000 fcee 	bl	8001582 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ba6:	f000 f85f 	bl	8000c68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000baa:	f000 fa99 	bl	80010e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bae:	f000 fa79 	bl	80010a4 <MX_DMA_Init>
  MX_SPI1_Init();
 8000bb2:	f000 f8e7 	bl	8000d84 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000bb6:	f000 f963 	bl	8000e80 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000bba:	f000 f99f 	bl	8000efc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000bbe:	f000 fa41 	bl	8001044 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //AD9833_set(&hspi2, 5000, 0, 1, 1);
  HAL_Delay(1000);
 8000bc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bc6:	f000 fd39 	bl	800163c <HAL_Delay>
  //AD9833_set(&hspi2, 50, 0,1, 2);
  HAL_Delay(100);
 8000bca:	2064      	movs	r0, #100	; 0x64
 8000bcc:	f000 fd36 	bl	800163c <HAL_Delay>
  LL_SPI_Enable(SPI1);
 8000bd0:	481d      	ldr	r0, [pc, #116]	; (8000c48 <main+0xac>)
 8000bd2:	f7ff fcb1 	bl	8000538 <LL_SPI_Enable>
  HAL_UART_Receive_DMA(&huart1, myRxData, 2);
 8000bd6:	2202      	movs	r2, #2
 8000bd8:	491c      	ldr	r1, [pc, #112]	; (8000c4c <main+0xb0>)
 8000bda:	481d      	ldr	r0, [pc, #116]	; (8000c50 <main+0xb4>)
 8000bdc:	f003 ff8a 	bl	8004af4 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(needtoadj == 1){
 8000be0:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <main+0xb8>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d11e      	bne.n	8000c26 <main+0x8a>
		  AD9833_set(&hspi2, FrequencyH, 0, 1, 1);
 8000be8:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <main+0xbc>)
 8000bea:	881b      	ldrh	r3, [r3, #0]
 8000bec:	4619      	mov	r1, r3
 8000bee:	2301      	movs	r3, #1
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	4819      	ldr	r0, [pc, #100]	; (8000c5c <main+0xc0>)
 8000bf8:	f7ff fe46 	bl	8000888 <AD9833_set>
		  HAL_Delay(1000);
 8000bfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c00:	f000 fd1c 	bl	800163c <HAL_Delay>
		  AD9833_set(&hspi2, FrequencyL, 0, 1, 2);
 8000c04:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <main+0xc4>)
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	4619      	mov	r1, r3
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	2301      	movs	r3, #1
 8000c10:	2200      	movs	r2, #0
 8000c12:	4812      	ldr	r0, [pc, #72]	; (8000c5c <main+0xc0>)
 8000c14:	f7ff fe38 	bl	8000888 <AD9833_set>
		  HAL_Delay(1000);
 8000c18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c1c:	f000 fd0e 	bl	800163c <HAL_Delay>
		  needtoadj = 0;
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <main+0xb8>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	701a      	strb	r2, [r3, #0]
	  }
	  LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8000c26:	2101      	movs	r1, #1
 8000c28:	480e      	ldr	r0, [pc, #56]	; (8000c64 <main+0xc8>)
 8000c2a:	f7ff fccb 	bl	80005c4 <LL_GPIO_SetOutputPin>
	  HAL_Delay(500);
 8000c2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c32:	f000 fd03 	bl	800163c <HAL_Delay>
	  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8000c36:	2101      	movs	r1, #1
 8000c38:	480a      	ldr	r0, [pc, #40]	; (8000c64 <main+0xc8>)
 8000c3a:	f7ff fcd1 	bl	80005e0 <LL_GPIO_ResetOutputPin>
	  HAL_Delay(500);
 8000c3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c42:	f000 fcfb 	bl	800163c <HAL_Delay>
	  if(needtoadj == 1){
 8000c46:	e7cb      	b.n	8000be0 <main+0x44>
 8000c48:	40013000 	.word	0x40013000
 8000c4c:	20000134 	.word	0x20000134
 8000c50:	2007c9c8 	.word	0x2007c9c8
 8000c54:	200000aa 	.word	0x200000aa
 8000c58:	200000a6 	.word	0x200000a6
 8000c5c:	200000d0 	.word	0x200000d0
 8000c60:	200000a8 	.word	0x200000a8
 8000c64:	40020000 	.word	0x40020000

08000c68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b0b8      	sub	sp, #224	; 0xe0
 8000c6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c72:	2234      	movs	r2, #52	; 0x34
 8000c74:	2100      	movs	r1, #0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f005 f834 	bl	8005ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c7c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c8c:	f107 0308 	add.w	r3, r7, #8
 8000c90:	2290      	movs	r2, #144	; 0x90
 8000c92:	2100      	movs	r1, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f005 f825 	bl	8005ce4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	4b38      	ldr	r3, [pc, #224]	; (8000d7c <SystemClock_Config+0x114>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	4a37      	ldr	r2, [pc, #220]	; (8000d7c <SystemClock_Config+0x114>)
 8000ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca6:	4b35      	ldr	r3, [pc, #212]	; (8000d7c <SystemClock_Config+0x114>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cb2:	4b33      	ldr	r3, [pc, #204]	; (8000d80 <SystemClock_Config+0x118>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a32      	ldr	r2, [pc, #200]	; (8000d80 <SystemClock_Config+0x118>)
 8000cb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cbc:	6013      	str	r3, [r2, #0]
 8000cbe:	4b30      	ldr	r3, [pc, #192]	; (8000d80 <SystemClock_Config+0x118>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ce2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ce6:	2308      	movs	r3, #8
 8000ce8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000cec:	23d8      	movs	r3, #216	; 0xd8
 8000cee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8000cf8:	230c      	movs	r3, #12
 8000cfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cfe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d02:	4618      	mov	r0, r3
 8000d04:	f001 fb60 	bl	80023c8 <HAL_RCC_OscConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000d0e:	f000 fa8b 	bl	8001228 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d12:	f001 fb09 	bl	8002328 <HAL_PWREx_EnableOverDrive>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000d1c:	f000 fa84 	bl	8001228 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d20:	230f      	movs	r3, #15
 8000d22:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d26:	2302      	movs	r3, #2
 8000d28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d32:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000d42:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000d46:	2107      	movs	r1, #7
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f001 fdeb 	bl	8002924 <HAL_RCC_ClockConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000d54:	f000 fa68 	bl	8001228 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d58:	2340      	movs	r3, #64	; 0x40
 8000d5a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d60:	f107 0308 	add.w	r3, r7, #8
 8000d64:	4618      	mov	r0, r3
 8000d66:	f001 ffd3 	bl	8002d10 <HAL_RCCEx_PeriphCLKConfig>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8000d70:	f000 fa5a 	bl	8001228 <Error_Handler>
  }
}
 8000d74:	bf00      	nop
 8000d76:	37e0      	adds	r7, #224	; 0xe0
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40007000 	.word	0x40007000

08000d84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b090      	sub	sp, #64	; 0x40
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000d8a:	f107 0318 	add.w	r3, r7, #24
 8000d8e:	2228      	movs	r2, #40	; 0x28
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f004 ffa6 	bl	8005ce4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	463b      	mov	r3, r7
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
 8000da4:	611a      	str	r2, [r3, #16]
 8000da6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8000da8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000dac:	f7ff fc40 	bl	8000630 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000db0:	2001      	movs	r0, #1
 8000db2:	f7ff fc25 	bl	8000600 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000db6:	2008      	movs	r0, #8
 8000db8:	f7ff fc22 	bl	8000600 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration  
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PD7   ------> SPI1_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000dbc:	2320      	movs	r3, #32
 8000dbe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000dd0:	2305      	movs	r3, #5
 8000dd2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd4:	463b      	mov	r3, r7
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4826      	ldr	r0, [pc, #152]	; (8000e74 <MX_SPI1_Init+0xf0>)
 8000dda:	f004 fe6e 	bl	8005aba <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000dde:	2340      	movs	r3, #64	; 0x40
 8000de0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000de2:	2302      	movs	r3, #2
 8000de4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000de6:	2303      	movs	r3, #3
 8000de8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000df2:	2305      	movs	r3, #5
 8000df4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	463b      	mov	r3, r7
 8000df8:	4619      	mov	r1, r3
 8000dfa:	481e      	ldr	r0, [pc, #120]	; (8000e74 <MX_SPI1_Init+0xf0>)
 8000dfc:	f004 fe5d 	bl	8005aba <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000e00:	2380      	movs	r3, #128	; 0x80
 8000e02:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e04:	2302      	movs	r3, #2
 8000e06:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e10:	2300      	movs	r3, #0
 8000e12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000e14:	2305      	movs	r3, #5
 8000e16:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e18:	463b      	mov	r3, r7
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4816      	ldr	r0, [pc, #88]	; (8000e78 <MX_SPI1_Init+0xf4>)
 8000e1e:	f004 fe4c 	bl	8005aba <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000e26:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000e2a:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_12BIT;
 8000e2c:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8000e30:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000e3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8000e40:	2300      	movs	r3, #0
 8000e42:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000e44:	2300      	movs	r3, #0
 8000e46:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8000e4c:	2307      	movs	r3, #7
 8000e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8000e50:	f107 0318 	add.w	r3, r7, #24
 8000e54:	4619      	mov	r1, r3
 8000e56:	4809      	ldr	r0, [pc, #36]	; (8000e7c <MX_SPI1_Init+0xf8>)
 8000e58:	f004 fec6 	bl	8005be8 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4807      	ldr	r0, [pc, #28]	; (8000e7c <MX_SPI1_Init+0xf8>)
 8000e60:	f7ff fb7a 	bl	8000558 <LL_SPI_SetStandard>
  LL_SPI_EnableNSSPulseMgt(SPI1);
 8000e64:	4805      	ldr	r0, [pc, #20]	; (8000e7c <MX_SPI1_Init+0xf8>)
 8000e66:	f7ff fb8a 	bl	800057e <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	3740      	adds	r7, #64	; 0x40
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40020000 	.word	0x40020000
 8000e78:	40020c00 	.word	0x40020c00
 8000e7c:	40013000 	.word	0x40013000

08000e80 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <MX_SPI2_Init+0x74>)
 8000e86:	4a1c      	ldr	r2, [pc, #112]	; (8000ef8 <MX_SPI2_Init+0x78>)
 8000e88:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <MX_SPI2_Init+0x74>)
 8000e8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e90:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e92:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <MX_SPI2_Init+0x74>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000e98:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <MX_SPI2_Init+0x74>)
 8000e9a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000e9e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000ea0:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <MX_SPI2_Init+0x74>)
 8000ea2:	2202      	movs	r2, #2
 8000ea4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ea6:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <MX_SPI2_Init+0x74>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <MX_SPI2_Init+0x74>)
 8000eae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <MX_SPI2_Init+0x74>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <MX_SPI2_Init+0x74>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <MX_SPI2_Init+0x74>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <MX_SPI2_Init+0x74>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <MX_SPI2_Init+0x74>)
 8000ece:	2207      	movs	r2, #7
 8000ed0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <MX_SPI2_Init+0x74>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <MX_SPI2_Init+0x74>)
 8000eda:	2208      	movs	r2, #8
 8000edc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <MX_SPI2_Init+0x74>)
 8000ee0:	f002 fb3c 	bl	800355c <HAL_SPI_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000eea:	f000 f99d 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200000d0 	.word	0x200000d0
 8000ef8:	40003800 	.word	0x40003800

08000efc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b09a      	sub	sp, #104	; 0x68
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
 8000f2c:	615a      	str	r2, [r3, #20]
 8000f2e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	222c      	movs	r2, #44	; 0x2c
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f004 fed4 	bl	8005ce4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f3c:	4b3f      	ldr	r3, [pc, #252]	; (800103c <MX_TIM1_Init+0x140>)
 8000f3e:	4a40      	ldr	r2, [pc, #256]	; (8001040 <MX_TIM1_Init+0x144>)
 8000f40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f42:	4b3e      	ldr	r3, [pc, #248]	; (800103c <MX_TIM1_Init+0x140>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f48:	4b3c      	ldr	r3, [pc, #240]	; (800103c <MX_TIM1_Init+0x140>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000f4e:	4b3b      	ldr	r3, [pc, #236]	; (800103c <MX_TIM1_Init+0x140>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f54:	4b39      	ldr	r3, [pc, #228]	; (800103c <MX_TIM1_Init+0x140>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f5a:	4b38      	ldr	r3, [pc, #224]	; (800103c <MX_TIM1_Init+0x140>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f60:	4b36      	ldr	r3, [pc, #216]	; (800103c <MX_TIM1_Init+0x140>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f66:	4835      	ldr	r0, [pc, #212]	; (800103c <MX_TIM1_Init+0x140>)
 8000f68:	f002 fe0d 	bl	8003b86 <HAL_TIM_Base_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000f72:	f000 f959 	bl	8001228 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f7c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f80:	4619      	mov	r1, r3
 8000f82:	482e      	ldr	r0, [pc, #184]	; (800103c <MX_TIM1_Init+0x140>)
 8000f84:	f002 ff78 	bl	8003e78 <HAL_TIM_ConfigClockSource>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f8e:	f000 f94b 	bl	8001228 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f92:	482a      	ldr	r0, [pc, #168]	; (800103c <MX_TIM1_Init+0x140>)
 8000f94:	f002 fe22 	bl	8003bdc <HAL_TIM_PWM_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000f9e:	f000 f943 	bl	8001228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4821      	ldr	r0, [pc, #132]	; (800103c <MX_TIM1_Init+0x140>)
 8000fb6:	f003 fbb1 	bl	800471c <HAL_TIMEx_MasterConfigSynchronization>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000fc0:	f000 f932 	bl	8001228 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fc4:	2360      	movs	r3, #96	; 0x60
 8000fc6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8000fd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fdc:	2210      	movs	r2, #16
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4816      	ldr	r0, [pc, #88]	; (800103c <MX_TIM1_Init+0x140>)
 8000fe2:	f002 fe31 	bl	8003c48 <HAL_TIM_PWM_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000fec:	f000 f91c 	bl	8001228 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001004:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001008:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001012:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800101c:	2300      	movs	r3, #0
 800101e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	4619      	mov	r1, r3
 8001024:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_TIM1_Init+0x140>)
 8001026:	f003 fc07 	bl	8004838 <HAL_TIMEx_ConfigBreakDeadTime>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001030:	f000 f8fa 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001034:	bf00      	nop
 8001036:	3768      	adds	r7, #104	; 0x68
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	2007ca4c 	.word	0x2007ca4c
 8001040:	40010000 	.word	0x40010000

08001044 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001048:	4b14      	ldr	r3, [pc, #80]	; (800109c <MX_USART1_UART_Init+0x58>)
 800104a:	4a15      	ldr	r2, [pc, #84]	; (80010a0 <MX_USART1_UART_Init+0x5c>)
 800104c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <MX_USART1_UART_Init+0x58>)
 8001050:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001054:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <MX_USART1_UART_Init+0x58>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <MX_USART1_UART_Init+0x58>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <MX_USART1_UART_Init+0x58>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <MX_USART1_UART_Init+0x58>)
 800106a:	220c      	movs	r2, #12
 800106c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <MX_USART1_UART_Init+0x58>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <MX_USART1_UART_Init+0x58>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <MX_USART1_UART_Init+0x58>)
 800107c:	2200      	movs	r2, #0
 800107e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <MX_USART1_UART_Init+0x58>)
 8001082:	2200      	movs	r2, #0
 8001084:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001086:	4805      	ldr	r0, [pc, #20]	; (800109c <MX_USART1_UART_Init+0x58>)
 8001088:	f003 fc54 	bl	8004934 <HAL_UART_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001092:	f000 f8c9 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	2007c9c8 	.word	0x2007c9c8
 80010a0:	40011000 	.word	0x40011000

080010a4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010aa:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <MX_DMA_Init+0x38>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a0b      	ldr	r2, [pc, #44]	; (80010dc <MX_DMA_Init+0x38>)
 80010b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <MX_DMA_Init+0x38>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2100      	movs	r1, #0
 80010c6:	203a      	movs	r0, #58	; 0x3a
 80010c8:	f000 fbb5 	bl	8001836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80010cc:	203a      	movs	r0, #58	; 0x3a
 80010ce:	f000 fbce 	bl	800186e <HAL_NVIC_EnableIRQ>

}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40023800 	.word	0x40023800

080010e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e6:	463b      	mov	r3, r7
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
 80010f4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80010f6:	2080      	movs	r0, #128	; 0x80
 80010f8:	f7ff fa82 	bl	8000600 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80010fc:	2004      	movs	r0, #4
 80010fe:	f7ff fa7f 	bl	8000600 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001102:	2001      	movs	r0, #1
 8001104:	f7ff fa7c 	bl	8000600 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001108:	2002      	movs	r0, #2
 800110a:	f7ff fa79 	bl	8000600 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800110e:	2008      	movs	r0, #8
 8001110:	f7ff fa76 	bl	8000600 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8001114:	2101      	movs	r1, #1
 8001116:	4841      	ldr	r0, [pc, #260]	; (800121c <MX_GPIO_Init+0x13c>)
 8001118:	f7ff fa62 	bl	80005e0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 800111c:	2180      	movs	r1, #128	; 0x80
 800111e:	483f      	ldr	r0, [pc, #252]	; (800121c <MX_GPIO_Init+0x13c>)
 8001120:	f7ff fa5e 	bl	80005e0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8001124:	2102      	movs	r1, #2
 8001126:	483e      	ldr	r0, [pc, #248]	; (8001220 <MX_GPIO_Init+0x140>)
 8001128:	f7ff fa5a 	bl	80005e0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_7);
 800112c:	2180      	movs	r1, #128	; 0x80
 800112e:	483c      	ldr	r0, [pc, #240]	; (8001220 <MX_GPIO_Init+0x140>)
 8001130:	f7ff fa56 	bl	80005e0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_0);
 8001134:	2101      	movs	r1, #1
 8001136:	483a      	ldr	r0, [pc, #232]	; (8001220 <MX_GPIO_Init+0x140>)
 8001138:	f7ff fa44 	bl	80005c4 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_11);
 800113c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001140:	4838      	ldr	r0, [pc, #224]	; (8001224 <MX_GPIO_Init+0x144>)
 8001142:	f7ff fa3f 	bl	80005c4 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8001146:	2301      	movs	r3, #1
 8001148:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800114a:	2301      	movs	r3, #1
 800114c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800114e:	2303      	movs	r3, #3
 8001150:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	463b      	mov	r3, r7
 800115c:	4619      	mov	r1, r3
 800115e:	482f      	ldr	r0, [pc, #188]	; (800121c <MX_GPIO_Init+0x13c>)
 8001160:	f004 fcab 	bl	8005aba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001164:	2310      	movs	r3, #16
 8001166:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001168:	2300      	movs	r3, #0
 800116a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001170:	463b      	mov	r3, r7
 8001172:	4619      	mov	r1, r3
 8001174:	4829      	ldr	r0, [pc, #164]	; (800121c <MX_GPIO_Init+0x13c>)
 8001176:	f004 fca0 	bl	8005aba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 800117a:	2380      	movs	r3, #128	; 0x80
 800117c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800117e:	2301      	movs	r3, #1
 8001180:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001182:	2303      	movs	r3, #3
 8001184:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118e:	463b      	mov	r3, r7
 8001190:	4619      	mov	r1, r3
 8001192:	4822      	ldr	r0, [pc, #136]	; (800121c <MX_GPIO_Init+0x13c>)
 8001194:	f004 fc91 	bl	8005aba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8001198:	2301      	movs	r3, #1
 800119a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800119c:	2301      	movs	r3, #1
 800119e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011a8:	2300      	movs	r3, #0
 80011aa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ac:	463b      	mov	r3, r7
 80011ae:	4619      	mov	r1, r3
 80011b0:	481b      	ldr	r0, [pc, #108]	; (8001220 <MX_GPIO_Init+0x140>)
 80011b2:	f004 fc82 	bl	8005aba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80011b6:	2302      	movs	r3, #2
 80011b8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011ba:	2301      	movs	r3, #1
 80011bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80011be:	2303      	movs	r3, #3
 80011c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ca:	463b      	mov	r3, r7
 80011cc:	4619      	mov	r1, r3
 80011ce:	4814      	ldr	r0, [pc, #80]	; (8001220 <MX_GPIO_Init+0x140>)
 80011d0:	f004 fc73 	bl	8005aba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 80011d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011d8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011da:	2301      	movs	r3, #1
 80011dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80011de:	2303      	movs	r3, #3
 80011e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ea:	463b      	mov	r3, r7
 80011ec:	4619      	mov	r1, r3
 80011ee:	480d      	ldr	r0, [pc, #52]	; (8001224 <MX_GPIO_Init+0x144>)
 80011f0:	f004 fc63 	bl	8005aba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80011f4:	2380      	movs	r3, #128	; 0x80
 80011f6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011f8:	2301      	movs	r3, #1
 80011fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001204:	2300      	movs	r3, #0
 8001206:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001208:	463b      	mov	r3, r7
 800120a:	4619      	mov	r1, r3
 800120c:	4804      	ldr	r0, [pc, #16]	; (8001220 <MX_GPIO_Init+0x140>)
 800120e:	f004 fc54 	bl	8005aba <LL_GPIO_Init>

}
 8001212:	bf00      	nop
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40020000 	.word	0x40020000
 8001220:	40020400 	.word	0x40020400
 8001224:	40020800 	.word	0x40020800

08001228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <HAL_MspInit+0x44>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	4a0e      	ldr	r2, [pc, #56]	; (800127c <HAL_MspInit+0x44>)
 8001244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001248:	6413      	str	r3, [r2, #64]	; 0x40
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <HAL_MspInit+0x44>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <HAL_MspInit+0x44>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	4a08      	ldr	r2, [pc, #32]	; (800127c <HAL_MspInit+0x44>)
 800125c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001260:	6453      	str	r3, [r2, #68]	; 0x44
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_MspInit+0x44>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800

08001280 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a25      	ldr	r2, [pc, #148]	; (8001334 <HAL_SPI_MspInit+0xb4>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d144      	bne.n	800132c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012a2:	4b25      	ldr	r3, [pc, #148]	; (8001338 <HAL_SPI_MspInit+0xb8>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	4a24      	ldr	r2, [pc, #144]	; (8001338 <HAL_SPI_MspInit+0xb8>)
 80012a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ac:	6413      	str	r3, [r2, #64]	; 0x40
 80012ae:	4b22      	ldr	r3, [pc, #136]	; (8001338 <HAL_SPI_MspInit+0xb8>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ba:	4b1f      	ldr	r3, [pc, #124]	; (8001338 <HAL_SPI_MspInit+0xb8>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a1e      	ldr	r2, [pc, #120]	; (8001338 <HAL_SPI_MspInit+0xb8>)
 80012c0:	f043 0304 	orr.w	r3, r3, #4
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <HAL_SPI_MspInit+0xb8>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0304 	and.w	r3, r3, #4
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d2:	4b19      	ldr	r3, [pc, #100]	; (8001338 <HAL_SPI_MspInit+0xb8>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a18      	ldr	r2, [pc, #96]	; (8001338 <HAL_SPI_MspInit+0xb8>)
 80012d8:	f043 0302 	orr.w	r3, r3, #2
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b16      	ldr	r3, [pc, #88]	; (8001338 <HAL_SPI_MspInit+0xb8>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80012ea:	2306      	movs	r3, #6
 80012ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f6:	2303      	movs	r3, #3
 80012f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012fa:	2305      	movs	r3, #5
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	4619      	mov	r1, r3
 8001304:	480d      	ldr	r0, [pc, #52]	; (800133c <HAL_SPI_MspInit+0xbc>)
 8001306:	f000 fe65 	bl	8001fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800130a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800130e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	2302      	movs	r3, #2
 8001312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001318:	2303      	movs	r3, #3
 800131a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800131c:	2305      	movs	r3, #5
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4619      	mov	r1, r3
 8001326:	4806      	ldr	r0, [pc, #24]	; (8001340 <HAL_SPI_MspInit+0xc0>)
 8001328:	f000 fe54 	bl	8001fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800132c:	bf00      	nop
 800132e:	3728      	adds	r7, #40	; 0x28
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40003800 	.word	0x40003800
 8001338:	40023800 	.word	0x40023800
 800133c:	40020800 	.word	0x40020800
 8001340:	40020400 	.word	0x40020400

08001344 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a0a      	ldr	r2, [pc, #40]	; (800137c <HAL_TIM_Base_MspInit+0x38>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d10b      	bne.n	800136e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001356:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <HAL_TIM_Base_MspInit+0x3c>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	4a09      	ldr	r2, [pc, #36]	; (8001380 <HAL_TIM_Base_MspInit+0x3c>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6453      	str	r3, [r2, #68]	; 0x44
 8001362:	4b07      	ldr	r3, [pc, #28]	; (8001380 <HAL_TIM_Base_MspInit+0x3c>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800136e:	bf00      	nop
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40010000 	.word	0x40010000
 8001380:	40023800 	.word	0x40023800

08001384 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08a      	sub	sp, #40	; 0x28
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a32      	ldr	r2, [pc, #200]	; (800146c <HAL_UART_MspInit+0xe8>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d15e      	bne.n	8001464 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013a6:	4b32      	ldr	r3, [pc, #200]	; (8001470 <HAL_UART_MspInit+0xec>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	4a31      	ldr	r2, [pc, #196]	; (8001470 <HAL_UART_MspInit+0xec>)
 80013ac:	f043 0310 	orr.w	r3, r3, #16
 80013b0:	6453      	str	r3, [r2, #68]	; 0x44
 80013b2:	4b2f      	ldr	r3, [pc, #188]	; (8001470 <HAL_UART_MspInit+0xec>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	f003 0310 	and.w	r3, r3, #16
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013be:	4b2c      	ldr	r3, [pc, #176]	; (8001470 <HAL_UART_MspInit+0xec>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a2b      	ldr	r2, [pc, #172]	; (8001470 <HAL_UART_MspInit+0xec>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b29      	ldr	r3, [pc, #164]	; (8001470 <HAL_UART_MspInit+0xec>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80013d6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80013da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e4:	2303      	movs	r3, #3
 80013e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80013e8:	2304      	movs	r3, #4
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	4820      	ldr	r0, [pc, #128]	; (8001474 <HAL_UART_MspInit+0xf0>)
 80013f4:	f000 fdee 	bl	8001fd4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80013f8:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <HAL_UART_MspInit+0xf4>)
 80013fa:	4a20      	ldr	r2, [pc, #128]	; (800147c <HAL_UART_MspInit+0xf8>)
 80013fc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80013fe:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <HAL_UART_MspInit+0xf4>)
 8001400:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001404:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001406:	4b1c      	ldr	r3, [pc, #112]	; (8001478 <HAL_UART_MspInit+0xf4>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800140c:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <HAL_UART_MspInit+0xf4>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001412:	4b19      	ldr	r3, [pc, #100]	; (8001478 <HAL_UART_MspInit+0xf4>)
 8001414:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001418:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800141a:	4b17      	ldr	r3, [pc, #92]	; (8001478 <HAL_UART_MspInit+0xf4>)
 800141c:	2200      	movs	r2, #0
 800141e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001420:	4b15      	ldr	r3, [pc, #84]	; (8001478 <HAL_UART_MspInit+0xf4>)
 8001422:	2200      	movs	r2, #0
 8001424:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <HAL_UART_MspInit+0xf4>)
 8001428:	2200      	movs	r2, #0
 800142a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_UART_MspInit+0xf4>)
 800142e:	2200      	movs	r2, #0
 8001430:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <HAL_UART_MspInit+0xf4>)
 8001434:	2200      	movs	r2, #0
 8001436:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001438:	480f      	ldr	r0, [pc, #60]	; (8001478 <HAL_UART_MspInit+0xf4>)
 800143a:	f000 fa33 	bl	80018a4 <HAL_DMA_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001444:	f7ff fef0 	bl	8001228 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a0b      	ldr	r2, [pc, #44]	; (8001478 <HAL_UART_MspInit+0xf4>)
 800144c:	66da      	str	r2, [r3, #108]	; 0x6c
 800144e:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <HAL_UART_MspInit+0xf4>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001454:	2200      	movs	r2, #0
 8001456:	2100      	movs	r1, #0
 8001458:	2025      	movs	r0, #37	; 0x25
 800145a:	f000 f9ec 	bl	8001836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800145e:	2025      	movs	r0, #37	; 0x25
 8001460:	f000 fa05 	bl	800186e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001464:	bf00      	nop
 8001466:	3728      	adds	r7, #40	; 0x28
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40011000 	.word	0x40011000
 8001470:	40023800 	.word	0x40023800
 8001474:	40020400 	.word	0x40020400
 8001478:	2007c968 	.word	0x2007c968
 800147c:	40026440 	.word	0x40026440

08001480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001492:	e7fe      	b.n	8001492 <HardFault_Handler+0x4>

08001494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001498:	e7fe      	b.n	8001498 <MemManage_Handler+0x4>

0800149a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800149e:	e7fe      	b.n	800149e <BusFault_Handler+0x4>

080014a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <UsageFault_Handler+0x4>

080014a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d4:	f000 f892 	bl	80015fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}

080014dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014e0:	4802      	ldr	r0, [pc, #8]	; (80014ec <USART1_IRQHandler+0x10>)
 80014e2:	f003 fb8b 	bl	8004bfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	2007c9c8 	.word	0x2007c9c8

080014f0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80014f4:	4802      	ldr	r0, [pc, #8]	; (8001500 <DMA2_Stream2_IRQHandler+0x10>)
 80014f6:	f000 fb05 	bl	8001b04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	2007c968 	.word	0x2007c968

08001504 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <SystemInit+0x28>)
 800150a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800150e:	4a07      	ldr	r2, [pc, #28]	; (800152c <SystemInit+0x28>)
 8001510:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001514:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001518:	4b04      	ldr	r3, [pc, #16]	; (800152c <SystemInit+0x28>)
 800151a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800151e:	609a      	str	r2, [r3, #8]
#endif
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001530:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001568 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001534:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001536:	e003      	b.n	8001540 <LoopCopyDataInit>

08001538 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800153a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800153c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800153e:	3104      	adds	r1, #4

08001540 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001540:	480b      	ldr	r0, [pc, #44]	; (8001570 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001542:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001544:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001546:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001548:	d3f6      	bcc.n	8001538 <CopyDataInit>
  ldr  r2, =_sbss
 800154a:	4a0b      	ldr	r2, [pc, #44]	; (8001578 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800154c:	e002      	b.n	8001554 <LoopFillZerobss>

0800154e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800154e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001550:	f842 3b04 	str.w	r3, [r2], #4

08001554 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001554:	4b09      	ldr	r3, [pc, #36]	; (800157c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001556:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001558:	d3f9      	bcc.n	800154e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800155a:	f7ff ffd3 	bl	8001504 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800155e:	f004 fb9d 	bl	8005c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001562:	f7ff fb1b 	bl	8000b9c <main>
  bx  lr    
 8001566:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001568:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800156c:	080062f8 	.word	0x080062f8
  ldr  r0, =_sdata
 8001570:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001574:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8001578:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 800157c:	2007ca90 	.word	0x2007ca90

08001580 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001580:	e7fe      	b.n	8001580 <ADC_IRQHandler>

08001582 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001586:	2003      	movs	r0, #3
 8001588:	f000 f94a 	bl	8001820 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800158c:	2000      	movs	r0, #0
 800158e:	f000 f805 	bl	800159c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001592:	f7ff fe51 	bl	8001238 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	bd80      	pop	{r7, pc}

0800159c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_InitTick+0x54>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <HAL_InitTick+0x58>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	4619      	mov	r1, r3
 80015ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 f965 	bl	800188a <HAL_SYSTICK_Config>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e00e      	b.n	80015e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b0f      	cmp	r3, #15
 80015ce:	d80a      	bhi.n	80015e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d0:	2200      	movs	r2, #0
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	f04f 30ff 	mov.w	r0, #4294967295
 80015d8:	f000 f92d 	bl	8001836 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015dc:	4a06      	ldr	r2, [pc, #24]	; (80015f8 <HAL_InitTick+0x5c>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
 80015e4:	e000      	b.n	80015e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000014 	.word	0x20000014
 80015f4:	2000001c 	.word	0x2000001c
 80015f8:	20000018 	.word	0x20000018

080015fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_IncTick+0x20>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_IncTick+0x24>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4413      	add	r3, r2
 800160c:	4a04      	ldr	r2, [pc, #16]	; (8001620 <HAL_IncTick+0x24>)
 800160e:	6013      	str	r3, [r2, #0]
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	2000001c 	.word	0x2000001c
 8001620:	2007ca8c 	.word	0x2007ca8c

08001624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return uwTick;
 8001628:	4b03      	ldr	r3, [pc, #12]	; (8001638 <HAL_GetTick+0x14>)
 800162a:	681b      	ldr	r3, [r3, #0]
}
 800162c:	4618      	mov	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	2007ca8c 	.word	0x2007ca8c

0800163c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001644:	f7ff ffee 	bl	8001624 <HAL_GetTick>
 8001648:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001654:	d005      	beq.n	8001662 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <HAL_Delay+0x40>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	461a      	mov	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4413      	add	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001662:	bf00      	nop
 8001664:	f7ff ffde 	bl	8001624 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	429a      	cmp	r2, r3
 8001672:	d8f7      	bhi.n	8001664 <HAL_Delay+0x28>
  {
  }
}
 8001674:	bf00      	nop
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	2000001c 	.word	0x2000001c

08001680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <__NVIC_SetPriorityGrouping+0x40>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800169c:	4013      	ands	r3, r2
 800169e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <__NVIC_SetPriorityGrouping+0x44>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ae:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <__NVIC_SetPriorityGrouping+0x40>)
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	60d3      	str	r3, [r2, #12]
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000ed00 	.word	0xe000ed00
 80016c4:	05fa0000 	.word	0x05fa0000

080016c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016cc:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <__NVIC_GetPriorityGrouping+0x18>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	0a1b      	lsrs	r3, r3, #8
 80016d2:	f003 0307 	and.w	r3, r3, #7
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	db0b      	blt.n	800170e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	f003 021f 	and.w	r2, r3, #31
 80016fc:	4907      	ldr	r1, [pc, #28]	; (800171c <__NVIC_EnableIRQ+0x38>)
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	095b      	lsrs	r3, r3, #5
 8001704:	2001      	movs	r0, #1
 8001706:	fa00 f202 	lsl.w	r2, r0, r2
 800170a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000e100 	.word	0xe000e100

08001720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	6039      	str	r1, [r7, #0]
 800172a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	2b00      	cmp	r3, #0
 8001732:	db0a      	blt.n	800174a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	b2da      	uxtb	r2, r3
 8001738:	490c      	ldr	r1, [pc, #48]	; (800176c <__NVIC_SetPriority+0x4c>)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	0112      	lsls	r2, r2, #4
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	440b      	add	r3, r1
 8001744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001748:	e00a      	b.n	8001760 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4908      	ldr	r1, [pc, #32]	; (8001770 <__NVIC_SetPriority+0x50>)
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	3b04      	subs	r3, #4
 8001758:	0112      	lsls	r2, r2, #4
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	440b      	add	r3, r1
 800175e:	761a      	strb	r2, [r3, #24]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000e100 	.word	0xe000e100
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	; 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f1c3 0307 	rsb	r3, r3, #7
 800178e:	2b04      	cmp	r3, #4
 8001790:	bf28      	it	cs
 8001792:	2304      	movcs	r3, #4
 8001794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3304      	adds	r3, #4
 800179a:	2b06      	cmp	r3, #6
 800179c:	d902      	bls.n	80017a4 <NVIC_EncodePriority+0x30>
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3b03      	subs	r3, #3
 80017a2:	e000      	b.n	80017a6 <NVIC_EncodePriority+0x32>
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43da      	mvns	r2, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	401a      	ands	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017bc:	f04f 31ff 	mov.w	r1, #4294967295
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	fa01 f303 	lsl.w	r3, r1, r3
 80017c6:	43d9      	mvns	r1, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	4313      	orrs	r3, r2
         );
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3724      	adds	r7, #36	; 0x24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
	...

080017dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017ec:	d301      	bcc.n	80017f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00f      	b.n	8001812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f2:	4a0a      	ldr	r2, [pc, #40]	; (800181c <SysTick_Config+0x40>)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017fa:	210f      	movs	r1, #15
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	f7ff ff8e 	bl	8001720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <SysTick_Config+0x40>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800180a:	4b04      	ldr	r3, [pc, #16]	; (800181c <SysTick_Config+0x40>)
 800180c:	2207      	movs	r2, #7
 800180e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	e000e010 	.word	0xe000e010

08001820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff ff29 	bl	8001680 <__NVIC_SetPriorityGrouping>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001836:	b580      	push	{r7, lr}
 8001838:	b086      	sub	sp, #24
 800183a:	af00      	add	r7, sp, #0
 800183c:	4603      	mov	r3, r0
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
 8001842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001848:	f7ff ff3e 	bl	80016c8 <__NVIC_GetPriorityGrouping>
 800184c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	68b9      	ldr	r1, [r7, #8]
 8001852:	6978      	ldr	r0, [r7, #20]
 8001854:	f7ff ff8e 	bl	8001774 <NVIC_EncodePriority>
 8001858:	4602      	mov	r2, r0
 800185a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff5d 	bl	8001720 <__NVIC_SetPriority>
}
 8001866:	bf00      	nop
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	4603      	mov	r3, r0
 8001876:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff31 	bl	80016e4 <__NVIC_EnableIRQ>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff ffa2 	bl	80017dc <SysTick_Config>
 8001898:	4603      	mov	r3, r0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018b0:	f7ff feb8 	bl	8001624 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d101      	bne.n	80018c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e099      	b.n	80019f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2202      	movs	r2, #2
 80018cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f022 0201 	bic.w	r2, r2, #1
 80018de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018e0:	e00f      	b.n	8001902 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018e2:	f7ff fe9f 	bl	8001624 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b05      	cmp	r3, #5
 80018ee:	d908      	bls.n	8001902 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2220      	movs	r2, #32
 80018f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2203      	movs	r2, #3
 80018fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e078      	b.n	80019f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1e8      	bne.n	80018e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	4b38      	ldr	r3, [pc, #224]	; (80019fc <HAL_DMA_Init+0x158>)
 800191c:	4013      	ands	r3, r2
 800191e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800192e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800193a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001946:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	4313      	orrs	r3, r2
 8001952:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	2b04      	cmp	r3, #4
 800195a:	d107      	bne.n	800196c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001964:	4313      	orrs	r3, r2
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	4313      	orrs	r3, r2
 800196a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	f023 0307 	bic.w	r3, r3, #7
 8001982:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	4313      	orrs	r3, r2
 800198c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001992:	2b04      	cmp	r3, #4
 8001994:	d117      	bne.n	80019c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	4313      	orrs	r3, r2
 800199e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00e      	beq.n	80019c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 fa99 	bl	8001ee0 <DMA_CheckFifoParam>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d008      	beq.n	80019c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2240      	movs	r2, #64	; 0x40
 80019b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019c2:	2301      	movs	r3, #1
 80019c4:	e016      	b.n	80019f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 fa50 	bl	8001e74 <DMA_CalcBaseAndBitshift>
 80019d4:	4603      	mov	r3, r0
 80019d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019dc:	223f      	movs	r2, #63	; 0x3f
 80019de:	409a      	lsls	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	e010803f 	.word	0xe010803f

08001a00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
 8001a0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a16:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d101      	bne.n	8001a26 <HAL_DMA_Start_IT+0x26>
 8001a22:	2302      	movs	r3, #2
 8001a24:	e048      	b.n	8001ab8 <HAL_DMA_Start_IT+0xb8>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d137      	bne.n	8001aaa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	68b9      	ldr	r1, [r7, #8]
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f000 f9e2 	bl	8001e18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a58:	223f      	movs	r2, #63	; 0x3f
 8001a5a:	409a      	lsls	r2, r3
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0216 	orr.w	r2, r2, #22
 8001a6e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	695a      	ldr	r2, [r3, #20]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a7e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d007      	beq.n	8001a98 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f042 0208 	orr.w	r2, r2, #8
 8001a96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f042 0201 	orr.w	r2, r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	e005      	b.n	8001ab6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d004      	beq.n	8001ade <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2280      	movs	r2, #128	; 0x80
 8001ad8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e00c      	b.n	8001af8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2205      	movs	r2, #5
 8001ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 0201 	bic.w	r2, r2, #1
 8001af4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001b10:	4b92      	ldr	r3, [pc, #584]	; (8001d5c <HAL_DMA_IRQHandler+0x258>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a92      	ldr	r2, [pc, #584]	; (8001d60 <HAL_DMA_IRQHandler+0x25c>)
 8001b16:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1a:	0a9b      	lsrs	r3, r3, #10
 8001b1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b2e:	2208      	movs	r2, #8
 8001b30:	409a      	lsls	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4013      	ands	r3, r2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d01a      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d013      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0204 	bic.w	r2, r2, #4
 8001b56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b5c:	2208      	movs	r2, #8
 8001b5e:	409a      	lsls	r2, r3
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b68:	f043 0201 	orr.w	r2, r3, #1
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b74:	2201      	movs	r2, #1
 8001b76:	409a      	lsls	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d012      	beq.n	8001ba6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00b      	beq.n	8001ba6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b92:	2201      	movs	r2, #1
 8001b94:	409a      	lsls	r2, r3
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9e:	f043 0202 	orr.w	r2, r3, #2
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001baa:	2204      	movs	r2, #4
 8001bac:	409a      	lsls	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d012      	beq.n	8001bdc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d00b      	beq.n	8001bdc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc8:	2204      	movs	r2, #4
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd4:	f043 0204 	orr.w	r2, r3, #4
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be0:	2210      	movs	r2, #16
 8001be2:	409a      	lsls	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d043      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d03c      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bfe:	2210      	movs	r2, #16
 8001c00:	409a      	lsls	r2, r3
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d018      	beq.n	8001c46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d108      	bne.n	8001c34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d024      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	4798      	blx	r3
 8001c32:	e01f      	b.n	8001c74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d01b      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	4798      	blx	r3
 8001c44:	e016      	b.n	8001c74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d107      	bne.n	8001c64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0208 	bic.w	r2, r2, #8
 8001c62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c78:	2220      	movs	r2, #32
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 808e 	beq.w	8001da2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0310 	and.w	r3, r3, #16
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 8086 	beq.w	8001da2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c9a:	2220      	movs	r2, #32
 8001c9c:	409a      	lsls	r2, r3
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b05      	cmp	r3, #5
 8001cac:	d136      	bne.n	8001d1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0216 	bic.w	r2, r2, #22
 8001cbc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	695a      	ldr	r2, [r3, #20]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ccc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d103      	bne.n	8001cde <HAL_DMA_IRQHandler+0x1da>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d007      	beq.n	8001cee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 0208 	bic.w	r2, r2, #8
 8001cec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf2:	223f      	movs	r2, #63	; 0x3f
 8001cf4:	409a      	lsls	r2, r3
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d07d      	beq.n	8001e0e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	4798      	blx	r3
        }
        return;
 8001d1a:	e078      	b.n	8001e0e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d01c      	beq.n	8001d64 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d108      	bne.n	8001d4a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d030      	beq.n	8001da2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	4798      	blx	r3
 8001d48:	e02b      	b.n	8001da2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d027      	beq.n	8001da2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	4798      	blx	r3
 8001d5a:	e022      	b.n	8001da2 <HAL_DMA_IRQHandler+0x29e>
 8001d5c:	20000014 	.word	0x20000014
 8001d60:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10f      	bne.n	8001d92 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0210 	bic.w	r2, r2, #16
 8001d80:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d032      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d022      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2205      	movs	r2, #5
 8001dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0201 	bic.w	r2, r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d307      	bcc.n	8001dea <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1f2      	bne.n	8001dce <HAL_DMA_IRQHandler+0x2ca>
 8001de8:	e000      	b.n	8001dec <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001dea:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d005      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	4798      	blx	r3
 8001e0c:	e000      	b.n	8001e10 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001e0e:	bf00      	nop
    }
  }
}
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop

08001e18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
 8001e24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2b40      	cmp	r3, #64	; 0x40
 8001e44:	d108      	bne.n	8001e58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e56:	e007      	b.n	8001e68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68ba      	ldr	r2, [r7, #8]
 8001e5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	60da      	str	r2, [r3, #12]
}
 8001e68:	bf00      	nop
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	3b10      	subs	r3, #16
 8001e84:	4a13      	ldr	r2, [pc, #76]	; (8001ed4 <DMA_CalcBaseAndBitshift+0x60>)
 8001e86:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8a:	091b      	lsrs	r3, r3, #4
 8001e8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e8e:	4a12      	ldr	r2, [pc, #72]	; (8001ed8 <DMA_CalcBaseAndBitshift+0x64>)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4413      	add	r3, r2
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2b03      	cmp	r3, #3
 8001ea0:	d908      	bls.n	8001eb4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <DMA_CalcBaseAndBitshift+0x68>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	1d1a      	adds	r2, r3, #4
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	659a      	str	r2, [r3, #88]	; 0x58
 8001eb2:	e006      	b.n	8001ec2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4b08      	ldr	r3, [pc, #32]	; (8001edc <DMA_CalcBaseAndBitshift+0x68>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	aaaaaaab 	.word	0xaaaaaaab
 8001ed8:	08006070 	.word	0x08006070
 8001edc:	fffffc00 	.word	0xfffffc00

08001ee0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d11f      	bne.n	8001f3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	d855      	bhi.n	8001fac <DMA_CheckFifoParam+0xcc>
 8001f00:	a201      	add	r2, pc, #4	; (adr r2, 8001f08 <DMA_CheckFifoParam+0x28>)
 8001f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f06:	bf00      	nop
 8001f08:	08001f19 	.word	0x08001f19
 8001f0c:	08001f2b 	.word	0x08001f2b
 8001f10:	08001f19 	.word	0x08001f19
 8001f14:	08001fad 	.word	0x08001fad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d045      	beq.n	8001fb0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f28:	e042      	b.n	8001fb0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f32:	d13f      	bne.n	8001fb4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f38:	e03c      	b.n	8001fb4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f42:	d121      	bne.n	8001f88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2b03      	cmp	r3, #3
 8001f48:	d836      	bhi.n	8001fb8 <DMA_CheckFifoParam+0xd8>
 8001f4a:	a201      	add	r2, pc, #4	; (adr r2, 8001f50 <DMA_CheckFifoParam+0x70>)
 8001f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f50:	08001f61 	.word	0x08001f61
 8001f54:	08001f67 	.word	0x08001f67
 8001f58:	08001f61 	.word	0x08001f61
 8001f5c:	08001f79 	.word	0x08001f79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	73fb      	strb	r3, [r7, #15]
      break;
 8001f64:	e02f      	b.n	8001fc6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d024      	beq.n	8001fbc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f76:	e021      	b.n	8001fbc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f80:	d11e      	bne.n	8001fc0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f86:	e01b      	b.n	8001fc0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d902      	bls.n	8001f94 <DMA_CheckFifoParam+0xb4>
 8001f8e:	2b03      	cmp	r3, #3
 8001f90:	d003      	beq.n	8001f9a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f92:	e018      	b.n	8001fc6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	73fb      	strb	r3, [r7, #15]
      break;
 8001f98:	e015      	b.n	8001fc6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00e      	beq.n	8001fc4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	73fb      	strb	r3, [r7, #15]
      break;
 8001faa:	e00b      	b.n	8001fc4 <DMA_CheckFifoParam+0xe4>
      break;
 8001fac:	bf00      	nop
 8001fae:	e00a      	b.n	8001fc6 <DMA_CheckFifoParam+0xe6>
      break;
 8001fb0:	bf00      	nop
 8001fb2:	e008      	b.n	8001fc6 <DMA_CheckFifoParam+0xe6>
      break;
 8001fb4:	bf00      	nop
 8001fb6:	e006      	b.n	8001fc6 <DMA_CheckFifoParam+0xe6>
      break;
 8001fb8:	bf00      	nop
 8001fba:	e004      	b.n	8001fc6 <DMA_CheckFifoParam+0xe6>
      break;
 8001fbc:	bf00      	nop
 8001fbe:	e002      	b.n	8001fc6 <DMA_CheckFifoParam+0xe6>
      break;   
 8001fc0:	bf00      	nop
 8001fc2:	e000      	b.n	8001fc6 <DMA_CheckFifoParam+0xe6>
      break;
 8001fc4:	bf00      	nop
    }
  } 
  
  return status; 
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b089      	sub	sp, #36	; 0x24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
 8001ff2:	e175      	b.n	80022e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	429a      	cmp	r2, r3
 800200e:	f040 8164 	bne.w	80022da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d00b      	beq.n	8002032 <HAL_GPIO_Init+0x5e>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b02      	cmp	r3, #2
 8002020:	d007      	beq.n	8002032 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002026:	2b11      	cmp	r3, #17
 8002028:	d003      	beq.n	8002032 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b12      	cmp	r3, #18
 8002030:	d130      	bne.n	8002094 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	2203      	movs	r2, #3
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4313      	orrs	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002068:	2201      	movs	r2, #1
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	091b      	lsrs	r3, r3, #4
 800207e:	f003 0201 	and.w	r2, r3, #1
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	2203      	movs	r2, #3
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d003      	beq.n	80020d4 <HAL_GPIO_Init+0x100>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b12      	cmp	r3, #18
 80020d2:	d123      	bne.n	800211c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	08da      	lsrs	r2, r3, #3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3208      	adds	r2, #8
 80020dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	220f      	movs	r2, #15
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	691a      	ldr	r2, [r3, #16]
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	08da      	lsrs	r2, r3, #3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3208      	adds	r2, #8
 8002116:	69b9      	ldr	r1, [r7, #24]
 8002118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	2203      	movs	r2, #3
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 0203 	and.w	r2, r3, #3
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 80be 	beq.w	80022da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800215e:	4b65      	ldr	r3, [pc, #404]	; (80022f4 <HAL_GPIO_Init+0x320>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	4a64      	ldr	r2, [pc, #400]	; (80022f4 <HAL_GPIO_Init+0x320>)
 8002164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002168:	6453      	str	r3, [r2, #68]	; 0x44
 800216a:	4b62      	ldr	r3, [pc, #392]	; (80022f4 <HAL_GPIO_Init+0x320>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002176:	4a60      	ldr	r2, [pc, #384]	; (80022f8 <HAL_GPIO_Init+0x324>)
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	089b      	lsrs	r3, r3, #2
 800217c:	3302      	adds	r3, #2
 800217e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002182:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	220f      	movs	r2, #15
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a57      	ldr	r2, [pc, #348]	; (80022fc <HAL_GPIO_Init+0x328>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d037      	beq.n	8002212 <HAL_GPIO_Init+0x23e>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a56      	ldr	r2, [pc, #344]	; (8002300 <HAL_GPIO_Init+0x32c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d031      	beq.n	800220e <HAL_GPIO_Init+0x23a>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a55      	ldr	r2, [pc, #340]	; (8002304 <HAL_GPIO_Init+0x330>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d02b      	beq.n	800220a <HAL_GPIO_Init+0x236>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a54      	ldr	r2, [pc, #336]	; (8002308 <HAL_GPIO_Init+0x334>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d025      	beq.n	8002206 <HAL_GPIO_Init+0x232>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a53      	ldr	r2, [pc, #332]	; (800230c <HAL_GPIO_Init+0x338>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d01f      	beq.n	8002202 <HAL_GPIO_Init+0x22e>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a52      	ldr	r2, [pc, #328]	; (8002310 <HAL_GPIO_Init+0x33c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d019      	beq.n	80021fe <HAL_GPIO_Init+0x22a>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a51      	ldr	r2, [pc, #324]	; (8002314 <HAL_GPIO_Init+0x340>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d013      	beq.n	80021fa <HAL_GPIO_Init+0x226>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a50      	ldr	r2, [pc, #320]	; (8002318 <HAL_GPIO_Init+0x344>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00d      	beq.n	80021f6 <HAL_GPIO_Init+0x222>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a4f      	ldr	r2, [pc, #316]	; (800231c <HAL_GPIO_Init+0x348>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d007      	beq.n	80021f2 <HAL_GPIO_Init+0x21e>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a4e      	ldr	r2, [pc, #312]	; (8002320 <HAL_GPIO_Init+0x34c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d101      	bne.n	80021ee <HAL_GPIO_Init+0x21a>
 80021ea:	2309      	movs	r3, #9
 80021ec:	e012      	b.n	8002214 <HAL_GPIO_Init+0x240>
 80021ee:	230a      	movs	r3, #10
 80021f0:	e010      	b.n	8002214 <HAL_GPIO_Init+0x240>
 80021f2:	2308      	movs	r3, #8
 80021f4:	e00e      	b.n	8002214 <HAL_GPIO_Init+0x240>
 80021f6:	2307      	movs	r3, #7
 80021f8:	e00c      	b.n	8002214 <HAL_GPIO_Init+0x240>
 80021fa:	2306      	movs	r3, #6
 80021fc:	e00a      	b.n	8002214 <HAL_GPIO_Init+0x240>
 80021fe:	2305      	movs	r3, #5
 8002200:	e008      	b.n	8002214 <HAL_GPIO_Init+0x240>
 8002202:	2304      	movs	r3, #4
 8002204:	e006      	b.n	8002214 <HAL_GPIO_Init+0x240>
 8002206:	2303      	movs	r3, #3
 8002208:	e004      	b.n	8002214 <HAL_GPIO_Init+0x240>
 800220a:	2302      	movs	r3, #2
 800220c:	e002      	b.n	8002214 <HAL_GPIO_Init+0x240>
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <HAL_GPIO_Init+0x240>
 8002212:	2300      	movs	r3, #0
 8002214:	69fa      	ldr	r2, [r7, #28]
 8002216:	f002 0203 	and.w	r2, r2, #3
 800221a:	0092      	lsls	r2, r2, #2
 800221c:	4093      	lsls	r3, r2
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002224:	4934      	ldr	r1, [pc, #208]	; (80022f8 <HAL_GPIO_Init+0x324>)
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	089b      	lsrs	r3, r3, #2
 800222a:	3302      	adds	r3, #2
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002232:	4b3c      	ldr	r3, [pc, #240]	; (8002324 <HAL_GPIO_Init+0x350>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	43db      	mvns	r3, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4013      	ands	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002256:	4a33      	ldr	r2, [pc, #204]	; (8002324 <HAL_GPIO_Init+0x350>)
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800225c:	4b31      	ldr	r3, [pc, #196]	; (8002324 <HAL_GPIO_Init+0x350>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002280:	4a28      	ldr	r2, [pc, #160]	; (8002324 <HAL_GPIO_Init+0x350>)
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002286:	4b27      	ldr	r3, [pc, #156]	; (8002324 <HAL_GPIO_Init+0x350>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022aa:	4a1e      	ldr	r2, [pc, #120]	; (8002324 <HAL_GPIO_Init+0x350>)
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022b0:	4b1c      	ldr	r3, [pc, #112]	; (8002324 <HAL_GPIO_Init+0x350>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022d4:	4a13      	ldr	r2, [pc, #76]	; (8002324 <HAL_GPIO_Init+0x350>)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	3301      	adds	r3, #1
 80022de:	61fb      	str	r3, [r7, #28]
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	2b0f      	cmp	r3, #15
 80022e4:	f67f ae86 	bls.w	8001ff4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80022e8:	bf00      	nop
 80022ea:	3724      	adds	r7, #36	; 0x24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40013800 	.word	0x40013800
 80022fc:	40020000 	.word	0x40020000
 8002300:	40020400 	.word	0x40020400
 8002304:	40020800 	.word	0x40020800
 8002308:	40020c00 	.word	0x40020c00
 800230c:	40021000 	.word	0x40021000
 8002310:	40021400 	.word	0x40021400
 8002314:	40021800 	.word	0x40021800
 8002318:	40021c00 	.word	0x40021c00
 800231c:	40022000 	.word	0x40022000
 8002320:	40022400 	.word	0x40022400
 8002324:	40013c00 	.word	0x40013c00

08002328 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002332:	4b23      	ldr	r3, [pc, #140]	; (80023c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	4a22      	ldr	r2, [pc, #136]	; (80023c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800233c:	6413      	str	r3, [r2, #64]	; 0x40
 800233e:	4b20      	ldr	r3, [pc, #128]	; (80023c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002346:	603b      	str	r3, [r7, #0]
 8002348:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800234a:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a1d      	ldr	r2, [pc, #116]	; (80023c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002354:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002356:	f7ff f965 	bl	8001624 <HAL_GetTick>
 800235a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800235c:	e009      	b.n	8002372 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800235e:	f7ff f961 	bl	8001624 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800236c:	d901      	bls.n	8002372 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e022      	b.n	80023b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002372:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800237e:	d1ee      	bne.n	800235e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002380:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a0f      	ldr	r2, [pc, #60]	; (80023c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800238a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800238c:	f7ff f94a 	bl	8001624 <HAL_GetTick>
 8002390:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002392:	e009      	b.n	80023a8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002394:	f7ff f946 	bl	8001624 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023a2:	d901      	bls.n	80023a8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e007      	b.n	80023b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023b4:	d1ee      	bne.n	8002394 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40007000 	.word	0x40007000

080023c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80023d0:	2300      	movs	r3, #0
 80023d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e29b      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 8087 	beq.w	80024fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023ec:	4b96      	ldr	r3, [pc, #600]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 030c 	and.w	r3, r3, #12
 80023f4:	2b04      	cmp	r3, #4
 80023f6:	d00c      	beq.n	8002412 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023f8:	4b93      	ldr	r3, [pc, #588]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 030c 	and.w	r3, r3, #12
 8002400:	2b08      	cmp	r3, #8
 8002402:	d112      	bne.n	800242a <HAL_RCC_OscConfig+0x62>
 8002404:	4b90      	ldr	r3, [pc, #576]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002410:	d10b      	bne.n	800242a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002412:	4b8d      	ldr	r3, [pc, #564]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d06c      	beq.n	80024f8 <HAL_RCC_OscConfig+0x130>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d168      	bne.n	80024f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e275      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002432:	d106      	bne.n	8002442 <HAL_RCC_OscConfig+0x7a>
 8002434:	4b84      	ldr	r3, [pc, #528]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a83      	ldr	r2, [pc, #524]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 800243a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800243e:	6013      	str	r3, [r2, #0]
 8002440:	e02e      	b.n	80024a0 <HAL_RCC_OscConfig+0xd8>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10c      	bne.n	8002464 <HAL_RCC_OscConfig+0x9c>
 800244a:	4b7f      	ldr	r3, [pc, #508]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a7e      	ldr	r2, [pc, #504]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	4b7c      	ldr	r3, [pc, #496]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a7b      	ldr	r2, [pc, #492]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 800245c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	e01d      	b.n	80024a0 <HAL_RCC_OscConfig+0xd8>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800246c:	d10c      	bne.n	8002488 <HAL_RCC_OscConfig+0xc0>
 800246e:	4b76      	ldr	r3, [pc, #472]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a75      	ldr	r2, [pc, #468]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	4b73      	ldr	r3, [pc, #460]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a72      	ldr	r2, [pc, #456]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	e00b      	b.n	80024a0 <HAL_RCC_OscConfig+0xd8>
 8002488:	4b6f      	ldr	r3, [pc, #444]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a6e      	ldr	r2, [pc, #440]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 800248e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002492:	6013      	str	r3, [r2, #0]
 8002494:	4b6c      	ldr	r3, [pc, #432]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a6b      	ldr	r2, [pc, #428]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 800249a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800249e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d013      	beq.n	80024d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a8:	f7ff f8bc 	bl	8001624 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b0:	f7ff f8b8 	bl	8001624 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b64      	cmp	r3, #100	; 0x64
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e229      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c2:	4b61      	ldr	r3, [pc, #388]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCC_OscConfig+0xe8>
 80024ce:	e014      	b.n	80024fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7ff f8a8 	bl	8001624 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d8:	f7ff f8a4 	bl	8001624 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b64      	cmp	r3, #100	; 0x64
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e215      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ea:	4b57      	ldr	r3, [pc, #348]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f0      	bne.n	80024d8 <HAL_RCC_OscConfig+0x110>
 80024f6:	e000      	b.n	80024fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d069      	beq.n	80025da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002506:	4b50      	ldr	r3, [pc, #320]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00b      	beq.n	800252a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002512:	4b4d      	ldr	r3, [pc, #308]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 030c 	and.w	r3, r3, #12
 800251a:	2b08      	cmp	r3, #8
 800251c:	d11c      	bne.n	8002558 <HAL_RCC_OscConfig+0x190>
 800251e:	4b4a      	ldr	r3, [pc, #296]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d116      	bne.n	8002558 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800252a:	4b47      	ldr	r3, [pc, #284]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d005      	beq.n	8002542 <HAL_RCC_OscConfig+0x17a>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d001      	beq.n	8002542 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e1e9      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002542:	4b41      	ldr	r3, [pc, #260]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	493d      	ldr	r1, [pc, #244]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002556:	e040      	b.n	80025da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d023      	beq.n	80025a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002560:	4b39      	ldr	r3, [pc, #228]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a38      	ldr	r2, [pc, #224]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002566:	f043 0301 	orr.w	r3, r3, #1
 800256a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256c:	f7ff f85a 	bl	8001624 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002574:	f7ff f856 	bl	8001624 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e1c7      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002586:	4b30      	ldr	r3, [pc, #192]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002592:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4929      	ldr	r1, [pc, #164]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]
 80025a6:	e018      	b.n	80025da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025a8:	4b27      	ldr	r3, [pc, #156]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a26      	ldr	r2, [pc, #152]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 80025ae:	f023 0301 	bic.w	r3, r3, #1
 80025b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b4:	f7ff f836 	bl	8001624 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025bc:	f7ff f832 	bl	8001624 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e1a3      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ce:	4b1e      	ldr	r3, [pc, #120]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d038      	beq.n	8002658 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d019      	beq.n	8002622 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ee:	4b16      	ldr	r3, [pc, #88]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 80025f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f2:	4a15      	ldr	r2, [pc, #84]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fa:	f7ff f813 	bl	8001624 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002602:	f7ff f80f 	bl	8001624 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e180      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002614:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0f0      	beq.n	8002602 <HAL_RCC_OscConfig+0x23a>
 8002620:	e01a      	b.n	8002658 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002622:	4b09      	ldr	r3, [pc, #36]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002626:	4a08      	ldr	r2, [pc, #32]	; (8002648 <HAL_RCC_OscConfig+0x280>)
 8002628:	f023 0301 	bic.w	r3, r3, #1
 800262c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262e:	f7fe fff9 	bl	8001624 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002634:	e00a      	b.n	800264c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002636:	f7fe fff5 	bl	8001624 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d903      	bls.n	800264c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e166      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
 8002648:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800264c:	4b92      	ldr	r3, [pc, #584]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 800264e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1ee      	bne.n	8002636 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 80a4 	beq.w	80027ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002666:	4b8c      	ldr	r3, [pc, #560]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10d      	bne.n	800268e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002672:	4b89      	ldr	r3, [pc, #548]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	4a88      	ldr	r2, [pc, #544]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800267c:	6413      	str	r3, [r2, #64]	; 0x40
 800267e:	4b86      	ldr	r3, [pc, #536]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800268a:	2301      	movs	r3, #1
 800268c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800268e:	4b83      	ldr	r3, [pc, #524]	; (800289c <HAL_RCC_OscConfig+0x4d4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002696:	2b00      	cmp	r3, #0
 8002698:	d118      	bne.n	80026cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800269a:	4b80      	ldr	r3, [pc, #512]	; (800289c <HAL_RCC_OscConfig+0x4d4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a7f      	ldr	r2, [pc, #508]	; (800289c <HAL_RCC_OscConfig+0x4d4>)
 80026a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a6:	f7fe ffbd 	bl	8001624 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ae:	f7fe ffb9 	bl	8001624 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b64      	cmp	r3, #100	; 0x64
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e12a      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026c0:	4b76      	ldr	r3, [pc, #472]	; (800289c <HAL_RCC_OscConfig+0x4d4>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f0      	beq.n	80026ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d106      	bne.n	80026e2 <HAL_RCC_OscConfig+0x31a>
 80026d4:	4b70      	ldr	r3, [pc, #448]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80026d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d8:	4a6f      	ldr	r2, [pc, #444]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	6713      	str	r3, [r2, #112]	; 0x70
 80026e0:	e02d      	b.n	800273e <HAL_RCC_OscConfig+0x376>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10c      	bne.n	8002704 <HAL_RCC_OscConfig+0x33c>
 80026ea:	4b6b      	ldr	r3, [pc, #428]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80026ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ee:	4a6a      	ldr	r2, [pc, #424]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80026f0:	f023 0301 	bic.w	r3, r3, #1
 80026f4:	6713      	str	r3, [r2, #112]	; 0x70
 80026f6:	4b68      	ldr	r3, [pc, #416]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80026f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fa:	4a67      	ldr	r2, [pc, #412]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80026fc:	f023 0304 	bic.w	r3, r3, #4
 8002700:	6713      	str	r3, [r2, #112]	; 0x70
 8002702:	e01c      	b.n	800273e <HAL_RCC_OscConfig+0x376>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b05      	cmp	r3, #5
 800270a:	d10c      	bne.n	8002726 <HAL_RCC_OscConfig+0x35e>
 800270c:	4b62      	ldr	r3, [pc, #392]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 800270e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002710:	4a61      	ldr	r2, [pc, #388]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002712:	f043 0304 	orr.w	r3, r3, #4
 8002716:	6713      	str	r3, [r2, #112]	; 0x70
 8002718:	4b5f      	ldr	r3, [pc, #380]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 800271a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271c:	4a5e      	ldr	r2, [pc, #376]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	6713      	str	r3, [r2, #112]	; 0x70
 8002724:	e00b      	b.n	800273e <HAL_RCC_OscConfig+0x376>
 8002726:	4b5c      	ldr	r3, [pc, #368]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272a:	4a5b      	ldr	r2, [pc, #364]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 800272c:	f023 0301 	bic.w	r3, r3, #1
 8002730:	6713      	str	r3, [r2, #112]	; 0x70
 8002732:	4b59      	ldr	r3, [pc, #356]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002736:	4a58      	ldr	r2, [pc, #352]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002738:	f023 0304 	bic.w	r3, r3, #4
 800273c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d015      	beq.n	8002772 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002746:	f7fe ff6d 	bl	8001624 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274c:	e00a      	b.n	8002764 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800274e:	f7fe ff69 	bl	8001624 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	f241 3288 	movw	r2, #5000	; 0x1388
 800275c:	4293      	cmp	r3, r2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e0d8      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002764:	4b4c      	ldr	r3, [pc, #304]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0ee      	beq.n	800274e <HAL_RCC_OscConfig+0x386>
 8002770:	e014      	b.n	800279c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002772:	f7fe ff57 	bl	8001624 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002778:	e00a      	b.n	8002790 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277a:	f7fe ff53 	bl	8001624 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	f241 3288 	movw	r2, #5000	; 0x1388
 8002788:	4293      	cmp	r3, r2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e0c2      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002790:	4b41      	ldr	r3, [pc, #260]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1ee      	bne.n	800277a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800279c:	7dfb      	ldrb	r3, [r7, #23]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d105      	bne.n	80027ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a2:	4b3d      	ldr	r3, [pc, #244]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	4a3c      	ldr	r2, [pc, #240]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80027a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 80ae 	beq.w	8002914 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027b8:	4b37      	ldr	r3, [pc, #220]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 030c 	and.w	r3, r3, #12
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d06d      	beq.n	80028a0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d14b      	bne.n	8002864 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027cc:	4b32      	ldr	r3, [pc, #200]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a31      	ldr	r2, [pc, #196]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80027d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7fe ff24 	bl	8001624 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e0:	f7fe ff20 	bl	8001624 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e091      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f2:	4b29      	ldr	r3, [pc, #164]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69da      	ldr	r2, [r3, #28]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	019b      	lsls	r3, r3, #6
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002814:	085b      	lsrs	r3, r3, #1
 8002816:	3b01      	subs	r3, #1
 8002818:	041b      	lsls	r3, r3, #16
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002820:	061b      	lsls	r3, r3, #24
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002828:	071b      	lsls	r3, r3, #28
 800282a:	491b      	ldr	r1, [pc, #108]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 800282c:	4313      	orrs	r3, r2
 800282e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002830:	4b19      	ldr	r3, [pc, #100]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a18      	ldr	r2, [pc, #96]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002836:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800283a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283c:	f7fe fef2 	bl	8001624 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002844:	f7fe feee 	bl	8001624 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e05f      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002856:	4b10      	ldr	r3, [pc, #64]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0f0      	beq.n	8002844 <HAL_RCC_OscConfig+0x47c>
 8002862:	e057      	b.n	8002914 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a0b      	ldr	r2, [pc, #44]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 800286a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800286e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002870:	f7fe fed8 	bl	8001624 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002878:	f7fe fed4 	bl	8001624 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e045      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800288a:	4b03      	ldr	r3, [pc, #12]	; (8002898 <HAL_RCC_OscConfig+0x4d0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f0      	bne.n	8002878 <HAL_RCC_OscConfig+0x4b0>
 8002896:	e03d      	b.n	8002914 <HAL_RCC_OscConfig+0x54c>
 8002898:	40023800 	.word	0x40023800
 800289c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80028a0:	4b1f      	ldr	r3, [pc, #124]	; (8002920 <HAL_RCC_OscConfig+0x558>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d030      	beq.n	8002910 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d129      	bne.n	8002910 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d122      	bne.n	8002910 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028d0:	4013      	ands	r3, r2
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028d8:	4293      	cmp	r3, r2
 80028da:	d119      	bne.n	8002910 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e6:	085b      	lsrs	r3, r3, #1
 80028e8:	3b01      	subs	r3, #1
 80028ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d10f      	bne.n	8002910 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d107      	bne.n	8002910 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800290c:	429a      	cmp	r2, r3
 800290e:	d001      	beq.n	8002914 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e000      	b.n	8002916 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3718      	adds	r7, #24
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40023800 	.word	0x40023800

08002924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0d0      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800293c:	4b6a      	ldr	r3, [pc, #424]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 030f 	and.w	r3, r3, #15
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d910      	bls.n	800296c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294a:	4b67      	ldr	r3, [pc, #412]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 020f 	bic.w	r2, r3, #15
 8002952:	4965      	ldr	r1, [pc, #404]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	4313      	orrs	r3, r2
 8002958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800295a:	4b63      	ldr	r3, [pc, #396]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	429a      	cmp	r2, r3
 8002966:	d001      	beq.n	800296c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0b8      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d020      	beq.n	80029ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002984:	4b59      	ldr	r3, [pc, #356]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	4a58      	ldr	r2, [pc, #352]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 800298a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800298e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800299c:	4b53      	ldr	r3, [pc, #332]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	4a52      	ldr	r2, [pc, #328]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 80029a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a8:	4b50      	ldr	r3, [pc, #320]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	494d      	ldr	r1, [pc, #308]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d040      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d107      	bne.n	80029de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ce:	4b47      	ldr	r3, [pc, #284]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d115      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e07f      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d107      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e6:	4b41      	ldr	r3, [pc, #260]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d109      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e073      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f6:	4b3d      	ldr	r3, [pc, #244]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e06b      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a06:	4b39      	ldr	r3, [pc, #228]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f023 0203 	bic.w	r2, r3, #3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	4936      	ldr	r1, [pc, #216]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a18:	f7fe fe04 	bl	8001624 <HAL_GetTick>
 8002a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1e:	e00a      	b.n	8002a36 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a20:	f7fe fe00 	bl	8001624 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e053      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a36:	4b2d      	ldr	r3, [pc, #180]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 020c 	and.w	r2, r3, #12
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d1eb      	bne.n	8002a20 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a48:	4b27      	ldr	r3, [pc, #156]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 030f 	and.w	r3, r3, #15
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d210      	bcs.n	8002a78 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a56:	4b24      	ldr	r3, [pc, #144]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f023 020f 	bic.w	r2, r3, #15
 8002a5e:	4922      	ldr	r1, [pc, #136]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a66:	4b20      	ldr	r3, [pc, #128]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d001      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e032      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d008      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a84:	4b19      	ldr	r3, [pc, #100]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	4916      	ldr	r1, [pc, #88]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d009      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002aa2:	4b12      	ldr	r3, [pc, #72]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	490e      	ldr	r1, [pc, #56]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ab6:	f000 f821 	bl	8002afc <HAL_RCC_GetSysClockFreq>
 8002aba:	4601      	mov	r1, r0
 8002abc:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	091b      	lsrs	r3, r3, #4
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <HAL_RCC_ClockConfig+0x1cc>)
 8002ac8:	5cd3      	ldrb	r3, [r2, r3]
 8002aca:	fa21 f303 	lsr.w	r3, r1, r3
 8002ace:	4a09      	ldr	r2, [pc, #36]	; (8002af4 <HAL_RCC_ClockConfig+0x1d0>)
 8002ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ad2:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <HAL_RCC_ClockConfig+0x1d4>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe fd60 	bl	800159c <HAL_InitTick>

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40023c00 	.word	0x40023c00
 8002aec:	40023800 	.word	0x40023800
 8002af0:	08006058 	.word	0x08006058
 8002af4:	20000014 	.word	0x20000014
 8002af8:	20000018 	.word	0x20000018

08002afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	607b      	str	r3, [r7, #4]
 8002b06:	2300      	movs	r3, #0
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b12:	4b63      	ldr	r3, [pc, #396]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d007      	beq.n	8002b2e <HAL_RCC_GetSysClockFreq+0x32>
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d008      	beq.n	8002b34 <HAL_RCC_GetSysClockFreq+0x38>
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f040 80b4 	bne.w	8002c90 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b28:	4b5e      	ldr	r3, [pc, #376]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b2a:	60bb      	str	r3, [r7, #8]
      break;
 8002b2c:	e0b3      	b.n	8002c96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b2e:	4b5d      	ldr	r3, [pc, #372]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b30:	60bb      	str	r3, [r7, #8]
      break;
 8002b32:	e0b0      	b.n	8002c96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b34:	4b5a      	ldr	r3, [pc, #360]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b3c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002b3e:	4b58      	ldr	r3, [pc, #352]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d04a      	beq.n	8002be0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b4a:	4b55      	ldr	r3, [pc, #340]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	099b      	lsrs	r3, r3, #6
 8002b50:	f04f 0400 	mov.w	r4, #0
 8002b54:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	ea03 0501 	and.w	r5, r3, r1
 8002b60:	ea04 0602 	and.w	r6, r4, r2
 8002b64:	4629      	mov	r1, r5
 8002b66:	4632      	mov	r2, r6
 8002b68:	f04f 0300 	mov.w	r3, #0
 8002b6c:	f04f 0400 	mov.w	r4, #0
 8002b70:	0154      	lsls	r4, r2, #5
 8002b72:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b76:	014b      	lsls	r3, r1, #5
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4622      	mov	r2, r4
 8002b7c:	1b49      	subs	r1, r1, r5
 8002b7e:	eb62 0206 	sbc.w	r2, r2, r6
 8002b82:	f04f 0300 	mov.w	r3, #0
 8002b86:	f04f 0400 	mov.w	r4, #0
 8002b8a:	0194      	lsls	r4, r2, #6
 8002b8c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b90:	018b      	lsls	r3, r1, #6
 8002b92:	1a5b      	subs	r3, r3, r1
 8002b94:	eb64 0402 	sbc.w	r4, r4, r2
 8002b98:	f04f 0100 	mov.w	r1, #0
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	00e2      	lsls	r2, r4, #3
 8002ba2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ba6:	00d9      	lsls	r1, r3, #3
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4614      	mov	r4, r2
 8002bac:	195b      	adds	r3, r3, r5
 8002bae:	eb44 0406 	adc.w	r4, r4, r6
 8002bb2:	f04f 0100 	mov.w	r1, #0
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	02a2      	lsls	r2, r4, #10
 8002bbc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002bc0:	0299      	lsls	r1, r3, #10
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4614      	mov	r4, r2
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	4621      	mov	r1, r4
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f04f 0400 	mov.w	r4, #0
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4623      	mov	r3, r4
 8002bd4:	f7fd fb30 	bl	8000238 <__aeabi_uldivmod>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	460c      	mov	r4, r1
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	e049      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002be0:	4b2f      	ldr	r3, [pc, #188]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	099b      	lsrs	r3, r3, #6
 8002be6:	f04f 0400 	mov.w	r4, #0
 8002bea:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	ea03 0501 	and.w	r5, r3, r1
 8002bf6:	ea04 0602 	and.w	r6, r4, r2
 8002bfa:	4629      	mov	r1, r5
 8002bfc:	4632      	mov	r2, r6
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	f04f 0400 	mov.w	r4, #0
 8002c06:	0154      	lsls	r4, r2, #5
 8002c08:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c0c:	014b      	lsls	r3, r1, #5
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4622      	mov	r2, r4
 8002c12:	1b49      	subs	r1, r1, r5
 8002c14:	eb62 0206 	sbc.w	r2, r2, r6
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	f04f 0400 	mov.w	r4, #0
 8002c20:	0194      	lsls	r4, r2, #6
 8002c22:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c26:	018b      	lsls	r3, r1, #6
 8002c28:	1a5b      	subs	r3, r3, r1
 8002c2a:	eb64 0402 	sbc.w	r4, r4, r2
 8002c2e:	f04f 0100 	mov.w	r1, #0
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	00e2      	lsls	r2, r4, #3
 8002c38:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c3c:	00d9      	lsls	r1, r3, #3
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4614      	mov	r4, r2
 8002c42:	195b      	adds	r3, r3, r5
 8002c44:	eb44 0406 	adc.w	r4, r4, r6
 8002c48:	f04f 0100 	mov.w	r1, #0
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	02a2      	lsls	r2, r4, #10
 8002c52:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002c56:	0299      	lsls	r1, r3, #10
 8002c58:	460b      	mov	r3, r1
 8002c5a:	4614      	mov	r4, r2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	4621      	mov	r1, r4
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f04f 0400 	mov.w	r4, #0
 8002c66:	461a      	mov	r2, r3
 8002c68:	4623      	mov	r3, r4
 8002c6a:	f7fd fae5 	bl	8000238 <__aeabi_uldivmod>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	460c      	mov	r4, r1
 8002c72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002c74:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	0c1b      	lsrs	r3, r3, #16
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	3301      	adds	r3, #1
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8c:	60bb      	str	r3, [r7, #8]
      break;
 8002c8e:	e002      	b.n	8002c96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c90:	4b04      	ldr	r3, [pc, #16]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c92:	60bb      	str	r3, [r7, #8]
      break;
 8002c94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c96:	68bb      	ldr	r3, [r7, #8]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	00f42400 	.word	0x00f42400

08002ca8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cac:	4b03      	ldr	r3, [pc, #12]	; (8002cbc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cae:	681b      	ldr	r3, [r3, #0]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	20000014 	.word	0x20000014

08002cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cc4:	f7ff fff0 	bl	8002ca8 <HAL_RCC_GetHCLKFreq>
 8002cc8:	4601      	mov	r1, r0
 8002cca:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	0a9b      	lsrs	r3, r3, #10
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	4a03      	ldr	r2, [pc, #12]	; (8002ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cd6:	5cd3      	ldrb	r3, [r2, r3]
 8002cd8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	08006068 	.word	0x08006068

08002ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cec:	f7ff ffdc 	bl	8002ca8 <HAL_RCC_GetHCLKFreq>
 8002cf0:	4601      	mov	r1, r0
 8002cf2:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	0b5b      	lsrs	r3, r3, #13
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	4a03      	ldr	r2, [pc, #12]	; (8002d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cfe:	5cd3      	ldrb	r3, [r2, r3]
 8002d00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	08006068 	.word	0x08006068

08002d10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b088      	sub	sp, #32
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d012      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d38:	4b69      	ldr	r3, [pc, #420]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	4a68      	ldr	r2, [pc, #416]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d3e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002d42:	6093      	str	r3, [r2, #8]
 8002d44:	4b66      	ldr	r3, [pc, #408]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4c:	4964      	ldr	r1, [pc, #400]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d017      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d6a:	4b5d      	ldr	r3, [pc, #372]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d78:	4959      	ldr	r1, [pc, #356]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d88:	d101      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002d96:	2301      	movs	r3, #1
 8002d98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d017      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002da6:	4b4e      	ldr	r3, [pc, #312]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	494a      	ldr	r1, [pc, #296]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dc4:	d101      	bne.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002de2:	2301      	movs	r3, #1
 8002de4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0320 	and.w	r3, r3, #32
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 808b 	beq.w	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002df4:	4b3a      	ldr	r3, [pc, #232]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	4a39      	ldr	r2, [pc, #228]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dfe:	6413      	str	r3, [r2, #64]	; 0x40
 8002e00:	4b37      	ldr	r3, [pc, #220]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e0c:	4b35      	ldr	r3, [pc, #212]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a34      	ldr	r2, [pc, #208]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e18:	f7fe fc04 	bl	8001624 <HAL_GetTick>
 8002e1c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e20:	f7fe fc00 	bl	8001624 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b64      	cmp	r3, #100	; 0x64
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e38d      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e32:	4b2c      	ldr	r3, [pc, #176]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e3e:	4b28      	ldr	r3, [pc, #160]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e46:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d035      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d02e      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e5c:	4b20      	ldr	r3, [pc, #128]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e64:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e66:	4b1e      	ldr	r3, [pc, #120]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6a:	4a1d      	ldr	r2, [pc, #116]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e70:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e72:	4b1b      	ldr	r3, [pc, #108]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e76:	4a1a      	ldr	r2, [pc, #104]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e7c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002e7e:	4a18      	ldr	r2, [pc, #96]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e84:	4b16      	ldr	r3, [pc, #88]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d114      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e90:	f7fe fbc8 	bl	8001624 <HAL_GetTick>
 8002e94:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e96:	e00a      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e98:	f7fe fbc4 	bl	8001624 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e34f      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eae:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0ee      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ec6:	d111      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002ec8:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ed4:	4b04      	ldr	r3, [pc, #16]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ed6:	400b      	ands	r3, r1
 8002ed8:	4901      	ldr	r1, [pc, #4]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	608b      	str	r3, [r1, #8]
 8002ede:	e00b      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	40007000 	.word	0x40007000
 8002ee8:	0ffffcff 	.word	0x0ffffcff
 8002eec:	4bb3      	ldr	r3, [pc, #716]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	4ab2      	ldr	r2, [pc, #712]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ef2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ef6:	6093      	str	r3, [r2, #8]
 8002ef8:	4bb0      	ldr	r3, [pc, #704]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002efa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f04:	49ad      	ldr	r1, [pc, #692]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0310 	and.w	r3, r3, #16
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d010      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f16:	4ba9      	ldr	r3, [pc, #676]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f1c:	4aa7      	ldr	r2, [pc, #668]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002f26:	4ba5      	ldr	r3, [pc, #660]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f28:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f30:	49a2      	ldr	r1, [pc, #648]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00a      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f44:	4b9d      	ldr	r3, [pc, #628]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f52:	499a      	ldr	r1, [pc, #616]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f66:	4b95      	ldr	r3, [pc, #596]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f74:	4991      	ldr	r1, [pc, #580]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00a      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f88:	4b8c      	ldr	r3, [pc, #560]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f96:	4989      	ldr	r1, [pc, #548]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002faa:	4b84      	ldr	r3, [pc, #528]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb8:	4980      	ldr	r1, [pc, #512]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00a      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fcc:	4b7b      	ldr	r3, [pc, #492]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd2:	f023 0203 	bic.w	r2, r3, #3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	4978      	ldr	r1, [pc, #480]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fee:	4b73      	ldr	r3, [pc, #460]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff4:	f023 020c 	bic.w	r2, r3, #12
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ffc:	496f      	ldr	r1, [pc, #444]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00a      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003010:	4b6a      	ldr	r3, [pc, #424]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003016:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800301e:	4967      	ldr	r1, [pc, #412]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003032:	4b62      	ldr	r3, [pc, #392]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003038:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003040:	495e      	ldr	r1, [pc, #376]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00a      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003054:	4b59      	ldr	r3, [pc, #356]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003062:	4956      	ldr	r1, [pc, #344]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003064:	4313      	orrs	r3, r2
 8003066:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003076:	4b51      	ldr	r3, [pc, #324]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003084:	494d      	ldr	r1, [pc, #308]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00a      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003098:	4b48      	ldr	r3, [pc, #288]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800309a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a6:	4945      	ldr	r1, [pc, #276]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80030ba:	4b40      	ldr	r3, [pc, #256]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c8:	493c      	ldr	r1, [pc, #240]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00a      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80030dc:	4b37      	ldr	r3, [pc, #220]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030ea:	4934      	ldr	r1, [pc, #208]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d011      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80030fe:	4b2f      	ldr	r3, [pc, #188]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003104:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800310c:	492b      	ldr	r1, [pc, #172]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003118:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800311c:	d101      	bne.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800311e:	2301      	movs	r3, #1
 8003120:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800312e:	2301      	movs	r3, #1
 8003130:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00a      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800313e:	4b1f      	ldr	r3, [pc, #124]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003144:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800314c:	491b      	ldr	r1, [pc, #108]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800314e:	4313      	orrs	r3, r2
 8003150:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00b      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003160:	4b16      	ldr	r3, [pc, #88]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003166:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003170:	4912      	ldr	r1, [pc, #72]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003172:	4313      	orrs	r3, r2
 8003174:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00b      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003184:	4b0d      	ldr	r3, [pc, #52]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003194:	4909      	ldr	r1, [pc, #36]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003196:	4313      	orrs	r3, r2
 8003198:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00f      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031a8:	4b04      	ldr	r3, [pc, #16]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b8:	e002      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80031ba:	bf00      	nop
 80031bc:	40023800 	.word	0x40023800
 80031c0:	4985      	ldr	r1, [pc, #532]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00b      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80031d4:	4b80      	ldr	r3, [pc, #512]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80031d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031da:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031e4:	497c      	ldr	r1, [pc, #496]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d005      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031fa:	f040 80d6 	bne.w	80033aa <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80031fe:	4b76      	ldr	r3, [pc, #472]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a75      	ldr	r2, [pc, #468]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003204:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003208:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800320a:	f7fe fa0b 	bl	8001624 <HAL_GetTick>
 800320e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003210:	e008      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003212:	f7fe fa07 	bl	8001624 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b64      	cmp	r3, #100	; 0x64
 800321e:	d901      	bls.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e194      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003224:	4b6c      	ldr	r3, [pc, #432]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f0      	bne.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d021      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003240:	2b00      	cmp	r3, #0
 8003242:	d11d      	bne.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003244:	4b64      	ldr	r3, [pc, #400]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003246:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800324a:	0c1b      	lsrs	r3, r3, #16
 800324c:	f003 0303 	and.w	r3, r3, #3
 8003250:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003252:	4b61      	ldr	r3, [pc, #388]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003258:	0e1b      	lsrs	r3, r3, #24
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	019a      	lsls	r2, r3, #6
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	041b      	lsls	r3, r3, #16
 800326a:	431a      	orrs	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	061b      	lsls	r3, r3, #24
 8003270:	431a      	orrs	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	071b      	lsls	r3, r3, #28
 8003278:	4957      	ldr	r1, [pc, #348]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800327a:	4313      	orrs	r3, r2
 800327c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d004      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003290:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003294:	d00a      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d02e      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032aa:	d129      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80032ac:	4b4a      	ldr	r3, [pc, #296]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80032ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032b2:	0c1b      	lsrs	r3, r3, #16
 80032b4:	f003 0303 	and.w	r3, r3, #3
 80032b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032ba:	4b47      	ldr	r3, [pc, #284]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80032bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032c0:	0f1b      	lsrs	r3, r3, #28
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	019a      	lsls	r2, r3, #6
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	041b      	lsls	r3, r3, #16
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	061b      	lsls	r3, r3, #24
 80032da:	431a      	orrs	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	071b      	lsls	r3, r3, #28
 80032e0:	493d      	ldr	r1, [pc, #244]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80032e8:	4b3b      	ldr	r3, [pc, #236]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80032ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032ee:	f023 021f 	bic.w	r2, r3, #31
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	3b01      	subs	r3, #1
 80032f8:	4937      	ldr	r1, [pc, #220]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d01d      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800330c:	4b32      	ldr	r3, [pc, #200]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800330e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003312:	0e1b      	lsrs	r3, r3, #24
 8003314:	f003 030f 	and.w	r3, r3, #15
 8003318:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800331a:	4b2f      	ldr	r3, [pc, #188]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800331c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003320:	0f1b      	lsrs	r3, r3, #28
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	019a      	lsls	r2, r3, #6
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	041b      	lsls	r3, r3, #16
 8003334:	431a      	orrs	r2, r3
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	061b      	lsls	r3, r3, #24
 800333a:	431a      	orrs	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	071b      	lsls	r3, r3, #28
 8003340:	4925      	ldr	r1, [pc, #148]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003342:	4313      	orrs	r3, r2
 8003344:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d011      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	019a      	lsls	r2, r3, #6
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	041b      	lsls	r3, r3, #16
 8003360:	431a      	orrs	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	061b      	lsls	r3, r3, #24
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	071b      	lsls	r3, r3, #28
 8003370:	4919      	ldr	r1, [pc, #100]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003372:	4313      	orrs	r3, r2
 8003374:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003378:	4b17      	ldr	r3, [pc, #92]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a16      	ldr	r2, [pc, #88]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800337e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003382:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003384:	f7fe f94e 	bl	8001624 <HAL_GetTick>
 8003388:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800338a:	e008      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800338c:	f7fe f94a 	bl	8001624 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b64      	cmp	r3, #100	; 0x64
 8003398:	d901      	bls.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e0d7      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800339e:	4b0e      	ldr	r3, [pc, #56]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0f0      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	f040 80cd 	bne.w	800354c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80033b2:	4b09      	ldr	r3, [pc, #36]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a08      	ldr	r2, [pc, #32]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80033b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033be:	f7fe f931 	bl	8001624 <HAL_GetTick>
 80033c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033c4:	e00a      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80033c6:	f7fe f92d 	bl	8001624 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b64      	cmp	r3, #100	; 0x64
 80033d2:	d903      	bls.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e0ba      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80033d8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033dc:	4b5e      	ldr	r3, [pc, #376]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033e8:	d0ed      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d009      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003406:	2b00      	cmp	r3, #0
 8003408:	d02e      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	2b00      	cmp	r3, #0
 8003410:	d12a      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003412:	4b51      	ldr	r3, [pc, #324]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003418:	0c1b      	lsrs	r3, r3, #16
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003420:	4b4d      	ldr	r3, [pc, #308]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003426:	0f1b      	lsrs	r3, r3, #28
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	019a      	lsls	r2, r3, #6
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	041b      	lsls	r3, r3, #16
 8003438:	431a      	orrs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	061b      	lsls	r3, r3, #24
 8003440:	431a      	orrs	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	071b      	lsls	r3, r3, #28
 8003446:	4944      	ldr	r1, [pc, #272]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800344e:	4b42      	ldr	r3, [pc, #264]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003454:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345c:	3b01      	subs	r3, #1
 800345e:	021b      	lsls	r3, r3, #8
 8003460:	493d      	ldr	r1, [pc, #244]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003462:	4313      	orrs	r3, r2
 8003464:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d022      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003478:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800347c:	d11d      	bne.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800347e:	4b36      	ldr	r3, [pc, #216]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003484:	0e1b      	lsrs	r3, r3, #24
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800348c:	4b32      	ldr	r3, [pc, #200]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800348e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003492:	0f1b      	lsrs	r3, r3, #28
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	019a      	lsls	r2, r3, #6
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	041b      	lsls	r3, r3, #16
 80034a6:	431a      	orrs	r2, r3
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	061b      	lsls	r3, r3, #24
 80034ac:	431a      	orrs	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	071b      	lsls	r3, r3, #28
 80034b2:	4929      	ldr	r1, [pc, #164]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0308 	and.w	r3, r3, #8
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d028      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034c6:	4b24      	ldr	r3, [pc, #144]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80034c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034cc:	0e1b      	lsrs	r3, r3, #24
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80034d4:	4b20      	ldr	r3, [pc, #128]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80034d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034da:	0c1b      	lsrs	r3, r3, #16
 80034dc:	f003 0303 	and.w	r3, r3, #3
 80034e0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	019a      	lsls	r2, r3, #6
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	041b      	lsls	r3, r3, #16
 80034ec:	431a      	orrs	r2, r3
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	061b      	lsls	r3, r3, #24
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	69db      	ldr	r3, [r3, #28]
 80034f8:	071b      	lsls	r3, r3, #28
 80034fa:	4917      	ldr	r1, [pc, #92]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003502:	4b15      	ldr	r3, [pc, #84]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003508:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003510:	4911      	ldr	r1, [pc, #68]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003512:	4313      	orrs	r3, r2
 8003514:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003518:	4b0f      	ldr	r3, [pc, #60]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a0e      	ldr	r2, [pc, #56]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800351e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003522:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003524:	f7fe f87e 	bl	8001624 <HAL_GetTick>
 8003528:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800352a:	e008      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800352c:	f7fe f87a 	bl	8001624 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b64      	cmp	r3, #100	; 0x64
 8003538:	d901      	bls.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e007      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800353e:	4b06      	ldr	r3, [pc, #24]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003546:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800354a:	d1ef      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3720      	adds	r7, #32
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40023800 	.word	0x40023800

0800355c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e084      	b.n	8003678 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	d106      	bne.n	800358e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f7fd fe79 	bl	8001280 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2202      	movs	r2, #2
 8003592:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035a4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035ae:	d902      	bls.n	80035b6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80035b0:	2300      	movs	r3, #0
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	e002      	b.n	80035bc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80035b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035ba:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80035c4:	d007      	beq.n	80035d6 <HAL_SPI_Init+0x7a>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035ce:	d002      	beq.n	80035d6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10b      	bne.n	80035f6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035e6:	d903      	bls.n	80035f0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2202      	movs	r2, #2
 80035ec:	631a      	str	r2, [r3, #48]	; 0x30
 80035ee:	e002      	b.n	80035f6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	431a      	orrs	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003614:	431a      	orrs	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	ea42 0103 	orr.w	r1, r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	0c1b      	lsrs	r3, r3, #16
 8003636:	f003 0204 	and.w	r2, r3, #4
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003644:	431a      	orrs	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	ea42 0103 	orr.w	r1, r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	430a      	orrs	r2, r1
 8003656:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	69da      	ldr	r2, [r3, #28]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003666:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b088      	sub	sp, #32
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	603b      	str	r3, [r7, #0]
 800368c:	4613      	mov	r3, r2
 800368e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800369a:	2b01      	cmp	r3, #1
 800369c:	d101      	bne.n	80036a2 <HAL_SPI_Transmit+0x22>
 800369e:	2302      	movs	r3, #2
 80036a0:	e150      	b.n	8003944 <HAL_SPI_Transmit+0x2c4>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036aa:	f7fd ffbb 	bl	8001624 <HAL_GetTick>
 80036ae:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80036b0:	88fb      	ldrh	r3, [r7, #6]
 80036b2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d002      	beq.n	80036c6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80036c0:	2302      	movs	r3, #2
 80036c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036c4:	e135      	b.n	8003932 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d002      	beq.n	80036d2 <HAL_SPI_Transmit+0x52>
 80036cc:	88fb      	ldrh	r3, [r7, #6]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d102      	bne.n	80036d8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036d6:	e12c      	b.n	8003932 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2203      	movs	r2, #3
 80036dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	88fa      	ldrh	r2, [r7, #6]
 80036f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	88fa      	ldrh	r2, [r7, #6]
 80036f6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003722:	d107      	bne.n	8003734 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003732:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373e:	2b40      	cmp	r3, #64	; 0x40
 8003740:	d007      	beq.n	8003752 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003750:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800375a:	d94b      	bls.n	80037f4 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d002      	beq.n	800376a <HAL_SPI_Transmit+0xea>
 8003764:	8afb      	ldrh	r3, [r7, #22]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d13e      	bne.n	80037e8 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376e:	881a      	ldrh	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377a:	1c9a      	adds	r2, r3, #2
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003784:	b29b      	uxth	r3, r3
 8003786:	3b01      	subs	r3, #1
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800378e:	e02b      	b.n	80037e8 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b02      	cmp	r3, #2
 800379c:	d112      	bne.n	80037c4 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a2:	881a      	ldrh	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ae:	1c9a      	adds	r2, r3, #2
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b29a      	uxth	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037c2:	e011      	b.n	80037e8 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037c4:	f7fd ff2e 	bl	8001624 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d803      	bhi.n	80037dc <HAL_SPI_Transmit+0x15c>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037da:	d102      	bne.n	80037e2 <HAL_SPI_Transmit+0x162>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d102      	bne.n	80037e8 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037e6:	e0a4      	b.n	8003932 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1ce      	bne.n	8003790 <HAL_SPI_Transmit+0x110>
 80037f2:	e07c      	b.n	80038ee <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d002      	beq.n	8003802 <HAL_SPI_Transmit+0x182>
 80037fc:	8afb      	ldrh	r3, [r7, #22]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d170      	bne.n	80038e4 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003806:	b29b      	uxth	r3, r3
 8003808:	2b01      	cmp	r3, #1
 800380a:	d912      	bls.n	8003832 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003810:	881a      	ldrh	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381c:	1c9a      	adds	r2, r3, #2
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003826:	b29b      	uxth	r3, r3
 8003828:	3b02      	subs	r3, #2
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003830:	e058      	b.n	80038e4 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	330c      	adds	r3, #12
 800383c:	7812      	ldrb	r2, [r2, #0]
 800383e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003844:	1c5a      	adds	r2, r3, #1
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800384e:	b29b      	uxth	r3, r3
 8003850:	3b01      	subs	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003858:	e044      	b.n	80038e4 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b02      	cmp	r3, #2
 8003866:	d12b      	bne.n	80038c0 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800386c:	b29b      	uxth	r3, r3
 800386e:	2b01      	cmp	r3, #1
 8003870:	d912      	bls.n	8003898 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003876:	881a      	ldrh	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003882:	1c9a      	adds	r2, r3, #2
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800388c:	b29b      	uxth	r3, r3
 800388e:	3b02      	subs	r3, #2
 8003890:	b29a      	uxth	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003896:	e025      	b.n	80038e4 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	330c      	adds	r3, #12
 80038a2:	7812      	ldrb	r2, [r2, #0]
 80038a4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038be:	e011      	b.n	80038e4 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038c0:	f7fd feb0 	bl	8001624 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d803      	bhi.n	80038d8 <HAL_SPI_Transmit+0x258>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d6:	d102      	bne.n	80038de <HAL_SPI_Transmit+0x25e>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d102      	bne.n	80038e4 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80038e2:	e026      	b.n	8003932 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1b5      	bne.n	800385a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	6839      	ldr	r1, [r7, #0]
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 f901 	bl	8003afa <SPI_EndRxTxTransaction>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d002      	beq.n	8003904 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2220      	movs	r2, #32
 8003902:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10a      	bne.n	8003922 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800390c:	2300      	movs	r3, #0
 800390e:	613b      	str	r3, [r7, #16]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	613b      	str	r3, [r7, #16]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	613b      	str	r3, [r7, #16]
 8003920:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003926:	2b00      	cmp	r3, #0
 8003928:	d002      	beq.n	8003930 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	77fb      	strb	r3, [r7, #31]
 800392e:	e000      	b.n	8003932 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8003930:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003942:	7ffb      	ldrb	r3, [r7, #31]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3720      	adds	r7, #32
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	603b      	str	r3, [r7, #0]
 8003958:	4613      	mov	r3, r2
 800395a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800395c:	e04c      	b.n	80039f8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003964:	d048      	beq.n	80039f8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003966:	f7fd fe5d 	bl	8001624 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d902      	bls.n	800397c <SPI_WaitFlagStateUntilTimeout+0x30>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d13d      	bne.n	80039f8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800398a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003994:	d111      	bne.n	80039ba <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800399e:	d004      	beq.n	80039aa <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039a8:	d107      	bne.n	80039ba <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039c2:	d10f      	bne.n	80039e4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e00f      	b.n	8003a18 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689a      	ldr	r2, [r3, #8]
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	4013      	ands	r3, r2
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	bf0c      	ite	eq
 8003a08:	2301      	moveq	r3, #1
 8003a0a:	2300      	movne	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	461a      	mov	r2, r3
 8003a10:	79fb      	ldrb	r3, [r7, #7]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d1a3      	bne.n	800395e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
 8003a2c:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8003a2e:	e057      	b.n	8003ae0 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003a36:	d106      	bne.n	8003a46 <SPI_WaitFifoStateUntilTimeout+0x26>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d103      	bne.n	8003a46 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	330c      	adds	r3, #12
 8003a44:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4c:	d048      	beq.n	8003ae0 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003a4e:	f7fd fde9 	bl	8001624 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d902      	bls.n	8003a64 <SPI_WaitFifoStateUntilTimeout+0x44>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d13d      	bne.n	8003ae0 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a72:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a7c:	d111      	bne.n	8003aa2 <SPI_WaitFifoStateUntilTimeout+0x82>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a86:	d004      	beq.n	8003a92 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a90:	d107      	bne.n	8003aa2 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aa0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aaa:	d10f      	bne.n	8003acc <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003aca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e008      	b.n	8003af2 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d19f      	bne.n	8003a30 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b086      	sub	sp, #24
 8003afe:	af02      	add	r7, sp, #8
 8003b00:	60f8      	str	r0, [r7, #12]
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f7ff ff84 	bl	8003a20 <SPI_WaitFifoStateUntilTimeout>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d007      	beq.n	8003b2e <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b22:	f043 0220 	orr.w	r2, r3, #32
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e027      	b.n	8003b7e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	2200      	movs	r2, #0
 8003b36:	2180      	movs	r1, #128	; 0x80
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f7ff ff07 	bl	800394c <SPI_WaitFlagStateUntilTimeout>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d007      	beq.n	8003b54 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b48:	f043 0220 	orr.w	r2, r3, #32
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e014      	b.n	8003b7e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f7ff ff5d 	bl	8003a20 <SPI_WaitFifoStateUntilTimeout>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d007      	beq.n	8003b7c <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b70:	f043 0220 	orr.w	r2, r3, #32
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e000      	b.n	8003b7e <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b082      	sub	sp, #8
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e01d      	b.n	8003bd4 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d106      	bne.n	8003bb2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7fd fbc9 	bl	8001344 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	4610      	mov	r0, r2
 8003bc6:	f000 fa11 	bl	8003fec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e01d      	b.n	8003c2a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f815 	bl	8003c32 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	3304      	adds	r3, #4
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	f000 f9e6 	bl	8003fec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
	...

08003c48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d101      	bne.n	8003c62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003c5e:	2302      	movs	r3, #2
 8003c60:	e105      	b.n	8003e6e <HAL_TIM_PWM_ConfigChannel+0x226>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b14      	cmp	r3, #20
 8003c76:	f200 80f0 	bhi.w	8003e5a <HAL_TIM_PWM_ConfigChannel+0x212>
 8003c7a:	a201      	add	r2, pc, #4	; (adr r2, 8003c80 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c80:	08003cd5 	.word	0x08003cd5
 8003c84:	08003e5b 	.word	0x08003e5b
 8003c88:	08003e5b 	.word	0x08003e5b
 8003c8c:	08003e5b 	.word	0x08003e5b
 8003c90:	08003d15 	.word	0x08003d15
 8003c94:	08003e5b 	.word	0x08003e5b
 8003c98:	08003e5b 	.word	0x08003e5b
 8003c9c:	08003e5b 	.word	0x08003e5b
 8003ca0:	08003d57 	.word	0x08003d57
 8003ca4:	08003e5b 	.word	0x08003e5b
 8003ca8:	08003e5b 	.word	0x08003e5b
 8003cac:	08003e5b 	.word	0x08003e5b
 8003cb0:	08003d97 	.word	0x08003d97
 8003cb4:	08003e5b 	.word	0x08003e5b
 8003cb8:	08003e5b 	.word	0x08003e5b
 8003cbc:	08003e5b 	.word	0x08003e5b
 8003cc0:	08003dd9 	.word	0x08003dd9
 8003cc4:	08003e5b 	.word	0x08003e5b
 8003cc8:	08003e5b 	.word	0x08003e5b
 8003ccc:	08003e5b 	.word	0x08003e5b
 8003cd0:	08003e19 	.word	0x08003e19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68b9      	ldr	r1, [r7, #8]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 fa26 	bl	800412c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699a      	ldr	r2, [r3, #24]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0208 	orr.w	r2, r2, #8
 8003cee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699a      	ldr	r2, [r3, #24]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0204 	bic.w	r2, r2, #4
 8003cfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6999      	ldr	r1, [r3, #24]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	691a      	ldr	r2, [r3, #16]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	619a      	str	r2, [r3, #24]
      break;
 8003d12:	e0a3      	b.n	8003e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68b9      	ldr	r1, [r7, #8]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 fa78 	bl	8004210 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699a      	ldr	r2, [r3, #24]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699a      	ldr	r2, [r3, #24]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6999      	ldr	r1, [r3, #24]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	021a      	lsls	r2, r3, #8
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	619a      	str	r2, [r3, #24]
      break;
 8003d54:	e082      	b.n	8003e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68b9      	ldr	r1, [r7, #8]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 facf 	bl	8004300 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69da      	ldr	r2, [r3, #28]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f042 0208 	orr.w	r2, r2, #8
 8003d70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	69da      	ldr	r2, [r3, #28]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0204 	bic.w	r2, r2, #4
 8003d80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69d9      	ldr	r1, [r3, #28]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	691a      	ldr	r2, [r3, #16]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	61da      	str	r2, [r3, #28]
      break;
 8003d94:	e062      	b.n	8003e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68b9      	ldr	r1, [r7, #8]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 fb25 	bl	80043ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	69da      	ldr	r2, [r3, #28]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003db0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	69da      	ldr	r2, [r3, #28]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69d9      	ldr	r1, [r3, #28]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	021a      	lsls	r2, r3, #8
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	61da      	str	r2, [r3, #28]
      break;
 8003dd6:	e041      	b.n	8003e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68b9      	ldr	r1, [r7, #8]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 fb5c 	bl	800449c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0208 	orr.w	r2, r2, #8
 8003df2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0204 	bic.w	r2, r2, #4
 8003e02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	691a      	ldr	r2, [r3, #16]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e16:	e021      	b.n	8003e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68b9      	ldr	r1, [r7, #8]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fb8e 	bl	8004540 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	021a      	lsls	r2, r3, #8
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e58:	e000      	b.n	8003e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8003e5a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop

08003e78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d101      	bne.n	8003e90 <HAL_TIM_ConfigClockSource+0x18>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e0a6      	b.n	8003fde <HAL_TIM_ConfigClockSource+0x166>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	4b4f      	ldr	r3, [pc, #316]	; (8003fe8 <HAL_TIM_ConfigClockSource+0x170>)
 8003eac:	4013      	ands	r3, r2
 8003eae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eb6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b40      	cmp	r3, #64	; 0x40
 8003ec6:	d067      	beq.n	8003f98 <HAL_TIM_ConfigClockSource+0x120>
 8003ec8:	2b40      	cmp	r3, #64	; 0x40
 8003eca:	d80b      	bhi.n	8003ee4 <HAL_TIM_ConfigClockSource+0x6c>
 8003ecc:	2b10      	cmp	r3, #16
 8003ece:	d073      	beq.n	8003fb8 <HAL_TIM_ConfigClockSource+0x140>
 8003ed0:	2b10      	cmp	r3, #16
 8003ed2:	d802      	bhi.n	8003eda <HAL_TIM_ConfigClockSource+0x62>
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d06f      	beq.n	8003fb8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003ed8:	e078      	b.n	8003fcc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003eda:	2b20      	cmp	r3, #32
 8003edc:	d06c      	beq.n	8003fb8 <HAL_TIM_ConfigClockSource+0x140>
 8003ede:	2b30      	cmp	r3, #48	; 0x30
 8003ee0:	d06a      	beq.n	8003fb8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003ee2:	e073      	b.n	8003fcc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003ee4:	2b70      	cmp	r3, #112	; 0x70
 8003ee6:	d00d      	beq.n	8003f04 <HAL_TIM_ConfigClockSource+0x8c>
 8003ee8:	2b70      	cmp	r3, #112	; 0x70
 8003eea:	d804      	bhi.n	8003ef6 <HAL_TIM_ConfigClockSource+0x7e>
 8003eec:	2b50      	cmp	r3, #80	; 0x50
 8003eee:	d033      	beq.n	8003f58 <HAL_TIM_ConfigClockSource+0xe0>
 8003ef0:	2b60      	cmp	r3, #96	; 0x60
 8003ef2:	d041      	beq.n	8003f78 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003ef4:	e06a      	b.n	8003fcc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003efa:	d066      	beq.n	8003fca <HAL_TIM_ConfigClockSource+0x152>
 8003efc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f00:	d017      	beq.n	8003f32 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003f02:	e063      	b.n	8003fcc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6818      	ldr	r0, [r3, #0]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	6899      	ldr	r1, [r3, #8]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f000 fbe2 	bl	80046dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f26:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	609a      	str	r2, [r3, #8]
      break;
 8003f30:	e04c      	b.n	8003fcc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6818      	ldr	r0, [r3, #0]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	6899      	ldr	r1, [r3, #8]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	f000 fbcb 	bl	80046dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f54:	609a      	str	r2, [r3, #8]
      break;
 8003f56:	e039      	b.n	8003fcc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6818      	ldr	r0, [r3, #0]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	6859      	ldr	r1, [r3, #4]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	461a      	mov	r2, r3
 8003f66:	f000 fb3f 	bl	80045e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2150      	movs	r1, #80	; 0x50
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 fb98 	bl	80046a6 <TIM_ITRx_SetConfig>
      break;
 8003f76:	e029      	b.n	8003fcc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6818      	ldr	r0, [r3, #0]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	6859      	ldr	r1, [r3, #4]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	461a      	mov	r2, r3
 8003f86:	f000 fb5e 	bl	8004646 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2160      	movs	r1, #96	; 0x60
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 fb88 	bl	80046a6 <TIM_ITRx_SetConfig>
      break;
 8003f96:	e019      	b.n	8003fcc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6818      	ldr	r0, [r3, #0]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	6859      	ldr	r1, [r3, #4]
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	f000 fb1f 	bl	80045e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2140      	movs	r1, #64	; 0x40
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 fb78 	bl	80046a6 <TIM_ITRx_SetConfig>
      break;
 8003fb6:	e009      	b.n	8003fcc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4610      	mov	r0, r2
 8003fc4:	f000 fb6f 	bl	80046a6 <TIM_ITRx_SetConfig>
      break;
 8003fc8:	e000      	b.n	8003fcc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003fca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	fffeff88 	.word	0xfffeff88

08003fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a40      	ldr	r2, [pc, #256]	; (8004100 <TIM_Base_SetConfig+0x114>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d013      	beq.n	800402c <TIM_Base_SetConfig+0x40>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400a:	d00f      	beq.n	800402c <TIM_Base_SetConfig+0x40>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a3d      	ldr	r2, [pc, #244]	; (8004104 <TIM_Base_SetConfig+0x118>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d00b      	beq.n	800402c <TIM_Base_SetConfig+0x40>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a3c      	ldr	r2, [pc, #240]	; (8004108 <TIM_Base_SetConfig+0x11c>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d007      	beq.n	800402c <TIM_Base_SetConfig+0x40>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a3b      	ldr	r2, [pc, #236]	; (800410c <TIM_Base_SetConfig+0x120>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d003      	beq.n	800402c <TIM_Base_SetConfig+0x40>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a3a      	ldr	r2, [pc, #232]	; (8004110 <TIM_Base_SetConfig+0x124>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d108      	bne.n	800403e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	4313      	orrs	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a2f      	ldr	r2, [pc, #188]	; (8004100 <TIM_Base_SetConfig+0x114>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d02b      	beq.n	800409e <TIM_Base_SetConfig+0xb2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800404c:	d027      	beq.n	800409e <TIM_Base_SetConfig+0xb2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a2c      	ldr	r2, [pc, #176]	; (8004104 <TIM_Base_SetConfig+0x118>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d023      	beq.n	800409e <TIM_Base_SetConfig+0xb2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a2b      	ldr	r2, [pc, #172]	; (8004108 <TIM_Base_SetConfig+0x11c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d01f      	beq.n	800409e <TIM_Base_SetConfig+0xb2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a2a      	ldr	r2, [pc, #168]	; (800410c <TIM_Base_SetConfig+0x120>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d01b      	beq.n	800409e <TIM_Base_SetConfig+0xb2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a29      	ldr	r2, [pc, #164]	; (8004110 <TIM_Base_SetConfig+0x124>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d017      	beq.n	800409e <TIM_Base_SetConfig+0xb2>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a28      	ldr	r2, [pc, #160]	; (8004114 <TIM_Base_SetConfig+0x128>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d013      	beq.n	800409e <TIM_Base_SetConfig+0xb2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a27      	ldr	r2, [pc, #156]	; (8004118 <TIM_Base_SetConfig+0x12c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d00f      	beq.n	800409e <TIM_Base_SetConfig+0xb2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a26      	ldr	r2, [pc, #152]	; (800411c <TIM_Base_SetConfig+0x130>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d00b      	beq.n	800409e <TIM_Base_SetConfig+0xb2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a25      	ldr	r2, [pc, #148]	; (8004120 <TIM_Base_SetConfig+0x134>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d007      	beq.n	800409e <TIM_Base_SetConfig+0xb2>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a24      	ldr	r2, [pc, #144]	; (8004124 <TIM_Base_SetConfig+0x138>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d003      	beq.n	800409e <TIM_Base_SetConfig+0xb2>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a23      	ldr	r2, [pc, #140]	; (8004128 <TIM_Base_SetConfig+0x13c>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d108      	bne.n	80040b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a0a      	ldr	r2, [pc, #40]	; (8004100 <TIM_Base_SetConfig+0x114>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d003      	beq.n	80040e4 <TIM_Base_SetConfig+0xf8>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a0c      	ldr	r2, [pc, #48]	; (8004110 <TIM_Base_SetConfig+0x124>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d103      	bne.n	80040ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	615a      	str	r2, [r3, #20]
}
 80040f2:	bf00      	nop
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40010000 	.word	0x40010000
 8004104:	40000400 	.word	0x40000400
 8004108:	40000800 	.word	0x40000800
 800410c:	40000c00 	.word	0x40000c00
 8004110:	40010400 	.word	0x40010400
 8004114:	40014000 	.word	0x40014000
 8004118:	40014400 	.word	0x40014400
 800411c:	40014800 	.word	0x40014800
 8004120:	40001800 	.word	0x40001800
 8004124:	40001c00 	.word	0x40001c00
 8004128:	40002000 	.word	0x40002000

0800412c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	f023 0201 	bic.w	r2, r3, #1
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	4b2b      	ldr	r3, [pc, #172]	; (8004204 <TIM_OC1_SetConfig+0xd8>)
 8004158:	4013      	ands	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 0303 	bic.w	r3, r3, #3
 8004162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f023 0302 	bic.w	r3, r3, #2
 8004174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	4313      	orrs	r3, r2
 800417e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a21      	ldr	r2, [pc, #132]	; (8004208 <TIM_OC1_SetConfig+0xdc>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d003      	beq.n	8004190 <TIM_OC1_SetConfig+0x64>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a20      	ldr	r2, [pc, #128]	; (800420c <TIM_OC1_SetConfig+0xe0>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d10c      	bne.n	80041aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f023 0308 	bic.w	r3, r3, #8
 8004196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	4313      	orrs	r3, r2
 80041a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	f023 0304 	bic.w	r3, r3, #4
 80041a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a16      	ldr	r2, [pc, #88]	; (8004208 <TIM_OC1_SetConfig+0xdc>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d003      	beq.n	80041ba <TIM_OC1_SetConfig+0x8e>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a15      	ldr	r2, [pc, #84]	; (800420c <TIM_OC1_SetConfig+0xe0>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d111      	bne.n	80041de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	4313      	orrs	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	621a      	str	r2, [r3, #32]
}
 80041f8:	bf00      	nop
 80041fa:	371c      	adds	r7, #28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	fffeff8f 	.word	0xfffeff8f
 8004208:	40010000 	.word	0x40010000
 800420c:	40010400 	.word	0x40010400

08004210 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	f023 0210 	bic.w	r2, r3, #16
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	4b2e      	ldr	r3, [pc, #184]	; (80042f4 <TIM_OC2_SetConfig+0xe4>)
 800423c:	4013      	ands	r3, r2
 800423e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004246:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	021b      	lsls	r3, r3, #8
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	4313      	orrs	r3, r2
 8004252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f023 0320 	bic.w	r3, r3, #32
 800425a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	4313      	orrs	r3, r2
 8004266:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a23      	ldr	r2, [pc, #140]	; (80042f8 <TIM_OC2_SetConfig+0xe8>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d003      	beq.n	8004278 <TIM_OC2_SetConfig+0x68>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a22      	ldr	r2, [pc, #136]	; (80042fc <TIM_OC2_SetConfig+0xec>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d10d      	bne.n	8004294 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800427e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	4313      	orrs	r3, r2
 800428a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004292:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a18      	ldr	r2, [pc, #96]	; (80042f8 <TIM_OC2_SetConfig+0xe8>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d003      	beq.n	80042a4 <TIM_OC2_SetConfig+0x94>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a17      	ldr	r2, [pc, #92]	; (80042fc <TIM_OC2_SetConfig+0xec>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d113      	bne.n	80042cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	4313      	orrs	r3, r2
 80042be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	621a      	str	r2, [r3, #32]
}
 80042e6:	bf00      	nop
 80042e8:	371c      	adds	r7, #28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	feff8fff 	.word	0xfeff8fff
 80042f8:	40010000 	.word	0x40010000
 80042fc:	40010400 	.word	0x40010400

08004300 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	4b2d      	ldr	r3, [pc, #180]	; (80043e0 <TIM_OC3_SetConfig+0xe0>)
 800432c:	4013      	ands	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f023 0303 	bic.w	r3, r3, #3
 8004336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4313      	orrs	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	021b      	lsls	r3, r3, #8
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	4313      	orrs	r3, r2
 8004354:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a22      	ldr	r2, [pc, #136]	; (80043e4 <TIM_OC3_SetConfig+0xe4>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d003      	beq.n	8004366 <TIM_OC3_SetConfig+0x66>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a21      	ldr	r2, [pc, #132]	; (80043e8 <TIM_OC3_SetConfig+0xe8>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d10d      	bne.n	8004382 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800436c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	021b      	lsls	r3, r3, #8
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	4313      	orrs	r3, r2
 8004378:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004380:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a17      	ldr	r2, [pc, #92]	; (80043e4 <TIM_OC3_SetConfig+0xe4>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d003      	beq.n	8004392 <TIM_OC3_SetConfig+0x92>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a16      	ldr	r2, [pc, #88]	; (80043e8 <TIM_OC3_SetConfig+0xe8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d113      	bne.n	80043ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004398:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	621a      	str	r2, [r3, #32]
}
 80043d4:	bf00      	nop
 80043d6:	371c      	adds	r7, #28
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	fffeff8f 	.word	0xfffeff8f
 80043e4:	40010000 	.word	0x40010000
 80043e8:	40010400 	.word	0x40010400

080043ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b087      	sub	sp, #28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	4b1e      	ldr	r3, [pc, #120]	; (8004490 <TIM_OC4_SetConfig+0xa4>)
 8004418:	4013      	ands	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004422:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	021b      	lsls	r3, r3, #8
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	4313      	orrs	r3, r2
 800442e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004436:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	031b      	lsls	r3, r3, #12
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	4313      	orrs	r3, r2
 8004442:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a13      	ldr	r2, [pc, #76]	; (8004494 <TIM_OC4_SetConfig+0xa8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d003      	beq.n	8004454 <TIM_OC4_SetConfig+0x68>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a12      	ldr	r2, [pc, #72]	; (8004498 <TIM_OC4_SetConfig+0xac>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d109      	bne.n	8004468 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800445a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	019b      	lsls	r3, r3, #6
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	4313      	orrs	r3, r2
 8004466:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	621a      	str	r2, [r3, #32]
}
 8004482:	bf00      	nop
 8004484:	371c      	adds	r7, #28
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	feff8fff 	.word	0xfeff8fff
 8004494:	40010000 	.word	0x40010000
 8004498:	40010400 	.word	0x40010400

0800449c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	4b1b      	ldr	r3, [pc, #108]	; (8004534 <TIM_OC5_SetConfig+0x98>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80044dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	041b      	lsls	r3, r3, #16
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a12      	ldr	r2, [pc, #72]	; (8004538 <TIM_OC5_SetConfig+0x9c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d003      	beq.n	80044fa <TIM_OC5_SetConfig+0x5e>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a11      	ldr	r2, [pc, #68]	; (800453c <TIM_OC5_SetConfig+0xa0>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d109      	bne.n	800450e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004500:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	021b      	lsls	r3, r3, #8
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	4313      	orrs	r3, r2
 800450c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	621a      	str	r2, [r3, #32]
}
 8004528:	bf00      	nop
 800452a:	371c      	adds	r7, #28
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	fffeff8f 	.word	0xfffeff8f
 8004538:	40010000 	.word	0x40010000
 800453c:	40010400 	.word	0x40010400

08004540 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004540:	b480      	push	{r7}
 8004542:	b087      	sub	sp, #28
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	4b1c      	ldr	r3, [pc, #112]	; (80045dc <TIM_OC6_SetConfig+0x9c>)
 800456c:	4013      	ands	r3, r2
 800456e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	021b      	lsls	r3, r3, #8
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	4313      	orrs	r3, r2
 800457a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004582:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	051b      	lsls	r3, r3, #20
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	4313      	orrs	r3, r2
 800458e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a13      	ldr	r2, [pc, #76]	; (80045e0 <TIM_OC6_SetConfig+0xa0>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d003      	beq.n	80045a0 <TIM_OC6_SetConfig+0x60>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a12      	ldr	r2, [pc, #72]	; (80045e4 <TIM_OC6_SetConfig+0xa4>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d109      	bne.n	80045b4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	029b      	lsls	r3, r3, #10
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	621a      	str	r2, [r3, #32]
}
 80045ce:	bf00      	nop
 80045d0:	371c      	adds	r7, #28
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	feff8fff 	.word	0xfeff8fff
 80045e0:	40010000 	.word	0x40010000
 80045e4:	40010400 	.word	0x40010400

080045e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	f023 0201 	bic.w	r2, r3, #1
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004612:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	011b      	lsls	r3, r3, #4
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	4313      	orrs	r3, r2
 800461c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f023 030a 	bic.w	r3, r3, #10
 8004624:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	4313      	orrs	r3, r2
 800462c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	621a      	str	r2, [r3, #32]
}
 800463a:	bf00      	nop
 800463c:	371c      	adds	r7, #28
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004646:	b480      	push	{r7}
 8004648:	b087      	sub	sp, #28
 800464a:	af00      	add	r7, sp, #0
 800464c:	60f8      	str	r0, [r7, #12]
 800464e:	60b9      	str	r1, [r7, #8]
 8004650:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	f023 0210 	bic.w	r2, r3, #16
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004670:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	031b      	lsls	r3, r3, #12
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	4313      	orrs	r3, r2
 800467a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004682:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	011b      	lsls	r3, r3, #4
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	4313      	orrs	r3, r2
 800468c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	621a      	str	r2, [r3, #32]
}
 800469a:	bf00      	nop
 800469c:	371c      	adds	r7, #28
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b085      	sub	sp, #20
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
 80046ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	f043 0307 	orr.w	r3, r3, #7
 80046c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	609a      	str	r2, [r3, #8]
}
 80046d0:	bf00      	nop
 80046d2:	3714      	adds	r7, #20
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
 80046e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	021a      	lsls	r2, r3, #8
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	431a      	orrs	r2, r3
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	4313      	orrs	r3, r2
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	4313      	orrs	r3, r2
 8004708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	609a      	str	r2, [r3, #8]
}
 8004710:	bf00      	nop
 8004712:	371c      	adds	r7, #28
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800472c:	2b01      	cmp	r3, #1
 800472e:	d101      	bne.n	8004734 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004730:	2302      	movs	r3, #2
 8004732:	e06d      	b.n	8004810 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a30      	ldr	r2, [pc, #192]	; (800481c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d004      	beq.n	8004768 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a2f      	ldr	r2, [pc, #188]	; (8004820 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d108      	bne.n	800477a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800476e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	4313      	orrs	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004780:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	4313      	orrs	r3, r2
 800478a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a20      	ldr	r2, [pc, #128]	; (800481c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d022      	beq.n	80047e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a6:	d01d      	beq.n	80047e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a1d      	ldr	r2, [pc, #116]	; (8004824 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d018      	beq.n	80047e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a1c      	ldr	r2, [pc, #112]	; (8004828 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d013      	beq.n	80047e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a1a      	ldr	r2, [pc, #104]	; (800482c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d00e      	beq.n	80047e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a15      	ldr	r2, [pc, #84]	; (8004820 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d009      	beq.n	80047e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a16      	ldr	r2, [pc, #88]	; (8004830 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d004      	beq.n	80047e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a15      	ldr	r2, [pc, #84]	; (8004834 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d10c      	bne.n	80047fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	40010000 	.word	0x40010000
 8004820:	40010400 	.word	0x40010400
 8004824:	40000400 	.word	0x40000400
 8004828:	40000800 	.word	0x40000800
 800482c:	40000c00 	.word	0x40000c00
 8004830:	40014000 	.word	0x40014000
 8004834:	40001800 	.word	0x40001800

08004838 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004842:	2300      	movs	r3, #0
 8004844:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800484c:	2b01      	cmp	r3, #1
 800484e:	d101      	bne.n	8004854 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004850:	2302      	movs	r3, #2
 8004852:	e065      	b.n	8004920 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	4313      	orrs	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	4313      	orrs	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	4313      	orrs	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4313      	orrs	r3, r2
 8004892:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ba:	4313      	orrs	r3, r2
 80048bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	041b      	lsls	r3, r3, #16
 80048ca:	4313      	orrs	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a16      	ldr	r2, [pc, #88]	; (800492c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d004      	beq.n	80048e2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a14      	ldr	r2, [pc, #80]	; (8004930 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d115      	bne.n	800490e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	051b      	lsls	r3, r3, #20
 80048ee:	4313      	orrs	r3, r2
 80048f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	4313      	orrs	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	40010000 	.word	0x40010000
 8004930:	40010400 	.word	0x40010400

08004934 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e040      	b.n	80049c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800494a:	2b00      	cmp	r3, #0
 800494c:	d106      	bne.n	800495c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7fc fd14 	bl	8001384 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2224      	movs	r2, #36	; 0x24
 8004960:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 0201 	bic.w	r2, r2, #1
 8004970:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fab0 	bl	8004ed8 <UART_SetConfig>
 8004978:	4603      	mov	r3, r0
 800497a:	2b01      	cmp	r3, #1
 800497c:	d101      	bne.n	8004982 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e022      	b.n	80049c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	2b00      	cmp	r3, #0
 8004988:	d002      	beq.n	8004990 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 fd4e 	bl	800542c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800499e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689a      	ldr	r2, [r3, #8]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f042 0201 	orr.w	r2, r2, #1
 80049be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 fdd5 	bl	8005570 <UART_CheckIdleState>
 80049c6:	4603      	mov	r3, r0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b08a      	sub	sp, #40	; 0x28
 80049d4:	af02      	add	r7, sp, #8
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	603b      	str	r3, [r7, #0]
 80049dc:	4613      	mov	r3, r2
 80049de:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049e4:	2b20      	cmp	r3, #32
 80049e6:	d17f      	bne.n	8004ae8 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d002      	beq.n	80049f4 <HAL_UART_Transmit+0x24>
 80049ee:	88fb      	ldrh	r3, [r7, #6]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e078      	b.n	8004aea <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d101      	bne.n	8004a06 <HAL_UART_Transmit+0x36>
 8004a02:	2302      	movs	r3, #2
 8004a04:	e071      	b.n	8004aea <HAL_UART_Transmit+0x11a>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2221      	movs	r2, #33	; 0x21
 8004a18:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004a1a:	f7fc fe03 	bl	8001624 <HAL_GetTick>
 8004a1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	88fa      	ldrh	r2, [r7, #6]
 8004a24:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	88fa      	ldrh	r2, [r7, #6]
 8004a2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a38:	d108      	bne.n	8004a4c <HAL_UART_Transmit+0x7c>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d104      	bne.n	8004a4c <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8004a42:	2300      	movs	r3, #0
 8004a44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	61bb      	str	r3, [r7, #24]
 8004a4a:	e003      	b.n	8004a54 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004a5c:	e02c      	b.n	8004ab8 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	2200      	movs	r2, #0
 8004a66:	2180      	movs	r1, #128	; 0x80
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f000 fdc6 	bl	80055fa <UART_WaitOnFlagUntilTimeout>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e038      	b.n	8004aea <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10b      	bne.n	8004a96 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	881b      	ldrh	r3, [r3, #0]
 8004a82:	461a      	mov	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a8c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	3302      	adds	r3, #2
 8004a92:	61bb      	str	r3, [r7, #24]
 8004a94:	e007      	b.n	8004aa6 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	781a      	ldrb	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1cc      	bne.n	8004a5e <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	2200      	movs	r2, #0
 8004acc:	2140      	movs	r1, #64	; 0x40
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 fd93 	bl	80055fa <UART_WaitOnFlagUntilTimeout>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e005      	b.n	8004aea <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	e000      	b.n	8004aea <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8004ae8:	2302      	movs	r3, #2
  }
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3720      	adds	r7, #32
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
	...

08004af4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	4613      	mov	r3, r2
 8004b00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b06:	2b20      	cmp	r3, #32
 8004b08:	d16c      	bne.n	8004be4 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d002      	beq.n	8004b16 <HAL_UART_Receive_DMA+0x22>
 8004b10:	88fb      	ldrh	r3, [r7, #6]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e065      	b.n	8004be6 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d101      	bne.n	8004b28 <HAL_UART_Receive_DMA+0x34>
 8004b24:	2302      	movs	r3, #2
 8004b26:	e05e      	b.n	8004be6 <HAL_UART_Receive_DMA+0xf2>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	88fa      	ldrh	r2, [r7, #6]
 8004b3a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2222      	movs	r2, #34	; 0x22
 8004b48:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d02a      	beq.n	8004ba8 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b56:	4a26      	ldr	r2, [pc, #152]	; (8004bf0 <HAL_UART_Receive_DMA+0xfc>)
 8004b58:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b5e:	4a25      	ldr	r2, [pc, #148]	; (8004bf4 <HAL_UART_Receive_DMA+0x100>)
 8004b60:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b66:	4a24      	ldr	r2, [pc, #144]	; (8004bf8 <HAL_UART_Receive_DMA+0x104>)
 8004b68:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b6e:	2200      	movs	r2, #0
 8004b70:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	3324      	adds	r3, #36	; 0x24
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b82:	461a      	mov	r2, r3
 8004b84:	88fb      	ldrh	r3, [r7, #6]
 8004b86:	f7fc ff3b 	bl	8001a00 <HAL_DMA_Start_IT>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00b      	beq.n	8004ba8 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2210      	movs	r2, #16
 8004b94:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e01e      	b.n	8004be6 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bbe:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689a      	ldr	r2, [r3, #8]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 0201 	orr.w	r2, r2, #1
 8004bce:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bde:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8004be0:	2300      	movs	r3, #0
 8004be2:	e000      	b.n	8004be6 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8004be4:	2302      	movs	r3, #2
  }
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	0800575b 	.word	0x0800575b
 8004bf4:	080057bf 	.word	0x080057bf
 8004bf8:	080057db 	.word	0x080057db

08004bfc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b088      	sub	sp, #32
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004c1c:	69fa      	ldr	r2, [r7, #28]
 8004c1e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004c22:	4013      	ands	r3, r2
 8004c24:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d113      	bne.n	8004c54 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	f003 0320 	and.w	r3, r3, #32
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00e      	beq.n	8004c54 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	f003 0320 	and.w	r3, r3, #32
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d009      	beq.n	8004c54 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 8114 	beq.w	8004e72 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	4798      	blx	r3
      }
      return;
 8004c52:	e10e      	b.n	8004e72 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 80d6 	beq.w	8004e08 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d105      	bne.n	8004c72 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 80cb 	beq.w	8004e08 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00e      	beq.n	8004c9a <HAL_UART_IRQHandler+0x9e>
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d009      	beq.n	8004c9a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c92:	f043 0201 	orr.w	r2, r3, #1
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00e      	beq.n	8004cc2 <HAL_UART_IRQHandler+0xc6>
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d009      	beq.n	8004cc2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cba:	f043 0204 	orr.w	r2, r3, #4
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	f003 0304 	and.w	r3, r3, #4
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00e      	beq.n	8004cea <HAL_UART_IRQHandler+0xee>
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d009      	beq.n	8004cea <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2204      	movs	r2, #4
 8004cdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ce2:	f043 0202 	orr.w	r2, r3, #2
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	f003 0308 	and.w	r3, r3, #8
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d013      	beq.n	8004d1c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	f003 0320 	and.w	r3, r3, #32
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d104      	bne.n	8004d08 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d009      	beq.n	8004d1c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2208      	movs	r2, #8
 8004d0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d14:	f043 0208 	orr.w	r2, r3, #8
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00f      	beq.n	8004d46 <HAL_UART_IRQHandler+0x14a>
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00a      	beq.n	8004d46 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d3e:	f043 0220 	orr.w	r2, r3, #32
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f000 8093 	beq.w	8004e76 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	f003 0320 	and.w	r3, r3, #32
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00c      	beq.n	8004d74 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	f003 0320 	and.w	r3, r3, #32
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d007      	beq.n	8004d74 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d003      	beq.n	8004d74 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d78:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d84:	2b40      	cmp	r3, #64	; 0x40
 8004d86:	d004      	beq.n	8004d92 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d031      	beq.n	8004df6 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 fcc1 	bl	800571a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da2:	2b40      	cmp	r3, #64	; 0x40
 8004da4:	d123      	bne.n	8004dee <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004db4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d013      	beq.n	8004de6 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dc2:	4a30      	ldr	r2, [pc, #192]	; (8004e84 <HAL_UART_IRQHandler+0x288>)
 8004dc4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fc fe78 	bl	8001ac0 <HAL_DMA_Abort_IT>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d016      	beq.n	8004e04 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004de0:	4610      	mov	r0, r2
 8004de2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de4:	e00e      	b.n	8004e04 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f862 	bl	8004eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dec:	e00a      	b.n	8004e04 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f85e 	bl	8004eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df4:	e006      	b.n	8004e04 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f85a 	bl	8004eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004e02:	e038      	b.n	8004e76 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e04:	bf00      	nop
    return;
 8004e06:	e036      	b.n	8004e76 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00d      	beq.n	8004e2e <HAL_UART_IRQHandler+0x232>
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d008      	beq.n	8004e2e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f84c 	bl	8004ec4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e2c:	e026      	b.n	8004e7c <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00d      	beq.n	8004e54 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d008      	beq.n	8004e54 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d017      	beq.n	8004e7a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	4798      	blx	r3
    }
    return;
 8004e52:	e012      	b.n	8004e7a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00e      	beq.n	8004e7c <HAL_UART_IRQHandler+0x280>
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d009      	beq.n	8004e7c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 fd08 	bl	800587e <UART_EndTransmit_IT>
    return;
 8004e6e:	bf00      	nop
 8004e70:	e004      	b.n	8004e7c <HAL_UART_IRQHandler+0x280>
      return;
 8004e72:	bf00      	nop
 8004e74:	e002      	b.n	8004e7c <HAL_UART_IRQHandler+0x280>
    return;
 8004e76:	bf00      	nop
 8004e78:	e000      	b.n	8004e7c <HAL_UART_IRQHandler+0x280>
    return;
 8004e7a:	bf00      	nop
  }

}
 8004e7c:	3720      	adds	r7, #32
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	08005853 	.word	0x08005853

08004e88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b088      	sub	sp, #32
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689a      	ldr	r2, [r3, #8]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	431a      	orrs	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	69db      	ldr	r3, [r3, #28]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	4bb1      	ldr	r3, [pc, #708]	; (80051cc <UART_SetConfig+0x2f4>)
 8004f08:	4013      	ands	r3, r2
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6812      	ldr	r2, [r2, #0]
 8004f0e:	6939      	ldr	r1, [r7, #16]
 8004f10:	430b      	orrs	r3, r1
 8004f12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a9f      	ldr	r2, [pc, #636]	; (80051d0 <UART_SetConfig+0x2f8>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d121      	bne.n	8004f9c <UART_SetConfig+0xc4>
 8004f58:	4b9e      	ldr	r3, [pc, #632]	; (80051d4 <UART_SetConfig+0x2fc>)
 8004f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5e:	f003 0303 	and.w	r3, r3, #3
 8004f62:	2b03      	cmp	r3, #3
 8004f64:	d816      	bhi.n	8004f94 <UART_SetConfig+0xbc>
 8004f66:	a201      	add	r2, pc, #4	; (adr r2, 8004f6c <UART_SetConfig+0x94>)
 8004f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6c:	08004f7d 	.word	0x08004f7d
 8004f70:	08004f89 	.word	0x08004f89
 8004f74:	08004f83 	.word	0x08004f83
 8004f78:	08004f8f 	.word	0x08004f8f
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	77fb      	strb	r3, [r7, #31]
 8004f80:	e151      	b.n	8005226 <UART_SetConfig+0x34e>
 8004f82:	2302      	movs	r3, #2
 8004f84:	77fb      	strb	r3, [r7, #31]
 8004f86:	e14e      	b.n	8005226 <UART_SetConfig+0x34e>
 8004f88:	2304      	movs	r3, #4
 8004f8a:	77fb      	strb	r3, [r7, #31]
 8004f8c:	e14b      	b.n	8005226 <UART_SetConfig+0x34e>
 8004f8e:	2308      	movs	r3, #8
 8004f90:	77fb      	strb	r3, [r7, #31]
 8004f92:	e148      	b.n	8005226 <UART_SetConfig+0x34e>
 8004f94:	2310      	movs	r3, #16
 8004f96:	77fb      	strb	r3, [r7, #31]
 8004f98:	bf00      	nop
 8004f9a:	e144      	b.n	8005226 <UART_SetConfig+0x34e>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a8d      	ldr	r2, [pc, #564]	; (80051d8 <UART_SetConfig+0x300>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d134      	bne.n	8005010 <UART_SetConfig+0x138>
 8004fa6:	4b8b      	ldr	r3, [pc, #556]	; (80051d4 <UART_SetConfig+0x2fc>)
 8004fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fac:	f003 030c 	and.w	r3, r3, #12
 8004fb0:	2b0c      	cmp	r3, #12
 8004fb2:	d829      	bhi.n	8005008 <UART_SetConfig+0x130>
 8004fb4:	a201      	add	r2, pc, #4	; (adr r2, 8004fbc <UART_SetConfig+0xe4>)
 8004fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fba:	bf00      	nop
 8004fbc:	08004ff1 	.word	0x08004ff1
 8004fc0:	08005009 	.word	0x08005009
 8004fc4:	08005009 	.word	0x08005009
 8004fc8:	08005009 	.word	0x08005009
 8004fcc:	08004ffd 	.word	0x08004ffd
 8004fd0:	08005009 	.word	0x08005009
 8004fd4:	08005009 	.word	0x08005009
 8004fd8:	08005009 	.word	0x08005009
 8004fdc:	08004ff7 	.word	0x08004ff7
 8004fe0:	08005009 	.word	0x08005009
 8004fe4:	08005009 	.word	0x08005009
 8004fe8:	08005009 	.word	0x08005009
 8004fec:	08005003 	.word	0x08005003
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	77fb      	strb	r3, [r7, #31]
 8004ff4:	e117      	b.n	8005226 <UART_SetConfig+0x34e>
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	77fb      	strb	r3, [r7, #31]
 8004ffa:	e114      	b.n	8005226 <UART_SetConfig+0x34e>
 8004ffc:	2304      	movs	r3, #4
 8004ffe:	77fb      	strb	r3, [r7, #31]
 8005000:	e111      	b.n	8005226 <UART_SetConfig+0x34e>
 8005002:	2308      	movs	r3, #8
 8005004:	77fb      	strb	r3, [r7, #31]
 8005006:	e10e      	b.n	8005226 <UART_SetConfig+0x34e>
 8005008:	2310      	movs	r3, #16
 800500a:	77fb      	strb	r3, [r7, #31]
 800500c:	bf00      	nop
 800500e:	e10a      	b.n	8005226 <UART_SetConfig+0x34e>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a71      	ldr	r2, [pc, #452]	; (80051dc <UART_SetConfig+0x304>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d120      	bne.n	800505c <UART_SetConfig+0x184>
 800501a:	4b6e      	ldr	r3, [pc, #440]	; (80051d4 <UART_SetConfig+0x2fc>)
 800501c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005020:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005024:	2b10      	cmp	r3, #16
 8005026:	d00f      	beq.n	8005048 <UART_SetConfig+0x170>
 8005028:	2b10      	cmp	r3, #16
 800502a:	d802      	bhi.n	8005032 <UART_SetConfig+0x15a>
 800502c:	2b00      	cmp	r3, #0
 800502e:	d005      	beq.n	800503c <UART_SetConfig+0x164>
 8005030:	e010      	b.n	8005054 <UART_SetConfig+0x17c>
 8005032:	2b20      	cmp	r3, #32
 8005034:	d005      	beq.n	8005042 <UART_SetConfig+0x16a>
 8005036:	2b30      	cmp	r3, #48	; 0x30
 8005038:	d009      	beq.n	800504e <UART_SetConfig+0x176>
 800503a:	e00b      	b.n	8005054 <UART_SetConfig+0x17c>
 800503c:	2300      	movs	r3, #0
 800503e:	77fb      	strb	r3, [r7, #31]
 8005040:	e0f1      	b.n	8005226 <UART_SetConfig+0x34e>
 8005042:	2302      	movs	r3, #2
 8005044:	77fb      	strb	r3, [r7, #31]
 8005046:	e0ee      	b.n	8005226 <UART_SetConfig+0x34e>
 8005048:	2304      	movs	r3, #4
 800504a:	77fb      	strb	r3, [r7, #31]
 800504c:	e0eb      	b.n	8005226 <UART_SetConfig+0x34e>
 800504e:	2308      	movs	r3, #8
 8005050:	77fb      	strb	r3, [r7, #31]
 8005052:	e0e8      	b.n	8005226 <UART_SetConfig+0x34e>
 8005054:	2310      	movs	r3, #16
 8005056:	77fb      	strb	r3, [r7, #31]
 8005058:	bf00      	nop
 800505a:	e0e4      	b.n	8005226 <UART_SetConfig+0x34e>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a5f      	ldr	r2, [pc, #380]	; (80051e0 <UART_SetConfig+0x308>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d120      	bne.n	80050a8 <UART_SetConfig+0x1d0>
 8005066:	4b5b      	ldr	r3, [pc, #364]	; (80051d4 <UART_SetConfig+0x2fc>)
 8005068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005070:	2b40      	cmp	r3, #64	; 0x40
 8005072:	d00f      	beq.n	8005094 <UART_SetConfig+0x1bc>
 8005074:	2b40      	cmp	r3, #64	; 0x40
 8005076:	d802      	bhi.n	800507e <UART_SetConfig+0x1a6>
 8005078:	2b00      	cmp	r3, #0
 800507a:	d005      	beq.n	8005088 <UART_SetConfig+0x1b0>
 800507c:	e010      	b.n	80050a0 <UART_SetConfig+0x1c8>
 800507e:	2b80      	cmp	r3, #128	; 0x80
 8005080:	d005      	beq.n	800508e <UART_SetConfig+0x1b6>
 8005082:	2bc0      	cmp	r3, #192	; 0xc0
 8005084:	d009      	beq.n	800509a <UART_SetConfig+0x1c2>
 8005086:	e00b      	b.n	80050a0 <UART_SetConfig+0x1c8>
 8005088:	2300      	movs	r3, #0
 800508a:	77fb      	strb	r3, [r7, #31]
 800508c:	e0cb      	b.n	8005226 <UART_SetConfig+0x34e>
 800508e:	2302      	movs	r3, #2
 8005090:	77fb      	strb	r3, [r7, #31]
 8005092:	e0c8      	b.n	8005226 <UART_SetConfig+0x34e>
 8005094:	2304      	movs	r3, #4
 8005096:	77fb      	strb	r3, [r7, #31]
 8005098:	e0c5      	b.n	8005226 <UART_SetConfig+0x34e>
 800509a:	2308      	movs	r3, #8
 800509c:	77fb      	strb	r3, [r7, #31]
 800509e:	e0c2      	b.n	8005226 <UART_SetConfig+0x34e>
 80050a0:	2310      	movs	r3, #16
 80050a2:	77fb      	strb	r3, [r7, #31]
 80050a4:	bf00      	nop
 80050a6:	e0be      	b.n	8005226 <UART_SetConfig+0x34e>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a4d      	ldr	r2, [pc, #308]	; (80051e4 <UART_SetConfig+0x30c>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d124      	bne.n	80050fc <UART_SetConfig+0x224>
 80050b2:	4b48      	ldr	r3, [pc, #288]	; (80051d4 <UART_SetConfig+0x2fc>)
 80050b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050c0:	d012      	beq.n	80050e8 <UART_SetConfig+0x210>
 80050c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050c6:	d802      	bhi.n	80050ce <UART_SetConfig+0x1f6>
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d007      	beq.n	80050dc <UART_SetConfig+0x204>
 80050cc:	e012      	b.n	80050f4 <UART_SetConfig+0x21c>
 80050ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050d2:	d006      	beq.n	80050e2 <UART_SetConfig+0x20a>
 80050d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050d8:	d009      	beq.n	80050ee <UART_SetConfig+0x216>
 80050da:	e00b      	b.n	80050f4 <UART_SetConfig+0x21c>
 80050dc:	2300      	movs	r3, #0
 80050de:	77fb      	strb	r3, [r7, #31]
 80050e0:	e0a1      	b.n	8005226 <UART_SetConfig+0x34e>
 80050e2:	2302      	movs	r3, #2
 80050e4:	77fb      	strb	r3, [r7, #31]
 80050e6:	e09e      	b.n	8005226 <UART_SetConfig+0x34e>
 80050e8:	2304      	movs	r3, #4
 80050ea:	77fb      	strb	r3, [r7, #31]
 80050ec:	e09b      	b.n	8005226 <UART_SetConfig+0x34e>
 80050ee:	2308      	movs	r3, #8
 80050f0:	77fb      	strb	r3, [r7, #31]
 80050f2:	e098      	b.n	8005226 <UART_SetConfig+0x34e>
 80050f4:	2310      	movs	r3, #16
 80050f6:	77fb      	strb	r3, [r7, #31]
 80050f8:	bf00      	nop
 80050fa:	e094      	b.n	8005226 <UART_SetConfig+0x34e>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a39      	ldr	r2, [pc, #228]	; (80051e8 <UART_SetConfig+0x310>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d124      	bne.n	8005150 <UART_SetConfig+0x278>
 8005106:	4b33      	ldr	r3, [pc, #204]	; (80051d4 <UART_SetConfig+0x2fc>)
 8005108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005114:	d012      	beq.n	800513c <UART_SetConfig+0x264>
 8005116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800511a:	d802      	bhi.n	8005122 <UART_SetConfig+0x24a>
 800511c:	2b00      	cmp	r3, #0
 800511e:	d007      	beq.n	8005130 <UART_SetConfig+0x258>
 8005120:	e012      	b.n	8005148 <UART_SetConfig+0x270>
 8005122:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005126:	d006      	beq.n	8005136 <UART_SetConfig+0x25e>
 8005128:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800512c:	d009      	beq.n	8005142 <UART_SetConfig+0x26a>
 800512e:	e00b      	b.n	8005148 <UART_SetConfig+0x270>
 8005130:	2301      	movs	r3, #1
 8005132:	77fb      	strb	r3, [r7, #31]
 8005134:	e077      	b.n	8005226 <UART_SetConfig+0x34e>
 8005136:	2302      	movs	r3, #2
 8005138:	77fb      	strb	r3, [r7, #31]
 800513a:	e074      	b.n	8005226 <UART_SetConfig+0x34e>
 800513c:	2304      	movs	r3, #4
 800513e:	77fb      	strb	r3, [r7, #31]
 8005140:	e071      	b.n	8005226 <UART_SetConfig+0x34e>
 8005142:	2308      	movs	r3, #8
 8005144:	77fb      	strb	r3, [r7, #31]
 8005146:	e06e      	b.n	8005226 <UART_SetConfig+0x34e>
 8005148:	2310      	movs	r3, #16
 800514a:	77fb      	strb	r3, [r7, #31]
 800514c:	bf00      	nop
 800514e:	e06a      	b.n	8005226 <UART_SetConfig+0x34e>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a25      	ldr	r2, [pc, #148]	; (80051ec <UART_SetConfig+0x314>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d124      	bne.n	80051a4 <UART_SetConfig+0x2cc>
 800515a:	4b1e      	ldr	r3, [pc, #120]	; (80051d4 <UART_SetConfig+0x2fc>)
 800515c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005160:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005168:	d012      	beq.n	8005190 <UART_SetConfig+0x2b8>
 800516a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800516e:	d802      	bhi.n	8005176 <UART_SetConfig+0x29e>
 8005170:	2b00      	cmp	r3, #0
 8005172:	d007      	beq.n	8005184 <UART_SetConfig+0x2ac>
 8005174:	e012      	b.n	800519c <UART_SetConfig+0x2c4>
 8005176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800517a:	d006      	beq.n	800518a <UART_SetConfig+0x2b2>
 800517c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005180:	d009      	beq.n	8005196 <UART_SetConfig+0x2be>
 8005182:	e00b      	b.n	800519c <UART_SetConfig+0x2c4>
 8005184:	2300      	movs	r3, #0
 8005186:	77fb      	strb	r3, [r7, #31]
 8005188:	e04d      	b.n	8005226 <UART_SetConfig+0x34e>
 800518a:	2302      	movs	r3, #2
 800518c:	77fb      	strb	r3, [r7, #31]
 800518e:	e04a      	b.n	8005226 <UART_SetConfig+0x34e>
 8005190:	2304      	movs	r3, #4
 8005192:	77fb      	strb	r3, [r7, #31]
 8005194:	e047      	b.n	8005226 <UART_SetConfig+0x34e>
 8005196:	2308      	movs	r3, #8
 8005198:	77fb      	strb	r3, [r7, #31]
 800519a:	e044      	b.n	8005226 <UART_SetConfig+0x34e>
 800519c:	2310      	movs	r3, #16
 800519e:	77fb      	strb	r3, [r7, #31]
 80051a0:	bf00      	nop
 80051a2:	e040      	b.n	8005226 <UART_SetConfig+0x34e>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a11      	ldr	r2, [pc, #68]	; (80051f0 <UART_SetConfig+0x318>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d139      	bne.n	8005222 <UART_SetConfig+0x34a>
 80051ae:	4b09      	ldr	r3, [pc, #36]	; (80051d4 <UART_SetConfig+0x2fc>)
 80051b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80051b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051bc:	d027      	beq.n	800520e <UART_SetConfig+0x336>
 80051be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051c2:	d817      	bhi.n	80051f4 <UART_SetConfig+0x31c>
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d01c      	beq.n	8005202 <UART_SetConfig+0x32a>
 80051c8:	e027      	b.n	800521a <UART_SetConfig+0x342>
 80051ca:	bf00      	nop
 80051cc:	efff69f3 	.word	0xefff69f3
 80051d0:	40011000 	.word	0x40011000
 80051d4:	40023800 	.word	0x40023800
 80051d8:	40004400 	.word	0x40004400
 80051dc:	40004800 	.word	0x40004800
 80051e0:	40004c00 	.word	0x40004c00
 80051e4:	40005000 	.word	0x40005000
 80051e8:	40011400 	.word	0x40011400
 80051ec:	40007800 	.word	0x40007800
 80051f0:	40007c00 	.word	0x40007c00
 80051f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051f8:	d006      	beq.n	8005208 <UART_SetConfig+0x330>
 80051fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80051fe:	d009      	beq.n	8005214 <UART_SetConfig+0x33c>
 8005200:	e00b      	b.n	800521a <UART_SetConfig+0x342>
 8005202:	2300      	movs	r3, #0
 8005204:	77fb      	strb	r3, [r7, #31]
 8005206:	e00e      	b.n	8005226 <UART_SetConfig+0x34e>
 8005208:	2302      	movs	r3, #2
 800520a:	77fb      	strb	r3, [r7, #31]
 800520c:	e00b      	b.n	8005226 <UART_SetConfig+0x34e>
 800520e:	2304      	movs	r3, #4
 8005210:	77fb      	strb	r3, [r7, #31]
 8005212:	e008      	b.n	8005226 <UART_SetConfig+0x34e>
 8005214:	2308      	movs	r3, #8
 8005216:	77fb      	strb	r3, [r7, #31]
 8005218:	e005      	b.n	8005226 <UART_SetConfig+0x34e>
 800521a:	2310      	movs	r3, #16
 800521c:	77fb      	strb	r3, [r7, #31]
 800521e:	bf00      	nop
 8005220:	e001      	b.n	8005226 <UART_SetConfig+0x34e>
 8005222:	2310      	movs	r3, #16
 8005224:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800522e:	d17f      	bne.n	8005330 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8005230:	7ffb      	ldrb	r3, [r7, #31]
 8005232:	2b08      	cmp	r3, #8
 8005234:	d85c      	bhi.n	80052f0 <UART_SetConfig+0x418>
 8005236:	a201      	add	r2, pc, #4	; (adr r2, 800523c <UART_SetConfig+0x364>)
 8005238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523c:	08005261 	.word	0x08005261
 8005240:	08005281 	.word	0x08005281
 8005244:	080052a1 	.word	0x080052a1
 8005248:	080052f1 	.word	0x080052f1
 800524c:	080052b9 	.word	0x080052b9
 8005250:	080052f1 	.word	0x080052f1
 8005254:	080052f1 	.word	0x080052f1
 8005258:	080052f1 	.word	0x080052f1
 800525c:	080052d9 	.word	0x080052d9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005260:	f7fd fd2e 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 8005264:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	005a      	lsls	r2, r3, #1
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	085b      	lsrs	r3, r3, #1
 8005270:	441a      	add	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	fbb2 f3f3 	udiv	r3, r2, r3
 800527a:	b29b      	uxth	r3, r3
 800527c:	61bb      	str	r3, [r7, #24]
        break;
 800527e:	e03a      	b.n	80052f6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005280:	f7fd fd32 	bl	8002ce8 <HAL_RCC_GetPCLK2Freq>
 8005284:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	005a      	lsls	r2, r3, #1
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	085b      	lsrs	r3, r3, #1
 8005290:	441a      	add	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	fbb2 f3f3 	udiv	r3, r2, r3
 800529a:	b29b      	uxth	r3, r3
 800529c:	61bb      	str	r3, [r7, #24]
        break;
 800529e:	e02a      	b.n	80052f6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	085a      	lsrs	r2, r3, #1
 80052a6:	4b5f      	ldr	r3, [pc, #380]	; (8005424 <UART_SetConfig+0x54c>)
 80052a8:	4413      	add	r3, r2
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	6852      	ldr	r2, [r2, #4]
 80052ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	61bb      	str	r3, [r7, #24]
        break;
 80052b6:	e01e      	b.n	80052f6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052b8:	f7fd fc20 	bl	8002afc <HAL_RCC_GetSysClockFreq>
 80052bc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	005a      	lsls	r2, r3, #1
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	085b      	lsrs	r3, r3, #1
 80052c8:	441a      	add	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	61bb      	str	r3, [r7, #24]
        break;
 80052d6:	e00e      	b.n	80052f6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	085b      	lsrs	r3, r3, #1
 80052de:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	61bb      	str	r3, [r7, #24]
        break;
 80052ee:	e002      	b.n	80052f6 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	75fb      	strb	r3, [r7, #23]
        break;
 80052f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	2b0f      	cmp	r3, #15
 80052fa:	d916      	bls.n	800532a <UART_SetConfig+0x452>
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005302:	d212      	bcs.n	800532a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	b29b      	uxth	r3, r3
 8005308:	f023 030f 	bic.w	r3, r3, #15
 800530c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	085b      	lsrs	r3, r3, #1
 8005312:	b29b      	uxth	r3, r3
 8005314:	f003 0307 	and.w	r3, r3, #7
 8005318:	b29a      	uxth	r2, r3
 800531a:	897b      	ldrh	r3, [r7, #10]
 800531c:	4313      	orrs	r3, r2
 800531e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	897a      	ldrh	r2, [r7, #10]
 8005326:	60da      	str	r2, [r3, #12]
 8005328:	e070      	b.n	800540c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	75fb      	strb	r3, [r7, #23]
 800532e:	e06d      	b.n	800540c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8005330:	7ffb      	ldrb	r3, [r7, #31]
 8005332:	2b08      	cmp	r3, #8
 8005334:	d859      	bhi.n	80053ea <UART_SetConfig+0x512>
 8005336:	a201      	add	r2, pc, #4	; (adr r2, 800533c <UART_SetConfig+0x464>)
 8005338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533c:	08005361 	.word	0x08005361
 8005340:	0800537f 	.word	0x0800537f
 8005344:	0800539d 	.word	0x0800539d
 8005348:	080053eb 	.word	0x080053eb
 800534c:	080053b5 	.word	0x080053b5
 8005350:	080053eb 	.word	0x080053eb
 8005354:	080053eb 	.word	0x080053eb
 8005358:	080053eb 	.word	0x080053eb
 800535c:	080053d3 	.word	0x080053d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005360:	f7fd fcae 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 8005364:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	085a      	lsrs	r2, r3, #1
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	441a      	add	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	fbb2 f3f3 	udiv	r3, r2, r3
 8005378:	b29b      	uxth	r3, r3
 800537a:	61bb      	str	r3, [r7, #24]
        break;
 800537c:	e038      	b.n	80053f0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800537e:	f7fd fcb3 	bl	8002ce8 <HAL_RCC_GetPCLK2Freq>
 8005382:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	085a      	lsrs	r2, r3, #1
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	441a      	add	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	fbb2 f3f3 	udiv	r3, r2, r3
 8005396:	b29b      	uxth	r3, r3
 8005398:	61bb      	str	r3, [r7, #24]
        break;
 800539a:	e029      	b.n	80053f0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	085a      	lsrs	r2, r3, #1
 80053a2:	4b21      	ldr	r3, [pc, #132]	; (8005428 <UART_SetConfig+0x550>)
 80053a4:	4413      	add	r3, r2
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	6852      	ldr	r2, [r2, #4]
 80053aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	61bb      	str	r3, [r7, #24]
        break;
 80053b2:	e01d      	b.n	80053f0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053b4:	f7fd fba2 	bl	8002afc <HAL_RCC_GetSysClockFreq>
 80053b8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	085a      	lsrs	r2, r3, #1
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	441a      	add	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	61bb      	str	r3, [r7, #24]
        break;
 80053d0:	e00e      	b.n	80053f0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	085b      	lsrs	r3, r3, #1
 80053d8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	61bb      	str	r3, [r7, #24]
        break;
 80053e8:	e002      	b.n	80053f0 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	75fb      	strb	r3, [r7, #23]
        break;
 80053ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	2b0f      	cmp	r3, #15
 80053f4:	d908      	bls.n	8005408 <UART_SetConfig+0x530>
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053fc:	d204      	bcs.n	8005408 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	69ba      	ldr	r2, [r7, #24]
 8005404:	60da      	str	r2, [r3, #12]
 8005406:	e001      	b.n	800540c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005418:	7dfb      	ldrb	r3, [r7, #23]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3720      	adds	r7, #32
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	01e84800 	.word	0x01e84800
 8005428:	00f42400 	.word	0x00f42400

0800542c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00a      	beq.n	8005456 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547c:	f003 0304 	and.w	r3, r3, #4
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00a      	beq.n	800549a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549e:	f003 0308 	and.w	r3, r3, #8
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00a      	beq.n	80054bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	f003 0310 	and.w	r3, r3, #16
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00a      	beq.n	80054de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e2:	f003 0320 	and.w	r3, r3, #32
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00a      	beq.n	8005500 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005508:	2b00      	cmp	r3, #0
 800550a:	d01a      	beq.n	8005542 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800552a:	d10a      	bne.n	8005542 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	430a      	orrs	r2, r1
 8005540:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00a      	beq.n	8005564 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	605a      	str	r2, [r3, #4]
  }
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af02      	add	r7, sp, #8
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800557e:	f7fc f851 	bl	8001624 <HAL_GetTick>
 8005582:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0308 	and.w	r3, r3, #8
 800558e:	2b08      	cmp	r3, #8
 8005590:	d10e      	bne.n	80055b0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005592:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f82a 	bl	80055fa <UART_WaitOnFlagUntilTimeout>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e020      	b.n	80055f2 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0304 	and.w	r3, r3, #4
 80055ba:	2b04      	cmp	r3, #4
 80055bc:	d10e      	bne.n	80055dc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 f814 	bl	80055fa <UART_WaitOnFlagUntilTimeout>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e00a      	b.n	80055f2 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2220      	movs	r2, #32
 80055e0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2220      	movs	r2, #32
 80055e6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b084      	sub	sp, #16
 80055fe:	af00      	add	r7, sp, #0
 8005600:	60f8      	str	r0, [r7, #12]
 8005602:	60b9      	str	r1, [r7, #8]
 8005604:	603b      	str	r3, [r7, #0]
 8005606:	4613      	mov	r3, r2
 8005608:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800560a:	e05d      	b.n	80056c8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005612:	d059      	beq.n	80056c8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005614:	f7fc f806 	bl	8001624 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	69ba      	ldr	r2, [r7, #24]
 8005620:	429a      	cmp	r2, r3
 8005622:	d302      	bcc.n	800562a <UART_WaitOnFlagUntilTimeout+0x30>
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d11b      	bne.n	8005662 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005638:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 0201 	bic.w	r2, r2, #1
 8005648:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2220      	movs	r2, #32
 800564e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2220      	movs	r2, #32
 8005654:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e042      	b.n	80056e8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b00      	cmp	r3, #0
 800566e:	d02b      	beq.n	80056c8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800567a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800567e:	d123      	bne.n	80056c8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005688:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005698:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689a      	ldr	r2, [r3, #8]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 0201 	bic.w	r2, r2, #1
 80056a8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2220      	movs	r2, #32
 80056ae:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2220      	movs	r2, #32
 80056b4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2220      	movs	r2, #32
 80056ba:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e00f      	b.n	80056e8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	69da      	ldr	r2, [r3, #28]
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	4013      	ands	r3, r2
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	bf0c      	ite	eq
 80056d8:	2301      	moveq	r3, #1
 80056da:	2300      	movne	r3, #0
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	461a      	mov	r2, r3
 80056e0:	79fb      	ldrb	r3, [r7, #7]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d092      	beq.n	800560c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005706:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2220      	movs	r2, #32
 800570c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800570e:	bf00      	nop
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800571a:	b480      	push	{r7}
 800571c:	b083      	sub	sp, #12
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005730:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0201 	bic.w	r2, r2, #1
 8005740:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2220      	movs	r2, #32
 8005746:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	661a      	str	r2, [r3, #96]	; 0x60
}
 800574e:	bf00      	nop
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b084      	sub	sp, #16
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005766:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	69db      	ldr	r3, [r3, #28]
 800576c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005770:	d01e      	beq.n	80057b0 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005788:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689a      	ldr	r2, [r3, #8]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 0201 	bic.w	r2, r2, #1
 8005798:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	689a      	ldr	r2, [r3, #8]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057a8:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2220      	movs	r2, #32
 80057ae:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f7fb f941 	bl	8000a38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057b6:	bf00      	nop
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b084      	sub	sp, #16
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ca:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f7ff fb65 	bl	8004e9c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057d2:	bf00      	nop
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b086      	sub	sp, #24
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ec:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057fe:	2b80      	cmp	r3, #128	; 0x80
 8005800:	d109      	bne.n	8005816 <UART_DMAError+0x3c>
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	2b21      	cmp	r3, #33	; 0x21
 8005806:	d106      	bne.n	8005816 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	2200      	movs	r2, #0
 800580c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005810:	6978      	ldr	r0, [r7, #20]
 8005812:	f7ff ff6d 	bl	80056f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005820:	2b40      	cmp	r3, #64	; 0x40
 8005822:	d109      	bne.n	8005838 <UART_DMAError+0x5e>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2b22      	cmp	r3, #34	; 0x22
 8005828:	d106      	bne.n	8005838 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	2200      	movs	r2, #0
 800582e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005832:	6978      	ldr	r0, [r7, #20]
 8005834:	f7ff ff71 	bl	800571a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800583c:	f043 0210 	orr.w	r2, r3, #16
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005844:	6978      	ldr	r0, [r7, #20]
 8005846:	f7ff fb33 	bl	8004eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800584a:	bf00      	nop
 800584c:	3718      	adds	r7, #24
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b084      	sub	sp, #16
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f7ff fb1d 	bl	8004eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005876:	bf00      	nop
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b082      	sub	sp, #8
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005894:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2220      	movs	r2, #32
 800589a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7ff faf0 	bl	8004e88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058a8:	bf00      	nop
 80058aa:	3708      	adds	r7, #8
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <LL_GPIO_SetPinMode>:
{
 80058b0:	b480      	push	{r7}
 80058b2:	b089      	sub	sp, #36	; 0x24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	fa93 f3a3 	rbit	r3, r3
 80058ca:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	fab3 f383 	clz	r3, r3
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	005b      	lsls	r3, r3, #1
 80058d6:	2103      	movs	r1, #3
 80058d8:	fa01 f303 	lsl.w	r3, r1, r3
 80058dc:	43db      	mvns	r3, r3
 80058de:	401a      	ands	r2, r3
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	fa93 f3a3 	rbit	r3, r3
 80058ea:	61bb      	str	r3, [r7, #24]
  return result;
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	fab3 f383 	clz	r3, r3
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	005b      	lsls	r3, r3, #1
 80058f6:	6879      	ldr	r1, [r7, #4]
 80058f8:	fa01 f303 	lsl.w	r3, r1, r3
 80058fc:	431a      	orrs	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	601a      	str	r2, [r3, #0]
}
 8005902:	bf00      	nop
 8005904:	3724      	adds	r7, #36	; 0x24
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <LL_GPIO_SetPinOutputType>:
{
 800590e:	b480      	push	{r7}
 8005910:	b085      	sub	sp, #20
 8005912:	af00      	add	r7, sp, #0
 8005914:	60f8      	str	r0, [r7, #12]
 8005916:	60b9      	str	r1, [r7, #8]
 8005918:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	43db      	mvns	r3, r3
 8005922:	401a      	ands	r2, r3
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	6879      	ldr	r1, [r7, #4]
 8005928:	fb01 f303 	mul.w	r3, r1, r3
 800592c:	431a      	orrs	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	605a      	str	r2, [r3, #4]
}
 8005932:	bf00      	nop
 8005934:	3714      	adds	r7, #20
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr

0800593e <LL_GPIO_SetPinSpeed>:
{
 800593e:	b480      	push	{r7}
 8005940:	b089      	sub	sp, #36	; 0x24
 8005942:	af00      	add	r7, sp, #0
 8005944:	60f8      	str	r0, [r7, #12]
 8005946:	60b9      	str	r1, [r7, #8]
 8005948:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	689a      	ldr	r2, [r3, #8]
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	fa93 f3a3 	rbit	r3, r3
 8005958:	613b      	str	r3, [r7, #16]
  return result;
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	fab3 f383 	clz	r3, r3
 8005960:	b2db      	uxtb	r3, r3
 8005962:	005b      	lsls	r3, r3, #1
 8005964:	2103      	movs	r1, #3
 8005966:	fa01 f303 	lsl.w	r3, r1, r3
 800596a:	43db      	mvns	r3, r3
 800596c:	401a      	ands	r2, r3
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	fa93 f3a3 	rbit	r3, r3
 8005978:	61bb      	str	r3, [r7, #24]
  return result;
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	fab3 f383 	clz	r3, r3
 8005980:	b2db      	uxtb	r3, r3
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	6879      	ldr	r1, [r7, #4]
 8005986:	fa01 f303 	lsl.w	r3, r1, r3
 800598a:	431a      	orrs	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	609a      	str	r2, [r3, #8]
}
 8005990:	bf00      	nop
 8005992:	3724      	adds	r7, #36	; 0x24
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <LL_GPIO_SetPinPull>:
{
 800599c:	b480      	push	{r7}
 800599e:	b089      	sub	sp, #36	; 0x24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	68da      	ldr	r2, [r3, #12]
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	fa93 f3a3 	rbit	r3, r3
 80059b6:	613b      	str	r3, [r7, #16]
  return result;
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	fab3 f383 	clz	r3, r3
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	005b      	lsls	r3, r3, #1
 80059c2:	2103      	movs	r1, #3
 80059c4:	fa01 f303 	lsl.w	r3, r1, r3
 80059c8:	43db      	mvns	r3, r3
 80059ca:	401a      	ands	r2, r3
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	fa93 f3a3 	rbit	r3, r3
 80059d6:	61bb      	str	r3, [r7, #24]
  return result;
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	fab3 f383 	clz	r3, r3
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	6879      	ldr	r1, [r7, #4]
 80059e4:	fa01 f303 	lsl.w	r3, r1, r3
 80059e8:	431a      	orrs	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	60da      	str	r2, [r3, #12]
}
 80059ee:	bf00      	nop
 80059f0:	3724      	adds	r7, #36	; 0x24
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <LL_GPIO_SetAFPin_0_7>:
{
 80059fa:	b480      	push	{r7}
 80059fc:	b089      	sub	sp, #36	; 0x24
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	60f8      	str	r0, [r7, #12]
 8005a02:	60b9      	str	r1, [r7, #8]
 8005a04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6a1a      	ldr	r2, [r3, #32]
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	fa93 f3a3 	rbit	r3, r3
 8005a14:	613b      	str	r3, [r7, #16]
  return result;
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	fab3 f383 	clz	r3, r3
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	210f      	movs	r1, #15
 8005a22:	fa01 f303 	lsl.w	r3, r1, r3
 8005a26:	43db      	mvns	r3, r3
 8005a28:	401a      	ands	r2, r3
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	fa93 f3a3 	rbit	r3, r3
 8005a34:	61bb      	str	r3, [r7, #24]
  return result;
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	fab3 f383 	clz	r3, r3
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	6879      	ldr	r1, [r7, #4]
 8005a42:	fa01 f303 	lsl.w	r3, r1, r3
 8005a46:	431a      	orrs	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	621a      	str	r2, [r3, #32]
}
 8005a4c:	bf00      	nop
 8005a4e:	3724      	adds	r7, #36	; 0x24
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <LL_GPIO_SetAFPin_8_15>:
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b089      	sub	sp, #36	; 0x24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	0a1b      	lsrs	r3, r3, #8
 8005a6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	fa93 f3a3 	rbit	r3, r3
 8005a74:	613b      	str	r3, [r7, #16]
  return result;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	fab3 f383 	clz	r3, r3
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	210f      	movs	r1, #15
 8005a82:	fa01 f303 	lsl.w	r3, r1, r3
 8005a86:	43db      	mvns	r3, r3
 8005a88:	401a      	ands	r2, r3
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	0a1b      	lsrs	r3, r3, #8
 8005a8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	fa93 f3a3 	rbit	r3, r3
 8005a96:	61bb      	str	r3, [r7, #24]
  return result;
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	fab3 f383 	clz	r3, r3
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	6879      	ldr	r1, [r7, #4]
 8005aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa8:	431a      	orrs	r2, r3
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005aae:	bf00      	nop
 8005ab0:	3724      	adds	r7, #36	; 0x24
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b088      	sub	sp, #32
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
 8005ac2:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	fa93 f3a3 	rbit	r3, r3
 8005ad8:	613b      	str	r3, [r7, #16]
  return result;
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	fab3 f383 	clz	r3, r3
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005ae4:	e051      	b.n	8005b8a <LL_GPIO_Init+0xd0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	2101      	movs	r1, #1
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	fa01 f303 	lsl.w	r3, r1, r3
 8005af2:	4013      	ands	r3, r2
 8005af4:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d043      	beq.n	8005b84 <LL_GPIO_Init+0xca>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d003      	beq.n	8005b0c <LL_GPIO_Init+0x52>
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d10e      	bne.n	8005b2a <LL_GPIO_Init+0x70>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	461a      	mov	r2, r3
 8005b12:	69b9      	ldr	r1, [r7, #24]
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f7ff ff12 	bl	800593e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	6819      	ldr	r1, [r3, #0]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	461a      	mov	r2, r3
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f7ff fef2 	bl	800590e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	69b9      	ldr	r1, [r7, #24]
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7ff ff32 	bl	800599c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d11a      	bne.n	8005b76 <LL_GPIO_Init+0xbc>
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	fa93 f3a3 	rbit	r3, r3
 8005b4a:	60bb      	str	r3, [r7, #8]
  return result;
 8005b4c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8005b4e:	fab3 f383 	clz	r3, r3
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b07      	cmp	r3, #7
 8005b56:	d807      	bhi.n	8005b68 <LL_GPIO_Init+0xae>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	69b9      	ldr	r1, [r7, #24]
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f7ff ff4a 	bl	80059fa <LL_GPIO_SetAFPin_0_7>
 8005b66:	e006      	b.n	8005b76 <LL_GPIO_Init+0xbc>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	69b9      	ldr	r1, [r7, #24]
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f7ff ff71 	bl	8005a58 <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	69b9      	ldr	r1, [r7, #24]
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f7ff fe96 	bl	80058b0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	3301      	adds	r3, #1
 8005b88:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	fa22 f303 	lsr.w	r3, r2, r3
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1a6      	bne.n	8005ae6 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3720      	adds	r7, #32
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <LL_SPI_IsEnabled>:
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb2:	2b40      	cmp	r3, #64	; 0x40
 8005bb4:	d101      	bne.n	8005bba <LL_SPI_IsEnabled+0x18>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e000      	b.n	8005bbc <LL_SPI_IsEnabled+0x1a>
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <LL_SPI_SetCRCPolynomial>:
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	611a      	str	r2, [r3, #16]
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f7ff ffd3 	bl	8005ba2 <LL_SPI_IsEnabled>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d137      	bne.n	8005c72 <LL_SPI_Init+0x8a>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	4b20      	ldr	r3, [pc, #128]	; (8005c88 <LL_SPI_Init+0xa0>)
 8005c08:	4013      	ands	r3, r2
 8005c0a:	683a      	ldr	r2, [r7, #0]
 8005c0c:	6811      	ldr	r1, [r2, #0]
 8005c0e:	683a      	ldr	r2, [r7, #0]
 8005c10:	6852      	ldr	r2, [r2, #4]
 8005c12:	4311      	orrs	r1, r2
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	68d2      	ldr	r2, [r2, #12]
 8005c18:	4311      	orrs	r1, r2
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	6912      	ldr	r2, [r2, #16]
 8005c1e:	4311      	orrs	r1, r2
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	6952      	ldr	r2, [r2, #20]
 8005c24:	4311      	orrs	r1, r2
 8005c26:	683a      	ldr	r2, [r7, #0]
 8005c28:	6992      	ldr	r2, [r2, #24]
 8005c2a:	4311      	orrs	r1, r2
 8005c2c:	683a      	ldr	r2, [r7, #0]
 8005c2e:	69d2      	ldr	r2, [r2, #28]
 8005c30:	4311      	orrs	r1, r2
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	6a12      	ldr	r2, [r2, #32]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	431a      	orrs	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	4b12      	ldr	r3, [pc, #72]	; (8005c8c <LL_SPI_Init+0xa4>)
 8005c44:	4013      	ands	r3, r2
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	6891      	ldr	r1, [r2, #8]
 8005c4a:	683a      	ldr	r2, [r7, #0]
 8005c4c:	6952      	ldr	r2, [r2, #20]
 8005c4e:	0c12      	lsrs	r2, r2, #16
 8005c50:	430a      	orrs	r2, r1
 8005c52:	431a      	orrs	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	6a1b      	ldr	r3, [r3, #32]
 8005c5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c60:	d105      	bne.n	8005c6e <LL_SPI_Init+0x86>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c66:	4619      	mov	r1, r3
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f7ff ffad 	bl	8005bc8 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	69db      	ldr	r3, [r3, #28]
 8005c76:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	61da      	str	r2, [r3, #28]
  return status;
 8005c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	ffff0040 	.word	0xffff0040
 8005c8c:	fffff0fb 	.word	0xfffff0fb

08005c90 <__errno>:
 8005c90:	4b01      	ldr	r3, [pc, #4]	; (8005c98 <__errno+0x8>)
 8005c92:	6818      	ldr	r0, [r3, #0]
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	20000020 	.word	0x20000020

08005c9c <__libc_init_array>:
 8005c9c:	b570      	push	{r4, r5, r6, lr}
 8005c9e:	4e0d      	ldr	r6, [pc, #52]	; (8005cd4 <__libc_init_array+0x38>)
 8005ca0:	4c0d      	ldr	r4, [pc, #52]	; (8005cd8 <__libc_init_array+0x3c>)
 8005ca2:	1ba4      	subs	r4, r4, r6
 8005ca4:	10a4      	asrs	r4, r4, #2
 8005ca6:	2500      	movs	r5, #0
 8005ca8:	42a5      	cmp	r5, r4
 8005caa:	d109      	bne.n	8005cc0 <__libc_init_array+0x24>
 8005cac:	4e0b      	ldr	r6, [pc, #44]	; (8005cdc <__libc_init_array+0x40>)
 8005cae:	4c0c      	ldr	r4, [pc, #48]	; (8005ce0 <__libc_init_array+0x44>)
 8005cb0:	f000 f9c4 	bl	800603c <_init>
 8005cb4:	1ba4      	subs	r4, r4, r6
 8005cb6:	10a4      	asrs	r4, r4, #2
 8005cb8:	2500      	movs	r5, #0
 8005cba:	42a5      	cmp	r5, r4
 8005cbc:	d105      	bne.n	8005cca <__libc_init_array+0x2e>
 8005cbe:	bd70      	pop	{r4, r5, r6, pc}
 8005cc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005cc4:	4798      	blx	r3
 8005cc6:	3501      	adds	r5, #1
 8005cc8:	e7ee      	b.n	8005ca8 <__libc_init_array+0xc>
 8005cca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005cce:	4798      	blx	r3
 8005cd0:	3501      	adds	r5, #1
 8005cd2:	e7f2      	b.n	8005cba <__libc_init_array+0x1e>
 8005cd4:	080062f0 	.word	0x080062f0
 8005cd8:	080062f0 	.word	0x080062f0
 8005cdc:	080062f0 	.word	0x080062f0
 8005ce0:	080062f4 	.word	0x080062f4

08005ce4 <memset>:
 8005ce4:	4402      	add	r2, r0
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d100      	bne.n	8005cee <memset+0xa>
 8005cec:	4770      	bx	lr
 8005cee:	f803 1b01 	strb.w	r1, [r3], #1
 8005cf2:	e7f9      	b.n	8005ce8 <memset+0x4>

08005cf4 <checkint>:
 8005cf4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8005cf8:	2b7e      	cmp	r3, #126	; 0x7e
 8005cfa:	dd10      	ble.n	8005d1e <checkint+0x2a>
 8005cfc:	2b96      	cmp	r3, #150	; 0x96
 8005cfe:	dc0c      	bgt.n	8005d1a <checkint+0x26>
 8005d00:	2201      	movs	r2, #1
 8005d02:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8005d06:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0a:	1e5a      	subs	r2, r3, #1
 8005d0c:	4202      	tst	r2, r0
 8005d0e:	d106      	bne.n	8005d1e <checkint+0x2a>
 8005d10:	4203      	tst	r3, r0
 8005d12:	bf0c      	ite	eq
 8005d14:	2002      	moveq	r0, #2
 8005d16:	2001      	movne	r0, #1
 8005d18:	4770      	bx	lr
 8005d1a:	2002      	movs	r0, #2
 8005d1c:	4770      	bx	lr
 8005d1e:	2000      	movs	r0, #0
 8005d20:	4770      	bx	lr
 8005d22:	0000      	movs	r0, r0
 8005d24:	0000      	movs	r0, r0
	...

08005d28 <powf>:
 8005d28:	ee10 1a10 	vmov	r1, s0
 8005d2c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8005d30:	ee10 4a90 	vmov	r4, s1
 8005d34:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8005d38:	0062      	lsls	r2, r4, #1
 8005d3a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8005d3e:	eef0 4a60 	vmov.f32	s9, s1
 8005d42:	f102 30ff 	add.w	r0, r2, #4294967295
 8005d46:	4b92      	ldr	r3, [pc, #584]	; (8005f90 <powf+0x268>)
 8005d48:	d255      	bcs.n	8005df6 <powf+0xce>
 8005d4a:	4298      	cmp	r0, r3
 8005d4c:	d855      	bhi.n	8005dfa <powf+0xd2>
 8005d4e:	2000      	movs	r0, #0
 8005d50:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 8005d54:	4a8f      	ldr	r2, [pc, #572]	; (8005f94 <powf+0x26c>)
 8005d56:	eebf 2b00 	vmov.f64	d2, #240	; 0xbf800000 -1.0
 8005d5a:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 8005d5e:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 8005d62:	0ddb      	lsrs	r3, r3, #23
 8005d64:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8005d68:	05db      	lsls	r3, r3, #23
 8005d6a:	ed94 6b00 	vldr	d6, [r4]
 8005d6e:	1ac9      	subs	r1, r1, r3
 8005d70:	ee07 1a90 	vmov	s15, r1
 8005d74:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 8005d78:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005d7c:	eea6 2b07 	vfma.f64	d2, d6, d7
 8005d80:	ed92 7b42 	vldr	d7, [r2, #264]	; 0x108
 8005d84:	ee22 6b02 	vmul.f64	d6, d2, d2
 8005d88:	eea2 7b05 	vfma.f64	d7, d2, d5
 8005d8c:	15db      	asrs	r3, r3, #23
 8005d8e:	ed94 5b02 	vldr	d5, [r4, #8]
 8005d92:	ee00 3a10 	vmov	s0, r3
 8005d96:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8005d9a:	ee30 0b05 	vadd.f64	d0, d0, d5
 8005d9e:	ed92 5b48 	vldr	d5, [r2, #288]	; 0x120
 8005da2:	ed92 3b44 	vldr	d3, [r2, #272]	; 0x110
 8005da6:	eea2 0b05 	vfma.f64	d0, d2, d5
 8005daa:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 8005dae:	eea2 5b03 	vfma.f64	d5, d2, d3
 8005db2:	eea6 0b05 	vfma.f64	d0, d6, d5
 8005db6:	ee26 6b06 	vmul.f64	d6, d6, d6
 8005dba:	eea7 0b06 	vfma.f64	d0, d7, d6
 8005dbe:	eeb7 7ae4 	vcvt.f64.f32	d7, s9
 8005dc2:	ee20 0b07 	vmul.f64	d0, d0, d7
 8005dc6:	ee10 3a90 	vmov	r3, s1
 8005dca:	2500      	movs	r5, #0
 8005dcc:	0bda      	lsrs	r2, r3, #15
 8005dce:	2300      	movs	r3, #0
 8005dd0:	b292      	uxth	r2, r2
 8005dd2:	f248 04be 	movw	r4, #32958	; 0x80be
 8005dd6:	429d      	cmp	r5, r3
 8005dd8:	bf08      	it	eq
 8005dda:	4294      	cmpeq	r4, r2
 8005ddc:	f080 8094 	bcs.w	8005f08 <powf+0x1e0>
 8005de0:	ed9f 7b65 	vldr	d7, [pc, #404]	; 8005f78 <powf+0x250>
 8005de4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8005de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dec:	dd76      	ble.n	8005edc <powf+0x1b4>
 8005dee:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8005df2:	f000 b8fd 	b.w	8005ff0 <__math_oflowf>
 8005df6:	4298      	cmp	r0, r3
 8005df8:	d92d      	bls.n	8005e56 <powf+0x12e>
 8005dfa:	b952      	cbnz	r2, 8005e12 <powf+0xea>
 8005dfc:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8005e00:	005b      	lsls	r3, r3, #1
 8005e02:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8005e06:	f240 80ae 	bls.w	8005f66 <powf+0x23e>
 8005e0a:	ee30 0a24 	vadd.f32	s0, s0, s9
 8005e0e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8005e12:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8005e16:	d105      	bne.n	8005e24 <powf+0xfc>
 8005e18:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8005e1c:	0064      	lsls	r4, r4, #1
 8005e1e:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8005e22:	e7f0      	b.n	8005e06 <powf+0xde>
 8005e24:	004b      	lsls	r3, r1, #1
 8005e26:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8005e2a:	d8ee      	bhi.n	8005e0a <powf+0xe2>
 8005e2c:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8005e30:	d1eb      	bne.n	8005e0a <powf+0xe2>
 8005e32:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8005e36:	f000 8096 	beq.w	8005f66 <powf+0x23e>
 8005e3a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8005e3e:	ea6f 0404 	mvn.w	r4, r4
 8005e42:	bf34      	ite	cc
 8005e44:	2300      	movcc	r3, #0
 8005e46:	2301      	movcs	r3, #1
 8005e48:	0fe4      	lsrs	r4, r4, #31
 8005e4a:	42a3      	cmp	r3, r4
 8005e4c:	f040 808e 	bne.w	8005f6c <powf+0x244>
 8005e50:	ee24 0aa4 	vmul.f32	s0, s9, s9
 8005e54:	e7db      	b.n	8005e0e <powf+0xe6>
 8005e56:	004d      	lsls	r5, r1, #1
 8005e58:	1e6a      	subs	r2, r5, #1
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d91b      	bls.n	8005e96 <powf+0x16e>
 8005e5e:	2900      	cmp	r1, #0
 8005e60:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005e64:	da0e      	bge.n	8005e84 <powf+0x15c>
 8005e66:	ee10 0a90 	vmov	r0, s1
 8005e6a:	f7ff ff43 	bl	8005cf4 <checkint>
 8005e6e:	2801      	cmp	r0, #1
 8005e70:	d108      	bne.n	8005e84 <powf+0x15c>
 8005e72:	eeb1 0a40 	vneg.f32	s0, s0
 8005e76:	b93d      	cbnz	r5, 8005e88 <powf+0x160>
 8005e78:	2c00      	cmp	r4, #0
 8005e7a:	dac8      	bge.n	8005e0e <powf+0xe6>
 8005e7c:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8005e80:	f000 b8bc 	b.w	8005ffc <__math_divzerof>
 8005e84:	2000      	movs	r0, #0
 8005e86:	e7f6      	b.n	8005e76 <powf+0x14e>
 8005e88:	2c00      	cmp	r4, #0
 8005e8a:	dac0      	bge.n	8005e0e <powf+0xe6>
 8005e8c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005e90:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8005e94:	e7bb      	b.n	8005e0e <powf+0xe6>
 8005e96:	2900      	cmp	r1, #0
 8005e98:	da1e      	bge.n	8005ed8 <powf+0x1b0>
 8005e9a:	ee10 0a90 	vmov	r0, s1
 8005e9e:	f7ff ff29 	bl	8005cf4 <checkint>
 8005ea2:	b918      	cbnz	r0, 8005eac <powf+0x184>
 8005ea4:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8005ea8:	f000 b8b8 	b.w	800601c <__math_invalidf>
 8005eac:	2801      	cmp	r0, #1
 8005eae:	bf0c      	ite	eq
 8005eb0:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8005eb4:	2000      	movne	r0, #0
 8005eb6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005eba:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8005ebe:	f4bf af47 	bcs.w	8005d50 <powf+0x28>
 8005ec2:	eddf 0a35 	vldr	s1, [pc, #212]	; 8005f98 <powf+0x270>
 8005ec6:	ee20 0a20 	vmul.f32	s0, s0, s1
 8005eca:	ee10 3a10 	vmov	r3, s0
 8005ece:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ed2:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8005ed6:	e73b      	b.n	8005d50 <powf+0x28>
 8005ed8:	2000      	movs	r0, #0
 8005eda:	e7ee      	b.n	8005eba <powf+0x192>
 8005edc:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8005f80 <powf+0x258>
 8005ee0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8005ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ee8:	d803      	bhi.n	8005ef2 <powf+0x1ca>
 8005eea:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8005eee:	f000 b873 	b.w	8005fd8 <__math_uflowf>
 8005ef2:	ed9f 7b25 	vldr	d7, [pc, #148]	; 8005f88 <powf+0x260>
 8005ef6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8005efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005efe:	d503      	bpl.n	8005f08 <powf+0x1e0>
 8005f00:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8005f04:	f000 b86e 	b.w	8005fe4 <__math_may_uflowf>
 8005f08:	4924      	ldr	r1, [pc, #144]	; (8005f9c <powf+0x274>)
 8005f0a:	ed91 7b40 	vldr	d7, [r1, #256]	; 0x100
 8005f0e:	ee30 6b07 	vadd.f64	d6, d0, d7
 8005f12:	ec55 4b16 	vmov	r4, r5, d6
 8005f16:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005f1a:	f004 021f 	and.w	r2, r4, #31
 8005f1e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8005f22:	ed91 6b46 	vldr	d6, [r1, #280]	; 0x118
 8005f26:	ee30 0b47 	vsub.f64	d0, d0, d7
 8005f2a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8005f2e:	e9d2 6700 	ldrd	r6, r7, [r2]
 8005f32:	eea0 7b06 	vfma.f64	d7, d0, d6
 8005f36:	1824      	adds	r4, r4, r0
 8005f38:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8005f3c:	ed91 6b44 	vldr	d6, [r1, #272]	; 0x110
 8005f40:	2000      	movs	r0, #0
 8005f42:	1982      	adds	r2, r0, r6
 8005f44:	ea4f 31c4 	mov.w	r1, r4, lsl #15
 8005f48:	eb41 0307 	adc.w	r3, r1, r7
 8005f4c:	eea0 6b05 	vfma.f64	d6, d0, d5
 8005f50:	ee20 0b00 	vmul.f64	d0, d0, d0
 8005f54:	eea6 7b00 	vfma.f64	d7, d6, d0
 8005f58:	ec43 2b16 	vmov	d6, r2, r3
 8005f5c:	ee27 0b06 	vmul.f64	d0, d7, d6
 8005f60:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8005f64:	e753      	b.n	8005e0e <powf+0xe6>
 8005f66:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005f6a:	e750      	b.n	8005e0e <powf+0xe6>
 8005f6c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8005fa0 <powf+0x278>
 8005f70:	e74d      	b.n	8005e0e <powf+0xe6>
 8005f72:	bf00      	nop
 8005f74:	f3af 8000 	nop.w
 8005f78:	ffd1d571 	.word	0xffd1d571
 8005f7c:	405fffff 	.word	0x405fffff
 8005f80:	00000000 	.word	0x00000000
 8005f84:	c062c000 	.word	0xc062c000
 8005f88:	00000000 	.word	0x00000000
 8005f8c:	c062a000 	.word	0xc062a000
 8005f90:	fefffffe 	.word	0xfefffffe
 8005f94:	08006078 	.word	0x08006078
 8005f98:	4b000000 	.word	0x4b000000
 8005f9c:	080061a0 	.word	0x080061a0
 8005fa0:	00000000 	.word	0x00000000

08005fa4 <with_errnof>:
 8005fa4:	b510      	push	{r4, lr}
 8005fa6:	ed2d 8b02 	vpush	{d8}
 8005faa:	eeb0 8a40 	vmov.f32	s16, s0
 8005fae:	4604      	mov	r4, r0
 8005fb0:	f7ff fe6e 	bl	8005c90 <__errno>
 8005fb4:	eeb0 0a48 	vmov.f32	s0, s16
 8005fb8:	ecbd 8b02 	vpop	{d8}
 8005fbc:	6004      	str	r4, [r0, #0]
 8005fbe:	bd10      	pop	{r4, pc}

08005fc0 <xflowf>:
 8005fc0:	b130      	cbz	r0, 8005fd0 <xflowf+0x10>
 8005fc2:	eef1 7a40 	vneg.f32	s15, s0
 8005fc6:	2022      	movs	r0, #34	; 0x22
 8005fc8:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005fcc:	f7ff bfea 	b.w	8005fa4 <with_errnof>
 8005fd0:	eef0 7a40 	vmov.f32	s15, s0
 8005fd4:	e7f7      	b.n	8005fc6 <xflowf+0x6>
	...

08005fd8 <__math_uflowf>:
 8005fd8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005fe0 <__math_uflowf+0x8>
 8005fdc:	f7ff bff0 	b.w	8005fc0 <xflowf>
 8005fe0:	10000000 	.word	0x10000000

08005fe4 <__math_may_uflowf>:
 8005fe4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005fec <__math_may_uflowf+0x8>
 8005fe8:	f7ff bfea 	b.w	8005fc0 <xflowf>
 8005fec:	1a200000 	.word	0x1a200000

08005ff0 <__math_oflowf>:
 8005ff0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005ff8 <__math_oflowf+0x8>
 8005ff4:	f7ff bfe4 	b.w	8005fc0 <xflowf>
 8005ff8:	70000000 	.word	0x70000000

08005ffc <__math_divzerof>:
 8005ffc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006000:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8006004:	2800      	cmp	r0, #0
 8006006:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800600a:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8006018 <__math_divzerof+0x1c>
 800600e:	2022      	movs	r0, #34	; 0x22
 8006010:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8006014:	f7ff bfc6 	b.w	8005fa4 <with_errnof>
 8006018:	00000000 	.word	0x00000000

0800601c <__math_invalidf>:
 800601c:	eef0 7a40 	vmov.f32	s15, s0
 8006020:	ee30 7a40 	vsub.f32	s14, s0, s0
 8006024:	eef4 7a67 	vcmp.f32	s15, s15
 8006028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800602c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8006030:	d602      	bvs.n	8006038 <__math_invalidf+0x1c>
 8006032:	2021      	movs	r0, #33	; 0x21
 8006034:	f7ff bfb6 	b.w	8005fa4 <with_errnof>
 8006038:	4770      	bx	lr
	...

0800603c <_init>:
 800603c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800603e:	bf00      	nop
 8006040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006042:	bc08      	pop	{r3}
 8006044:	469e      	mov	lr, r3
 8006046:	4770      	bx	lr

08006048 <_fini>:
 8006048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800604a:	bf00      	nop
 800604c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800604e:	bc08      	pop	{r3}
 8006050:	469e      	mov	lr, r3
 8006052:	4770      	bx	lr
